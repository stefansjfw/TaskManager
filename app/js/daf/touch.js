/*eslint eqeqeq: ["error", "smart"]*/
/*!
* Data Aquarium Framework - Touch UI
* Copyright 2008-2024 Code On Time LLC; Licensed MIT; http://codeontime.com/license
*/
(function () {
    var _app = $app,
        agent = _app.agent,
        transitionClasses = 'app-transition',
        userAgent = navigator.userAgent,
        platform = userAgent,//navigator.platform,
        iOS = agent.iOS = /iPhone|iPad|iPod/.test(platform) && userAgent.indexOf("AppleWebKit") > -1,
        iOSMajorVersion = iOS ? parseInt(navigator.userAgent.match(/\(i.*;.*CPU.*OS (\d+)_\d+/)[1]) : null,
        android = agent.android = /Android/i.test(userAgent),
        chromeOS = agent.chromeOS = /\bCrOS\b/.test(userAgent),
        chrome = agent.chrome = /chrom(e|ium)/i.test(userAgent),
        ie = agent.ie = !!userAgent.match(/Trident\/7\./),
        edge = agent.edge = userAgent.match(/Edge/),
        safari = agent.safari = /safari/i.test(userAgent),
        isTouchPointer, forceTouchPointerCheck,
        screenDPI = 96,
        autoCompleteMaxRowCount,
        multiSelectMaxRowCount,
        isMac = agent.mac = platform.match(/Mac/i) != null,
        isWin = agent.win = platform.match(/Win/i) != null,
        _msSys = Sys,
        _msApp = _msSys.Application,
        currentCulture = _msSys.CultureInfo.CurrentCulture,
        dateTimeFormat = currentCulture.dateTimeFormat,
        filterDetailsRegex = /(<(\/*(a|span).*?>)|(&nbsp;)|onclick=".+?")/g,
        filterDetailsRegex2 = /(<(\/*(b).*?>))/g,
        filterDetailsRegex3 = /" ([.;])/g,
        columnWidthDefRegex = /\bcolumn\-width\-(\w+)\-(\d+)\b/g,
        iconFontIterator,
        iconFontRegex,
        phoneFieldRegex = /phone|fax/i,
        emailFieldRegex = /email/i,
        urlFieldRegex = /\burl/i,
        sortByRegex = /^\s*(\w+)(\s+(\w+)\s*)?$/,
        sortExpressionRegex = /\s*(\w+)(\s+(asc|ascending|desc|descending))?\s*(,|$)/gi,
        noPromoRegex = /(delete|clear|trash|remove|undo|erase)/,
        autoFillRegex = /(autofill(\d+)?-(\w+))-(\w+)/,
        //disableTouchMoveSelector = '.app-page-modal-glass-pane,.app-page-modal-background,.app-progress-screen,.ui-popup-screen,.ui-panel-dismiss,.app-page-modal-title,.app-bar-buttons,.app-bar-toolbar,.app-bar-actions',
        menuItemUrlRegex = /^(_\w+):(.+)$/,
        membership,
        menu, menuNodes, menuId, showMenuLinksOnHover,
        _web = Web,
        _membership = _web.Membership,
        WebDataView = _app,
        mobileBase, mobileForm, mobileGrid, mobileExtensions,
        resources = _web.DataViewResources,
        resourcesViews = resources.Views,
        resourcesMenu = resources.Menu,
        resourcesData = resources.Data,
        resourcesDataFilters = resourcesData.Filters,
        resourcesDataFiltersLabels = resourcesDataFilters.Labels,
        resourcesMobile = resources.Mobile,
        resourcesDevice = resources.Device,
        labelAnd = resourcesDataFiltersLabels.And,
        labelClear = resourcesDataFiltersLabels.Clear,
        labelNoRecords = resourcesData.NoRecords,
        labelNoMatches = resourcesMobile.NoMatches,
        resourcesPager = resources.Pager,
        resourcesModalPopup = resources.ModalPopup,
        labelClose = resourcesModalPopup.Close,
        resourcesHeaderFilter = resources.HeaderFilter,
        loadingStatusText = resourcesHeaderFilter.Loading,
        labelEmptyValue = resourcesHeaderFilter.EmptyValue,
        labelBlankValue = resourcesHeaderFilter.BlankValue,
        labelMore = resourcesMobile.More,
        resourcesGrid = resources.Grid,
        labelSearch = resourcesGrid.PerformAdvancedSearch,
        resourcesForm = resources.Form,
        labelMaximize = resourcesForm.Maximize,
        labelMinimize = resourcesForm.Minimize,
        labelApply = resourcesMobile.Apply,
        resourcesActions = resources.Actions,
        resourcesValidator = resources.Validator,
        resourcesLookup = resources.Lookup,
        resourcesMembership = _web.MembershipResources,
        resourcesMembershipBar = resourcesMembership && resourcesMembership.Bar,
        resourcesActionsScopesGrid = resourcesActions.Scopes.Grid,
        resourcesMobileThemes = resourcesMobile.Themes,
        resourcesNo = resourcesData.BooleanDefaultItems[0][1],
        resourcesYes = resourcesData.BooleanDefaultItems[1][1],
        resourcesEditor = resources.Editor,
        shortcuts = { cache: {}, list: [], keyCodes: [] },
        barcode = { buffer: [], time: new Date().getTime(), queue: [], keyMap: [], keysDown: {}, ready: true },
        rtf,
        dataInputStylesToBorrow = [
            { name: 'fontWeight' },
            { name: 'color', ignore: '.app-null' },
            { name: 'backgroundColor' },
            { name: 'textTransform' },
            { name: 'fontStyle', ignore: '.app-null' }
        ],
        nullValueInForms = resourcesData.NullValueInForms,
        removeFocusTimeout,
        scrollbarHoveMonitorTimeout,
        fetchEchosTimeout,
        formStickyHeaderTimeout,
        scrollStopTimeout,
        panelIsBusy,
        contextActionOnClose, skipContextActionOnClose,
        refreshContextTimeout, sidebarElement, echoTimeout, clearContextScopeTimeout, fetchOnDemandTimeout,
        skipTap, skipClick, isPageReady, touchScrolling, /*pageChangeCallback, */isInTransition,
        contextPanelScrolling = {},
        currentContext,
        newSortExpression,
        yardstickData = {},
        maxGeoCacheSize = 500, maxMapMarkers = 500,
        screenBreakpoints = ['tn', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'],
        mouseX, mouseY,
        nsSVG = 'http://www.w3.org/2000/svg',
        tooltip, tooltipDate, tooltipTimeout, tooltipDelay = 500/*, preventMouseEnter*/, // tooltip API
        notifyBar, notifyQueue = [], // notification API
        autoId = 0,
        rootDataViewId,
        skipRefreshContext,
        helpItem,
        _pendingPageText, _geoLocations,
        _readingPane,
        contentFramework,
        settings, settingsMap = {}, appBars,
        _input, inputExecute, inputFocus,
        _window = window,
        _history = history,
        isHosted = _window.parent !== _window, toolbarIsVisible,
        $body,
        $window = $(_window),
        $document = $(document),
        _screen = { isVirtual: false, top: 0, left: 0, width: 0, height: 0, physicalWidth: 0, physicalHeight: 0 },
        _device,
        _edit,
        touch,
        $touch = $.touch,
        navigationHistory = $touch.navigate.history,
        htmlEncode = _app.htmlEncode,
        feedbackDelay = 34,
        refreshContextDelay = 450,
        _displayDensity,
        scrollbarInfo,
        authenticationEnabled,
        notifyEnabled,
        //identityConfirmationRequested,
        displayMyAccount,
        loggedIn,
        useFullscreenWhenSeeAll,
        _startTouch,
        _lastTouch, _saveLastTouch,
        autoOpenMenuTimeout,
        dragMan, dragEvent, pendingDragEvent,
        dataViewHistory,
        themeAccentDemoInProgress,
        _windowAutoFocus = true,
        settingsButtonIsEnabled,
        isKioskPage,
        menuAutoExpand,
        oauth2Request,
        deviceRequest,
        loginRequest,
        // icons
        iconBack = 'material-icon-chevron-left',
        // utilities
        findDataView = _app.findDataView,
        userVariable = _app.userVar,
        sessionVariable = _app.sessionVar,
        pageVariable = _app.pageVar,
        isNullOrEmpty = String.isNullOrEmpty,
        getBoundingClientRect = _app.clientRect,
        elementAt = _app.elementAt,
        htmlToText = _app.htmlToText,
        appBaseUrl,
        appServicePath,
        _apiLoadingPromises = {},
        intersectionObserver = _window.IntersectionObserver,
        intersectionObservationCount = 0,
        _observed = {},
        observedIntersections = {},
        // html utilities
        htmlUtilities = _app.html,
        htmlTag = htmlUtilities.tag,
        div = htmlUtilities.div,
        span = htmlUtilities.span,
        $htmlTag = htmlUtilities.$tag,
        $p = htmlUtilities.$p,
        $div = htmlUtilities.$div,
        $span = htmlUtilities.$span,
        $a = htmlUtilities.$a,
        $i = htmlUtilities.$i,
        $li = htmlUtilities.$li,
        $ul = htmlUtilities.$ul;

    function navigationStack(index) {
        var stack = navigationHistory.stack,
            activeIndex = navigationHistory.activeIndex,
            result;
        switch (index) {
            case 'length':
                result = stack.length;
                break;
            case 'list':
                result = stack;
                break;
            case 'next':
                result = stack[activeIndex + 1];
                break;
            case 'prev':
                result = stack[activeIndex - 1];
                break;
            case 'index':
                result = activeIndex;
                break;
            case 'last':
                result = stack[stack.length - 1];
                break;
            case 'reduce':
                stack.splice(--navigationHistory.activeIndex, 1);
                break;
            default:
                result = stack[arguments.length ? index : activeIndex];
        }
        return result;

    }

    function fnVisible() {
        return $(this).is(':visible');
    }

    function buttonVClick(button) {
        button.trigger('vclick');
    }

    function itemToContextOption(item) {
        return item.find('a').data('context-action');
    }

    function expandCollapseMenuItem(item, animate) {
        var parentItem = item,
            option = itemToContextOption(item),
            itemDepth = option.depth,
            prevItem,
            nextItem = item.next(),
            prevOption,
            nextOption,
            doExpand,
            lastItem,
            selectedItemIsHidden,
            listContainer,
            panel, panelInner, panelStub, panelBackgroundColor,
            listContainerHeight = 0,
            transform;

        function expandItem(item) {
            var collapsed = item.is('.app-collapsed');
            item.removeClass('app-collapsed');
            if (collapsed && animate)
                listContainerHeight += getBoundingClientRect(item).height;
        }

        function collapseItem(item) {
            var expanded = !item.is('.app-collapsed');
            if (expanded && animate) {
                listContainerHeight += getBoundingClientRect(item).height;
                item.css('display', 'block');
            }
            item.addClass('app-collapsed');
            if (item.find('.app-selected').length)
                selectedItem = item;
        }

        function buttonState(item, expanded) {
            item.find('.app-btn').text('expand_' + (expanded ? 'less' : 'more')).attr('data-title', expanded ? labelMinimize : labelMaximize);
        }

        if (!item.is('.app-collapsed'))
            if (item.next().is('.app-collapsed') && itemToContextOption(nextItem).depth === itemDepth + 1)
                item = nextItem;
        lastItem = item;
        prevItem = item.prev();
        nextItem = item.next();
        option = itemToContextOption(item);
        itemDepth = option.depth;
        if (item.is('.app-collapsed')) {
            doExpand = true;
            expandItem(item);
            while (prevItem.is('.app-has-depth')) {
                prevOption = itemToContextOption(prevItem);
                if (prevOption.depth <= itemDepth)
                    expandItem(prevItem);
                if (prevOption.depth < itemDepth)
                    buttonState(prevItem, true);
                if (prevOption.depth === 1)
                    break;
                prevItem = prevItem.prev();
            }
            while (nextItem.is('.app-has-depth')) {
                nextOption = itemToContextOption(nextItem);
                if (nextOption.depth === 1)
                    break;
                lastItem = nextItem;
                if (nextOption.depth <= itemDepth)
                    expandItem(nextItem);
                nextItem = nextItem.next();
            }
        }
        else {
            nextItem = item.next();
            while (nextItem.is('.app-has-depth')) {
                nextOption = itemToContextOption(nextItem);
                if (nextOption.depth === itemDepth)
                    break;
                lastItem = nextItem;
                collapseItem(nextItem);
                buttonState(nextItem, false);
                nextItem = nextItem.next();
            }
            buttonState(item, false);
        }
        if (animate) {
            isInTransition = true;
            // toggle the "selected" state of the app-btn to reflect the "hidden" state of the selected item
            item = lastItem;
            while (item.length) {
                if (selectedItemIsHidden != null)
                    item.find('.app-btn').toggleClass('app-show-selected', selectedItemIsHidden);
                else {
                    var link = item.find('.app-item-selected');
                    if (link.length) {
                        selectedItemIsHidden = item.is('.app-collapsed');
                        item.closest('.ui-listview').find('.app-show-selected').removeClass('app-show-selected');
                    }
                }
                if (item.is(parentItem))
                    break;
                item = item.prev();
            }
            // create the transform container and move all items before the parent into the container
            transform = 'translate3d(0,-' + listContainerHeight + 'px,0)';
            listContainer = $div('ui-listview', 'style="display:block;z-index:1"').insertAfter(parentItem);
            nextItem = parentItem.next().next();
            while (nextItem.length) {
                item = nextItem.next();
                nextItem.appendTo(listContainer);
                nextItem = item;
            }
            // ensure that the items above the moved block have a background and will lay above 
            panelInner = parentItem.closest('.ui-panel-inner');
            panel = panelInner.parent();
            panelBackgroundColor = panel.css('background-color');
            panelStub = $('.app-stub-panel');
            if (!doExpand) {
                if (!panelStub.length)
                    panelStub = $div('app-stub-panel').appendTo(panelInner);
                panelStub.css('height', panelStub.height() + listContainerHeight + Math.ceil(getBoundingClientRect(panelInner).bottom - getBoundingClientRect(panelStub).bottom) - 16 - _screen.top);
            }
            listContainer.prevAll().each(function () {
                var elem = $(this);
                elem.css({ 'z-index': 2, 'background-color': elem.css('background-color') === 'rgba(0, 0, 0, 0)' ? panelBackgroundColor : '' });
            });
            ///listContainer.one('transitionend', );
            listContainer.css('transform', doExpand ? transform : '');
            setTimeout(function () {
                listContainer.css('transition', 'transform 128ms ease-out');
                setTimeout(function () {
                    listContainer.css('transform', doExpand ? '' : transform);
                    setTimeout(function () {
                        // It appearst that transitionend is not fired sometimes on the listContainer. We are using the timer instead.
                        listContainer.prevAll().css({ 'z-index': '', 'background-color': '' });
                        var children = listContainer.children().insertBefore(listContainer);
                        children.css('display', '')
                        listContainer.remove();
                        isInTransition = false;
                    }, 128);
                }, 16);
            }, 16);
        }
    }

    function elementVisibilityTest() {
        return this.style.display !== 'none';
    }


    function showHideSimpleContainersWithoutVisibleChildren(containers, show) {
        var secondPass = [];
        containers.each(function () {
            var p = $(this).parent();
            if (p.is('[data-container="collapsible"],[data-container="simple"]') && !p.closest('[data-visibility]').length) {
                var containers = p.find('[data-container]');
                var isVisible = show || (containers.length && containers.filter(elementVisibilityTest).length || p.children().filter(elementVisibilityTest).length);
                p.css('display', isVisible ? '' : 'none');
                if (p.prev().is('[data-container="toggle"]'))
                    p.prev().css('display', isVisible ? '' : 'none');
                if (p.parent().closest('[data-container="collapsible"]').length)
                    secondPass.push(p);
            }
        });
        if (secondPass.length)
            showHideSimpleContainersWithoutVisibleChildren($(secondPass), show);

        //    containers.each(function () {
        //        var p = $(this).parent();
        //        if (p.is('[data-container="collapsible"],[data-container="simple"]') && !p.closest('[data-visibility],[data-container="wizard"],[data-container="tab"]').length)
        //            p.css('display', show || p.children().filter(':visible').length ? '' : 'none');
        //    });
    }

    function appIsOffline() {
        return _app.odp.offline();
    }

    function removeFocusFromDataInput(dataInput, labelControl) {
        labelControl.removeClass('app-has-focus').addClass('app-was-focused');
        dataInput.removeClass('app-has-focus').addClass('app-was-focused');
    }

    function hasFocus(dataInput, focused) {
        dataInput = dataInputOf(dataInput);
        clearTimeout(removeFocusTimeout);
        if (dataInput.is('.app-has-focus') && focused !== false) {
            var focusedFieldName = dataInput.data('field');
            dataInput.closest('[data-layout="form"]').find('.app-has-focus')
                .filter(function () {
                    return $(this).data('field') !== focusedFieldName;
                })
                .removeClass('app-has-focus');
            return dataInput;
        }
        var labelControl = dataInput.closest('[data-container]').find('[data-control="label"][data-field="' + dataInput.attr('data-field') + '"]');
        if (focused !== false) {
            dataInput.closest('[data-layout="form"]').find('.app-has-focus,.app-was-focused').removeClass('app-has-focus app-was-focused');
            labelControl.addClass('app-has-focus');
            dataInput.addClass('app-has-focus');
            dataInput.trigger($.Event('datainputfocus.app', { dataInput: dataInput }));
        }
        else
            removeFocusTimeout = setTimeout(removeFocusFromDataInput, 120, dataInput, labelControl);
        return dataInput;
    }

    function panelToggle(panel, action) {
        if (panelIsBusy)
            return;
        panelIsBusy = true;
        if (action === 'forceclose')
            panel.panel('close', true);
        else {
            panel.find('.ui-listview-hidden').removeClass('ui-listview-hidden');
            panel.panel(action || 'toggle');
        }
        return panel;
    }

    function panelClose(panel, force) {
        return themeAccentDemoInProgress ? panel : panelToggle(panel, force ? 'forceclose' : 'close');
    }

    function isBusy() {
        var a = arguments;
        if (a.length)
            touch.busy(a[0]);
        else
            return touch.busy();
    }

    function scrollbarHoverMonitor() {
        $('.app-scrollbar-hover').filter(function () {
            var scrollbar = $(this);
            return !scrollbar.is('.app-scrollbar-dragging') && !scrollbar.data('hover') && (timeNow() - scrollbar.data('time')) > 2500;
        }).addClass('app-scrollbar-contracting').on('transitionend', function () {
            if ($(this).is('.app-scrollbar-contracting'))
                $(this).removeClass('app-scrollbar-contracting app-scrollbar-hover');
        });
    }

    function reverseFormButtons(dataView) {
        var forceReverse = $settings('ui.actions.reverse') == true;
        return (!isWin || forceReverse) && !(dataView._isWizard || dataView._controller == 'MyProfile' && dataView._viewId.match(/^(pas|ide)/)) && ($settingsEnabled('ui.actions.autoReverse') || forceReverse);
    }

    function ensureFont() {
        var menuButton = touch._menuButton,
            newWidth = menuButton[0].scrollWidth;
        if (newWidth > 24) {
            $body.addClass('app-ensure-font');
            requestAnimationFrame(ensureFont);
        }
        else
            $body.removeClass('app-ensure-font');
    }

    function focusLastInput(container) {
        if (!kiosk('focus'))
            inputFocus({ container: container, lastFocused: true });
    }

    function postAndFocusLastInput() {
        var inlineEditor = findInput().closest('.app-page-inlineeditor').length;
        activeElementOfDocument('blur');
        setTimeout(function () {
            if (inlineEditor)
                _edit.activate();
            focusLastInput();
        });
    }

    function mapShowAddress(options) {
        var address, zoom, apiType, url;
        if (options) {
            if (typeof options == 'string')
                address = options;
            else {
                address = options.address;
                zoom = options.zoom;
                apiType = options.api;
                baseMap = options.type;
            }
            if (!zoom)
                zoom = 16;
            if (!apiType)
                apiType = 'search';
            address = encodeURIComponent(address);
            if (iOS || isMac)
                url = 'http://maps.apple.com/?' + (apiType === 'dir' ? 'daddr' : 'q') + '=' + address;
            else
                url = 'https://www.google.com/maps/' + apiType + '/?api=1&zoom=' + zoom + (apiType === 'dir' ? '&destination' : '&query') + '=' + address;
            openHref('_blank:' + url);
        }
    }

    function autofillPropogateInputValues(options) {
        var config = options.config,
            isAddressOrGeocode = autofillIsAddressOrGeocode(config),
            data = options.data, v,
            dataView = findDataView(options.dataView),
            skipField, row, fieldConfig,
            dataComponents = data.components,
            values = {}, hasBlankTriggers,
            fname, fnameLowered, fieldName, mapField,
            message;
        for (fname in config)
            if (!fname.match(/^_/)) {
                fieldConfig = config[fname];
                fieldName = fieldConfig.field;
                fnameLowered = fname.toLowerCase();
                if (fnameLowered in data) {
                    if (isAddressOrGeocode) {
                        skipField = dataView.findField(fieldName);
                        if (skipField._geocode) {
                            if (!row)
                                row = dataView.row();
                            if (row[skipField.Index] == null)
                                skipField = null;
                        }
                        else
                            skipField = null;
                    }
                    if (!skipField) {
                        if (values[fieldName] != data[fnameLowered])
                            config._wasFilled = true;
                        values[fieldName] = data[fnameLowered];
                    }
                }
                else if (fnameLowered.match(/^component/) && dataComponents) {
                    fnameLowered = fnameLowered.substring(9);
                    if (fnameLowered in dataComponents)
                        values[fieldName] = dataComponents[fnameLowered];
                }
                v = values[fieldName];
                if (fieldConfig.trigger && !data._reset && (v == null || typeof v == 'string' && !v.length))
                    hasBlankTriggers = true;
            }
        if (isAddressOrGeocode && 'map' in config && !(config['map'].field in data)) {
            mapField = config['map'].field;
            values[mapField] = null;
        }
        if (hasBlankTriggers) {
            message = labelNoMatches;
            values = mapField ? {} : null;
            if (values)
                values[mapField] = null;
        }
        else
            message = options.data.name;
        if (values)
            inputExecute({ dataView: dataView, values: values, autoFill: false });
        if (options.focus)
            focusLastInput();
        if (options.notify)
            touch.notify(message);
    }

    function autofillIsAddressOrGeocode(autofill) {
        return !!autofill._type.match(/^(address|geocode)$/);
    }

    function autofillMapUpdate(autofill, dataView) {
        if (autofillIsAddressOrGeocode(autofill) && 'map' in autofill)
            inputExecute({ dataView: dataView, values: [{ name: autofill.map.field }], autoFill: false });
    }

    function autofillApplyBuiltIn(dataView, row, autofill, container) {
        var autoFillType = autofill._type,
            addressAutoFillParams,
            wasAutofilled = autofill._wasFilled,
            controller;

        if (!autofill._canceled && autofillIsAddressOrGeocode(autofill))
            if (touch.busy())
                setTimeout(function () {
                    autofillApplyBuiltIn(dataView, row, autofill, container);
                }, 100);
            else {
                addressAutoFillParams = { autofill: autoFillType };
                controller = dataView._controller;
                for (fname in autofill)
                    if (!fname.match(/^_/)) {
                        var fieldConfig = autofill[fname],
                            v = row[fieldConfig.index];
                        addressAutoFillParams[fname] = v;
                        //    if (v != null && !fieldConfig.trigger)
                        //        wasAutofilled = true;
                    }
                if (autofill._supported !== false && navigator.onLine)
                    _app.execute({ controller: controller, view: dataView._viewId, command: 'AutoFill', trigger: JSON.stringify(addressAutoFillParams) }).done(function success(r) {
                        var autoFillResult = r[controller].AutoFill,
                            supported = autoFillResult != null,
                            addressList = supported ? JSON.parse(autoFillResult) : [],
                            addressCount = addressList.length,
                            anchorRect;
                        if (addressCount)
                            if (addressCount > 1 || wasAutofilled) {
                                var items = [],
                                    anchor = container.find('[data-field="' + autofill[autofill._fields[0]].field + '"][data-control="field"]');
                                addressList.forEach(function (addr) {
                                    items.push({ 'text': addr.name, context: { config: autofill, dataView: dataView._id, data: addr, focus: true }, callback: autofillPropogateInputValues });
                                });
                                if (wasAutofilled)
                                    items.push({}, {
                                        text: resourcesModalPopup.CancelButton, callback: function () {
                                            autofill._canceled = true;
                                        }
                                    });
                                anchorRect = anchor.length ? getBoundingClientRect(anchor) : nulll;
                                showListPopup({ anchor: anchor, arrow: !!anchorRect, x: anchorRect ? anchorRect.left : null, y: anchorRect ? anchorRect.top + anchorRect.height / 2 : null, items: items });
                            }
                            else
                                autofillPropogateInputValues({ config: autofill, dataView: dataView, data: addressList[0], notify: true });
                        else
                            if (supported)
                                touch.notify(labelNoMatches);
                            else {
                                autofill._supported = supported;
                                autofillMapUpdate(autofill, dataView);
                            }

                    });
                else
                    autofillMapUpdate(autofill, dataView);
            }
    }

    function autofillConfig(dataView, name) {
        var dataViewAutoFill = dataView._autoFill,
            autofill = dataViewAutoFill && dataViewAutoFill[name],
            autoFillTypeMap,
            autoFillIteratorRegex;
        if (!autofill && !dataViewAutoFill) {
            dataView._autoFill = {};
            // enumerate all autofill types 
            autoFillTypeMap = {};
            autoFillIteratorRegex = new RegExp(autoFillRegex.source, "g");
            dataView._allFields.forEach(function (f) {
                var fieldTags = f.Tag,
                    fieldAutofill;
                if (fieldTags) {
                    fieldAutofill = autoFillIteratorRegex.exec(fieldTags);
                    while (fieldAutofill) {
                        if (!(fieldAutofill[1] in autoFillTypeMap))
                            autoFillTypeMap[fieldAutofill[1]] = fieldAutofill[3];
                        fieldAutofill = autoFillIteratorRegex.exec(fieldTags);
                    }
                }
            });
            // parse autofill group configurations
            for (var currentAutofillName in autoFillTypeMap) {
                var currentAutofillType = autoFillTypeMap[currentAutofillName],
                    autoFillTypeRegex = new RegExp(RegExp.escape(currentAutofillName) + '\\-(\\w+)'),
                    currentAutoFill = dataView._autoFill[currentAutofillName] = { _type: currentAutofillType, _fields: [] },
                    currentAutofillTriggers = [];
                dataView._allFields.forEach(function (f) {
                    var fieldTags = f.Tag,
                        fieldName = f.Name,
                        fieldAutofill = fieldTags ? fieldTags.match(autoFillTypeRegex) : null,
                        fieldAutofillName;
                    if (fieldAutofill) {
                        fieldAutofillName = fieldAutofill[1];
                        currentAutoFill[fieldAutofillName] = { field: fieldName, index: f.Index };
                        if (fieldTags.indexOf(currentAutofillName + '-trigger') !== -1)
                            currentAutofillTriggers.push(fieldAutofillName);
                        currentAutoFill._fields.push(fieldAutofillName);
                    }
                });
                if (!currentAutofillTriggers.length) {
                    if (currentAutofillType === 'address' && 'address1' in currentAutoFill)
                        currentAutofillTriggers.push('address1');
                    else if (currentAutofillType === 'geocode') {
                        if ('latitude' in currentAutoFill)
                            currentAutofillTriggers.push('latitude');
                        if ('longitude' in currentAutoFill)
                            currentAutofillTriggers.push('longitude');
                    }
                }
                currentAutofillTriggers.forEach(function (name, index) {
                    currentAutoFill[name].trigger = true;
                });
            }
            autofill = dataView._autoFill[name];
        }
        return autofill;
    }

    function makeVisible(elem, scrollable, dataItem, scrollEvents, tolerance, margin) {
        if (elem && elem.length) {
            margin = margin || 0;
            var promoGap = + margin;
            if (dataItem && !findEcho(dataItem).length) {
                var prevDataItem = dataItem.prev();
                if (!prevDataItem.is('.dv-item') && (!prevDataItem.is('.app-group') || !prevDataItem.prev().is('.dv-item'))) {
                    scrollable.scrollTop(0);
                    return;
                }
                else  //if (!dataItem.is('.dv-item-new'))//if (dataItem.is('.app-has-promo'))
                    promoGap = parseCss(dataItem, 'margin-bottom');
            }

            if (!scrollable)
                scrollable = findScrollable(elem);
            var headerBar = scrollable.data('sticky-header'),
                elemRect = getBoundingClientRect(elem),
                scrollableRect = getBoundingClientRect(scrollable),
                headerBarRect = headerBar ? getBoundingClientRect(headerBar) : scrollableRect,
                top = Math.max(scrollableRect.top, headerBar ? headerBarRect.bottom : scrollableRect.top),
                deltaY,
                elemHeight = elemRect.height;
            if (elemRect.bottom + promoGap > scrollableRect.bottom) {
                deltaY = elemRect.bottom + promoGap - scrollableRect.bottom + 4;
                if (elemHeight > scrollableRect.height)
                    if (elemRect.top < scrollableRect.bottom)
                        return;
                    else
                        deltaY -= elemHeight - scrollableRect.height + 7;
            }
            else if (elemRect.top - margin < top)
                deltaY = elemRect.top - top - 4 - margin;
            if (deltaY && (!tolerance || deltaY > elemHeight * tolerance)) {
                var newScrollTop = scrollable.scrollTop() + deltaY;
                if (scrollEvents === false)
                    scrollWrapper(scrollable, newScrollTop);
                else
                    scrollable.scrollTop(newScrollTop);
            }
        }
    }

    function showNextRow(direction) {
        var dataView = activeDataView(),
            parentDataView, extension,
            saveRow, syncArgs;

        function showRow(nextRow) {
            touch.pageInfo().deleted = true;
            saveRow = extension.commandRow();
            extension.commandRow(nextRow);
            extension.headerText(nextRow);
            extension.command(nextRow, parentDataView.editing() ? 'Edit' : 'Select', dataView._viewId);
            whenPageShown(function () {
                extension.commandRow(saveRow);
            });
        }

        if (dataView && dataView._parentDataViewId && !isBusy()) {
            parentDataView = findDataView(dataView._parentDataViewId);
            if (parentDataView && parentDataView._controller === dataView._controller && parentDataView.get_isGrid()) {
                extension = parentDataView.extension();
                syncArgs = {
                    controller: parentDataView._controller, view: parentDataView._viewId, odp: parentDataView._odp,
                    _filter: parentDataView._filter,
                    sort: parentDataView._sortExpression,
                    requiresAggregates: false,
                    sync: dataView.get_selectedKey(), pageSize: 3, includeRawResponse: true
                };
                _app.execute(syncArgs).then(function (result) {
                    var selectedRowIndex = -1,
                        syncRows = result.rawResponse.Rows;
                    syncRows.forEach(function (r, index) {
                        if (parentDataView.rowIsSelected(r))
                            selectedRowIndex = index;
                    });
                    if (selectedRowIndex !== -1)
                        if (direction === 'right') {
                            if (selectedRowIndex === 2) {
                                syncArgs.sync = null;
                                syncArgs.pageIndex = result.pageIndex + 1;
                                syncArgs.requiresRowCount = false;
                                _app.execute(syncArgs).then(function (nextPageResult) {
                                    showRow(nextPageResult.rawResponse.Rows[0]);
                                });
                            }
                            else if (result.pageSize * result.pageIndex + selectedRowIndex < result.totalRowCount - 1)
                                showRow(syncRows[selectedRowIndex + 1]);
                        }
                        else {
                            // go to previous page
                        }
                });
                return true;
            }
        }
    }

    function appName() {
        return settings.appName;
    }

    function isVirtualScreen() {
        return !!_screen.isVirtual;
    }

    //function exitToHost() {
    //    if (window.webkit)
    //        window.webkit.messageHandlers.invoke.postMessage({ method: 'exit', args: {} });
    //    else
    //        _window.location.href = 'cloudontime://exit/?{}';
    //}

    function kiosk() {
        return touch.kiosk.apply(this, arguments);
    }

    function whenStickyHeaderInForm(e, callback, timeout) {
        var isForm = !!$(e.relatedTarget).find('[data-layout="form"]').length;
        if (isForm) {
            clearTimeout(formStickyHeaderTimeout);
            if (callback)
                if (timeout)
                    formStickyHeaderTimeout = setTimeout(callback, timeout);
                else
                    callback();
        }
        return isForm;
    }

    function activeElementOfDocument(trigger) {
        var elem = $(document.activeElement);
        if (trigger)
            elem.trigger(trigger);
        return elem;
    }

    function isLocalHost() {
        return _window.location.hostname === 'localhost';
    }

    function isInDesignMode() {
        return !!$('.studio-frame').length;
    }

    function appStudio() {
        return $body.is('.studio');
    }

    function virtualDevice(options) {
        var deviceVar = _window.location.host + '_VirtualDevice',
            deviceVal;
        if (arguments.length)
            _app.storage.set(deviceVar, JSON.stringify(options));
        else {
            deviceVal = _app.storage.get(deviceVar);//localStorage[deviceVar];
            if (deviceVal)
                deviceVal = JSON.parse(deviceVal);
            return deviceVal && !appStudio() ? deviceVal : { name: 'Responsive' };
        }
    }

    function compareTwoItems(a, b) {
        var result = 0;
        if (a[2] < b[2])
            result = 1;
        else if (a[2] > b[2])
            result = -1;
        return result;
    }

    function toTooltipText(elem) {
        var tooltipText = elem.text();
        if (tooltipText.length > 300)
            tooltipText = tooltipText.substring(0, 300) + '...';
        if (tooltipText.match(/</))
            tooltipText = htmlEncode(tooltipText);
        return tooltipText;
    }

    function scrollIntoView(element, defaultBlock) {
        if (element.length) {
            var elemRect = getBoundingClientRect(element);
            var scrollableRect = getBoundingClientRect(findScrollable());
            var block;
            if (elemRect.top < scrollableRect.top)
                block = defaultBlock || 'start';
            else if (elemRect.bottom > scrollableRect.bottom)
                block = defaultBlock || 'end';
            if (block)
                element[0].scrollIntoView({ block: block, behavior: 'instant' });
            //    var scrollable, scrollableOffset, scrollBy, elementOffset;
            //    scrollable = findScrollable(element);
            //    scrollableOffset = scrollable.offset();
            //    elementOffset = element.offset();
            //    if (elementOffset.top < scrollableOffset.top)
            //        scrollBy = -(scrollableOffset.top - elementOffset.top + 8);
            //    else if (elementOffset.top + element.outerHeight() > scrollableOffset.top + scrollable.height())
            //        scrollBy = elementOffset.top + element.outerHeight() - (scrollableOffset.top + scrollable.height()) + 8;
            //    if (scrollBy != null)
            //        scrollable.scrollTop(scrollable.scrollTop() + scrollBy);
        }
    }

    function saveLastFocusedField(field, page) {
        if (!field) {
            field = dataInputOf($('.app-data-input')).data('field');
            if (!field)
                return;
        }
        if (field && typeof field != 'string') {
            if (field.closest)
                field = _input.elementToField(field);
            field = field.Name;
        }
        if (!page)
            page = findActivePage();
        page.data('last-focused-field', field);
    }

    function lookupContext_changeLookup(context/*lookupField, lookupDataView, row*/) {
        var lookupField = context.field,
            lookupInfo = context.lookupInfo,
            row = context.row,
            lookupDataView = getPageInfo().dataView,
            values = _input.methods.lookup._rowToValues(lookupField, lookupDataView, row);
        // go back
        if (values) {
            goBack(function () {
                getPageInfo(lookupField._dataView._id).autoFocus = false;
                lookupInfo.change(values);
            });
        }
    }

    function lookupContext_new(lookupField) {
        activeDataView().extension().executeInContext('New', lookupField.ItemsNewDataView, true);
    }

    function lookupContext_objectRef() {
        WebDataView._defaultUseCase = 'ObjectRef';
        activeDataView().extension().executeInContext('Select', 'editForm1', true);
    }

    function textInputToValue(textInput) {
        var isRtf = textInput.is('iframe'),
            value = isRtf ? textInput[0].contentDocument.body.innerHTML.trim() : textInput.val();
        if (isRtf && value.match(/^(\s*(&nbsp;|<\/?(p|br)\/?>)\s*)+$/))
            value = '';
        return value;//.trim();
    }

    function isPromoMovedWithNotification() {
        var promo = touch.promo(),
            notifyBarOffset,
            promoOffset;
        if (!notifyBar || !promo.length || !promo.is(':visible') || isReadingPaneMaster() && _screen.splitTop)
            return false;
        notifyBarOffset = notifyBar.offset();
        promoOffset = promo.offset();
        return !(notifyBarOffset.left + notifyBar.outerWidth() < promoOffset.left || notifyBarOffset.left > promoOffset.left + promo.outerWidth());
    }

    function isFooterMovedWithNotification(footerTest) {
        var activePage = findActivePage(),
            footer,
            result;
        if (activePage.is('.app-page-modal-gap-none') && !activePage.is('.app-page-modal-dock'))
            result = true;
        else if (activePage.is('.app-page-modal') || isReadingPaneMaster() && _screen.splitTop)
            result = false;
        else {
            footer = activePage.find('.app-bar-footer');
            result = (footer.find('.app-bar-tabs').is(':visible') || footer.find('.app-bar-buttons').length) && (!footerTest || footerTest(footer));
        }
        return result;
    }

    function findFooterOnActivePage() {
        return findActivePage('.app-bar-footer');
    }

    function findTransitionedModalRootFooter() {
        var footer = $('.app-page-modal-root .app-bar-footer');
        return footer.length && footer.css('transform') !== 'none' ? footer : null;
    }

    function hideNotifyBar() {
        notifyBar.removeData('busy shown').addClass('app-hidden');
    }

    function showNotification() {
        if (!notifyBar) {
            notifyBar = $div('app-bar-notify app-hidden').appendTo($body).on('vclick', function (e) {

                function hide() {
                    var promo = touch.promo(),
                        barHeight = notifyBar.outerHeight(),
                        moveFooter = isFooterMovedWithNotification(function (footer) { return footer.css('transform') !== 'none'; }),
                        footerCss = { 'transition': 'transform 200ms ease-in', 'transform': ''/*'translate3d(0,' + barHeight + 'px,0)'*/ },
                        modalRootFooter = findTransitionedModalRootFooter(),
                        movePromo = isPromoMovedWithNotification(), movePromoPageId = activePageIdentifier(),
                        button = $(e.target),
                        notifyData = button.is('.ui-btn') ? notifyBar.data('notify') : null;
                    if (movePromo)
                        promo.css({ 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,' + barHeight + 'px,0)' });
                    if (modalRootFooter)
                        modalRootFooter.css(footerCss);
                    if (notifyData)
                        button.addClass('ui-btn-active');
                    notifyBar.data('busy', true).css({ 'transform': 'translate3d(0,' + barHeight + 'px,0)' }).one('transitionend', function () {
                        $('.ui-page').find('.app-bar-footer')
                            //.filter(function () { return this.style.transform != '' })
                            .css({ 'transition': '', 'transform': '' });
                        //    .one('transitionend', function () {
                        //        this.style.transition = ''
                        //    }).css({ transform: '' });
                        setTimeout(function () {
                            hideNotifyBar();
                            if (movePromo) {
                                promo.css({ /*'margin-bottom': '', */'transition': '', 'transform': '' });
                                if (activePageIdentifier(movePromoPageId))
                                    touch.promo(true);
                            }
                            if (notifyData) {
                                var notifyButtonEvent = $.Event(notifyData.buttonEvent);
                                notifyButtonEvent.notifyData = notifyData;
                                $document.trigger(notifyButtonEvent);
                            }
                        }, 16);
                    });
                    if (moveFooter)
                        findFooterOnActivePage().css(footerCss);
                }

                if (notifyBar.data('cancel') === false) {
                    notifyBar.removeData('cancel busy shown').addClass('app-hidden');
                    $('.ui-page .app-bar-footer').css({ transition: '', transform: '' });
                    if (promo) // promo may be null under some conditions
                        promo.css({ 'transition': '', 'transform': '' })
                }
                else {
                    if (!notifyBar.is('.app-hidden'))
                        if (skipTap)
                            setTimeout(function () {
                                notifyBar.trigger('vclick');
                            }, 100);
                        else
                            hide();
                    focusScrollable();
                }
                return false;
            });
            if ($settings('ui.notify.transparent') === true)
                notifyBar.addClass('app-bar-notify-transparent');
            //    $document.on('notifymore.app', function (e) {
            //        _app.alert(e.notifyData.text);
            //    });
        }

        var notify = notifyQueue[0];
        if (notifyBar.data('busy') || notifyBar.data('shown') && (!notify || notify.force !== true) || skipTap || !isPageReady /*&& !notify.force*/ || isInTransition)
            setTimeout(showNotification, 100/*isPageReady ? 100 : 200*/);
        else if (notify) {
            var text = notify.text,
                buttonText = notify.buttonText || (notify.buttonEvent ? labelMore : null),
                duration = notify.duration,
                barHeight, promo = touch.promo(), promoIsVisible = promo.is(':visible'),
                moveFooter = isFooterMovedWithNotification(),
                movePromo,// = isPromoMovedWithNotification(),
                isCentered = appStudio() || _screen.width > 568 && !moveFooter || uiAutomation() || kiosk(),
                isLeftAligned = isCentered && $settings('ui.notify.location') === 'left',
                leftMargin = _screen.left + (appBars.left.visible ? appBars.left.width : 0),
                bottomMargin = !isLeftAligned && !isCentered || !$settingsEnabled('ui.notify.detached') ? 0 : 16,
                notifyLeft = _screen.left,
                currentNotify = notifyBar.data('notify'),
                hideNotification = text === false;
            notifyQueue.splice(0, 1);
            if (currentNotify && currentNotify.text === text && notifyBar.is(':visible') || hideNotification) {
                if (hideNotification)
                    notifyBar.trigger('vclick');
                return;
            }
            // ensure notification bar
            notifyBar.data({ busy: true, shown: true, notify: notify }).addClass('app-hidden').css('transition-property', 'none');
            notifyBar.toggleClass('app-bar-notify-center', isCentered).toggleClass('app-bar-notify-left', isLeftAligned).css('left', '');
            if (promoIsVisible)
                touch.promo(true);
            notifyBar.removeClass('app-hidden');
            if (notify.htmlEncode === false)
                text = _app.safeHtml(text);
            else {
                text = _app.htmlEncode(htmlToText(text).trim());
                text = text.replace(/\n\s*/g, '<br/>');
            }
            if (text.length > 250) {
                text = text.substring(0, 250) + '...';
                if (!notify.buttonEvent) {
                    notify.buttonEvent = 'notifymore.app';
                    buttonText = resourcesMobile.More;
                }
            }

            var timestamp = timeNow(),
                screenSplitLeft = _screen.splitLeft,
                readingPaneDetail;
            if (buttonText) {
                $span('ui-btn').text(buttonText).appendTo(notifyBar.empty());
                $span('app-text').html(text).appendTo(notifyBar);
            }
            else
                notifyBar.html(text);
            //var originalInlineExpressionForLeft = isCentered ? (isLeftAligned ? (leftMargin + (appBars.left.visible ? -8 : 16)) : (leftMargin + (isReadingPaneDetail() && screenSplitLeft ? screenSplitLeft : 0) + ((isReadingPaneMaster() && screenSplitLeft ? screenSplitLeft : (isReadingPaneDetail() && screenSplitLeft ? _screen.splitRight : _screen.width)) - notifyBar.outerWidth()) / 2)) : (leftMargin > 0 ? leftMargin : '');
            if (isCentered) {
                if (isLeftAligned)
                    notifyLeft = leftMargin + 16;
                else {
                    readingPaneDetail = isReadingPaneDetail() || findActivePage().is('.app-modal-keyboard') && isReadingPaneDetail(findActivePage().prevAll('.ui-page').first());
                    notifyLeft =
                        ((isReadingPaneMaster() || readingPaneDetail) ? leftMargin : 0) +
                        (screenSplitLeft && readingPaneDetail ? screenSplitLeft : 0) +
                        (
                            (screenSplitLeft && isReadingPaneMaster() ? screenSplitLeft : (screenSplitLeft && readingPaneDetail ? _screen.splitRight : _screen.width + _screen.left * 2)) - notifyBar.outerWidth()
                        ) / 2;
                }
            }
            notifyBar.data('timestamp', timestamp).css({
                bottom: _screen.bottom + (isLeftAligned ? 16 : 0), left: notifyLeft, right: isCentered ? '' : _screen.right
            });
            barHeight = notifyBar.outerHeight();
            notifyBar.css({ 'transform': 'translate3d(0,' + (barHeight + bottomMargin) + 'px,0)', bottom: _screen.bottom + bottomMargin });
            if (duration == null)
                duration = 'short';
            if (duration === 'short')
                duration = $settings('ui.notify.duration.short') || 2500;
            else if (duration === 'medium')
                duration = $settings('ui.notify.duration.medium') || 5000;
            else if (duration === 'long')
                duration = $settings('ui.notify.duration.long') || 10000;
            if (typeof duration == 'string')
                duration = 2500;


            movePromo = isPromoMovedWithNotification();
            var lastActivePageId = activePageIdentifier();
            setTimeout(function () {
                if (movePromo)
                    promo.css({ 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,-' + barHeight + 'px,0)' });
                if (moveFooter)
                    moveFooterAboveNotificationBar();
                notifyBar.one('transitionend', function () {
                    notifyBar.removeData('busy');
                    notifyBar.css('transition-property', '');
                    if (movePromo && activePageIdentifier(lastActivePageId)) {
                        touch.promo(true);
                        promo.css({ 'transform': '', 'transition': ''/*, 'margin-bottom': barHeight + parseCss(promo, 'margin-bottom')*/ });
                    }
                    setTimeout(function () {
                        if (notifyBar.data('timestamp') === timestamp)
                            notifyBar.trigger('vclick');
                    }, duration);
                }).css({ 'transform': '', 'transition-property': 'transform' });
            }, 16);
        }
    }

    function moveFooterAboveNotificationBar(instantly) {
        var transition = 'transform 200ms ease-in',
            footer;
        if (notifyBar && notifyBar.is(':visible') && (!findActivePage().is('.app-page-modal') || findActivePage().is('.app-page-modal-gap-none')) && !notifyBar.is('.app-bar-notify-center,.app-bar-notify-left')) {
            footer = findFooterOnActivePage().css({ 'transition': instantly ? '' : transition, 'transform': 'translate3d(0,-' + notifyBar.outerHeight() + 'px,0)' });
            if (instantly)
                footer.css('transition', transition);
        }
    }

    function screenChanged_sidebar(options) {
        var sidebar = options.sidebar || contextSidebar();
        if (sidebar.length)
            if (isVirtualScreen())
                sidebar.css({ minHeight: _screen.height, height: _screen.height, left: _screen.left, top: _screen.top });
            else
                sidebar.css({ minHeight: '', height: '', left: '', top: '' });
    }

    function screenChanged_accountManager(options) {
        var accountManager = options.accountManager || accountManagerScreen();
        if (accountManager.length)
            if (isVirtualScreen())
                accountManager.css({ left: _screen.left, top: _screen.top, right: _screen.right, bottom: _screen.bottom });
            else
                accountManager.css({ left: '', top: '', right: '', bottom: '' });
    }

    function screenChanged_toolbar(options) {
        var toolbar = options.toolbar || (touch ? touch._toolbar : $('.app-bar-tools')),
            toolbarWidth;
        if (!_screen.toolbarHeight)
            _screen.toolbarHeight = toolbar.outerHeight();
        toolbarWidth = _screen.toolbarWidth;
        if (toolbarWidth)
            toolbarWidth += _readingPane.divider;
        if (isVirtualScreen())
            toolbar.css({ left: _screen.left, top: _screen.top, width: toolbarWidth || _screen.width });
        else
            toolbar.css({ left: '', top: '', width: toolbarWidth || '' });
    }

    function screenChanged(options) {
        if (!$body) return;
        var vd,
            w = $window.width(),
            h = $window.height(),
            bannerHeight = appStudio() ? null : $settings('ui.banner.height'),
            banner;
        if (!options)
            if (isVirtualScreen()) {
                vd = virtualDevice();
                options = { isVirtual: true, width: vd.width || w, height: vd.height || h };
                if (vd.name === 'Responsive' && bannerHeight) {
                    options.width = w;
                    options.height = h;
                    _screen.deviceWidth = _screen.deviceHeight = null;
                }
            }
            else
                options = { width: _screen.width, height: _screen.height };
        if (options.isVirtual == null)
            options.isVirtual = isVirtualScreen();
        if (!options.width)
            options.width = _screen.width;
        if (!options.height)
            options.height = _screen.height;
        var screenBars = $('.app-virtual-screen-bar'),
            isVirtual = _screen.isVirtual = options.isVirtual,
            autoSize = options.width === 'auto';
        if (bannerHeight && !isVirtual) {
            isVirtual = options.isVirtual = _screen.isVirtual = true;;
            options.width = _screen.deviceWidth = w;
            options.height = _screen.deviceHeight = h;
        }
        if (isVirtual) {
            if (autoSize) {
                options.width = _screen.deviceWidth = w - 112;   // double the height of the toolbar 56 x 2 = 112 
                options.height = _screen.deviceHeight = h - 112;
            }
            else {
                if (_screen.deviceWidth) {
                    options.width = _screen.deviceWidth;
                    options.deviceWidth = null;
                }
                if (_screen.deviceHeight) {
                    options.height = _screen.deviceHeight;
                    options.deviceHeight = null;
                }
                if (options.width > w - 122) {
                    _screen.deviceWidth = options.width;
                    options.width = w - 112;
                }
                if (options.height > h - 122) {
                    _screen.deviceHeight = options.height;
                    options.height = h - 112;
                }
            }
            _screen.width = options.width;
            _screen.height = options.height;
            _screen.physicalWidth = w;
            _screen.physicalHeight = h;
            _screen.left = Math.ceil((w - options.width) / 2);
            _screen.top = Math.ceil((h - options.height) / 2);
            _screen.right = w - _screen.left - _screen.width;
            _screen.bottom = h - _screen.top - _screen.height;
            if (bannerHeight) {
                banner = $('#app-banner');
                if (!banner.length)
                    banner = $('<div id="app-banner"></div>').appendTo($body);
                banner.css({ left: _screen.left, top: _screen.top, width: _screen.width, height: bannerHeight, minHeight: bannerHeight, maxHeight: bannerHeight });
                _screen.top += bannerHeight;
                _screen.height -= bannerHeight;
            }

            screenChanged_toolbar(options);
            if (!screenBars.length)
                for (var i = 0; i < 6; i++)
                    $div('app-virtual-screen-bar').appendTo($body);
            screenBars = $('.app-virtual-screen-bar');
            if (bannerHeight && w === options.width)
                screenBars.remove();
            else {
                $(screenBars[0]).css({ width: _screen.left - 1, right: 'auto' }).addClass('app-left');    // left
                $(screenBars[1]).css({ width: _screen.right - 1, left: 'auto' }).addClass('app-right');   // right
                $(screenBars[2]).css({ height: _screen.top - 1, bottom: 'auto' }).addClass('app-top');    // top
                $(screenBars[3]).css({ height: _screen.bottom - 1, top: 'auto' }).addClass('app-bottom'); // bottom
                $(screenBars[4]).css({ width: _screen.left - 1, right: 'auto' }).addClass('app-left2');   // left2
                $(screenBars[5]).css({ width: _screen.right - 1, left: 'auto' }).addClass('app-right2');  // right2
            }
            screenChanged_sidebar(options);
        }
        else {
            _screen.width = w;
            _screen.height = h;
            _screen.physicalWidth = w;
            _screen.physicalHeight = h;
            _screen.left = 0;
            _screen.top = 0;
            _screen.right = 0;
            _screen.bottom = 0;
            //_screen.top += 100;
            //_screen.height -= 100;    - this will create a banner above the page in responsive mode.
            //_screen.isVirtual = true;
            screenChanged_toolbar(options);
            screenBars.remove();
        }
        _screen.portrait = _screen.width < _screen.height;
        screenChanged_sidebar(options);
        screenChanged_accountManager(options);
        mediaBreakpoints('.app-acc-man');
        $body.toggleClass('app-virtual-screen', isVirtualScreen());

        $('.app-progress-screen').css({ left: _screen.left, top: _screen.top, right: _screen.right, bottom: _screen.bottom });

        if (notifyBar && notifyBar.is(':visible')) {
            tapping(false);
            hideNotifyBar();
            touch.notify(notifyBar.data('notify'));
        }
        touch.indicator('reset');
    }

    function mediaBreakpoints(selector) {
        var elem = selector;
        if (typeof selector == 'string')
            elem = $(selector);
        if (elem.length) {
            var classesToAdd = [];
            var classesToRemove = []
            screenBreakpoints.forEach(function (logicalSize) {
                if (toPhysicalWidth(logicalSize) < _screen.width)
                    classesToAdd.push('app-is-' + logicalSize);
                else
                    classesToRemove.push('app-is-' + logicalSize);
            });
            elem.addClass(classesToAdd.join(' ')).removeClass(classesToRemove.join(' '));
        }
        return elem;
    }

    function $settings(selector, value) {
        var result,
            argCount = arguments.length;
        if (argCount === 1) {
            result = settingsMap[selector];
            if (result !== undefined || selector in settingsMap)
                return result;
        }
        var path = selector.split(/\./g),
            count = path.length, name,
            current = settings, i;
        for (i = 0; i < count; i++) {
            name = path[i];
            if (argCount === 2) {
                if (i === count - 1) {
                    current[name] = value;
                    settingsMap[selector] = value;
                }
                else if (current[name] == null)
                    current = current[name] = {};
                else
                    current = current[name];
            }
            else {
                if (i === count - 1) {
                    result = current[name];
                    settingsMap[selector] = result;
                    return result;
                }
                else if (current[name] != null)
                    current = current[name];
                else if (i < count - 1) {
                    current[name] = {};
                    current = current[name];
                }
                else
                    return null;
            }
        }
    }


    function $settingsEnabled(selector) {
        return $settings(selector) !== false;
    }

    function isRtfEditor(element) {
        return element.tagName === 'DIV' && !element.className.match(/app\-drop\-box/);
    }

    // initilize specialKeys
    _app.keyCode = {
        'backspace': 8,
        'tab': 9,
        'enter': 13,
        'esc': 27,
        'space': 32,
        'insert': 45,
        'delete': 46,
        'pageup': 33,
        'pagedown': 34,
        'end': 35,
        'home': 36,
        'left': 37,
        'up': 38,
        'right': 39,
        'down': 40,
        'f1': 112,
        'f2': 113,
        'f3': 114,
        'f4': 115,
        'f5': 116,
        'f6': 117,
        'f7': 118,
        'f8': 119,
        'f9': 120,
        'f10': 121,
        'f11': 122,
        'f12': 123
    };

    function isShortcutMatchedToModifiers(shortcutObject, e, substituteMetaKey) {
        return (shortcutObject.ctrlKey === e.ctrlKey || substituteMetaKey && shortcutObject.ctrlKey === e.metaKey) && shortcutObject.altKey === e.altKey && shortcutObject.shiftKey === e.shiftKey && shortcutObject.metaKey === e.metaKey;
    }

    function handleKeyboardShortcuts(e, handleRtf, suppressRtfShortcuts) {
        var which = e.keyCode || e.which,
            shortcutObject, rtfCommand;
        if (handleRtf)
            for (var i = 0; i < rtf.list.length; i++) {
                rtfCommand = rtf.list[i];
                if (rtfCommand.key) {
                    shortcutObject = rtfCommand.shortcut;
                    if (!shortcutObject)
                        shortcutObject = rtfCommand.shortcut = createShortcutObject(rtfCommand.key, rtfCommand);
                    if (shortcutObject.which === which && isShortcutMatchedToModifiers(shortcutObject, e, rtfCommand.metaKey)) {
                        e.preventDefault();
                        e.stopPropagation();
                        if (!suppressRtfShortcuts)
                            rtf.range('exec', { command: rtfCommand.command, argument: rtfCommand.argument, validate: true });
                        return true;
                    }
                }
            }

        if (shortcuts.list.length && !suppressRtfShortcuts) {
            var //which = e.keyCode || e.which,
                //keyIndex = shortcuts.keyCodes.indexOf(which),
                mapOfWhich = shortcuts.keyCodes[which];
            if (mapOfWhich)
                //shortcutObject = shortcuts.list[keyIndex];
                mapOfWhich.every(function (shortcutObject) {
                    if (isShortcutMatchedToModifiers(shortcutObject, e) && !(shortcutObject.which === 13 && findInput().is('iframe,textarea'))) {
                        if (_input.popup(':visible') && shortcutObject.shortcut === 'Enter')
                            return false;
                        var context = [];
                        touch.navContext(context);
                        $(context).each(function () {
                            var action = this;
                            if (action.shortcut === shortcutObject.shortcut) {
                                if (!action.inspect && !appStudio())
                                    closePopupsAndPanels(true);
                                setTimeout(executeContextAction, 100, action);
                                return false;
                            }
                        });
                        e.preventDefault();
                        e.stopPropagation();
                        return false;
                    }
                    return true;
                });
        }
    }

    function createShortcutObject(shortcut, commandDef) {
        var key, i,
            shortcutObject = { shortcut: shortcut, ctrlKey: false, altKey: false, shiftKey: false, metaKey: false },
            keyList = shortcut.split(/\s*\+\s*/g);
        for (i = 0; i < keyList.length; i++) {
            key = keyList[i].toLowerCase();
            if (key.length > 1) {
                switch (key) {
                    case 'ctrl':
                        shortcutObject.ctrlKey = true;
                        break;
                    case 'alt':
                        shortcutObject.altKey = true;
                        break;
                    case 'shift':
                        shortcutObject.shiftKey = true;
                        break;
                    case 'meta':
                        shortcutObject.metaKey = true;
                        break;
                    default:
                        shortcutObject.which = _app.keyCode[key];
                        if (!shortcutObject.which)
                            shortcutObject.invalid = true;
                        break;
                }
            }
            else
                shortcutObject.which = commandDef && commandDef.which != null ? commandDef.which : key.toUpperCase().charCodeAt(0);
        }
        shortcuts.cache[shortcut] = shortcutObject;
        return shortcutObject;
    }

    function closePopups(immediately, test) {
        var popup = $('.app-popup');
        if (popup.length && (!test || popup.is(test))) {
            popup.popup('close', immediately);
            return true;
        }
    }

    function closePopupsAndPanels(immediately) {
        var panel = $('.ui-panel-open');
        if (panel.length) {
            panelClose(panel, immediately);
            return true;
        }
        return closePopups(immediately);
    }

    function actionToTooltip(action, includeShortcut) {
        var text = includeShortcut === false ? action.text : action.tooltip || action.text,
            shortcut = action.shortcut;
        if (shortcut && includeShortcut !== false)
            text += ' (' + shortcut + ')';
        return text;
    }

    function avatar(user, icon) {
        _app.AccountManager.avatar(user, icon);
    }

    function enhanceScrollingTouchStart(e) {
        _startTouch = touchPoint(e);
    }

    function enhanceScrollingTouchMove(e) {
        var inner = $(this);
        if (_startTouch) {
            var end = touchPoint(e);
            if (_startTouch.y < end.y) {
                // moving up
                if (inner[0].scrollHeight < inner.height() || inner.scrollTop() == 0)
                    e.preventDefault()
            }
            else if (_startTouch.y > end.y)
                // moving down
                if (inner[0].scrollHeight < inner.height() || inner.outerHeight() + inner.scrollTop() >= inner[0].scrollHeight)
                    e.preventDefault();
            _startTouch = null;
        }
    }

    function enhanceScrolling(control, enable) {
        var inner = control.is('.ui-panel-inner,.app-wrapper') ? control : control.find('.ui-panel-inner');
        if (iOS) {
            if (enable)
                inner.off('touchstart touchmove');
            else
                inner.on('touchstart', enhanceScrollingTouchStart).on('touchmove', enhanceScrollingTouchMove);
        }
        if (inner.is('.ui-panel-inner')) {

            //*** PROTOTYPE of shadows in scrollable panels *** 
            //$('<span class="app-scroll-indicator app-scroll-indicator-up"/>').appendTo(container);
            //$('<span class="app-scroll-indicator app-scroll-indicator-down"/>').appendTo(container);
            //inner.on('scroll', function (e) {
            //    var className = container[0].className,
            //        scrollTop = inner.scrollTop();
            //    if (scrollTop) {
            //        if (!className.match(/\bapp-can-scroll-up\b/))
            //            container.addClass('app-can-scroll-up');
            //    }
            //    else
            //        if (className.match(/\bapp-can-scroll-up\b/))
            //            container.removeClass('app-can-scroll-up');
            //    if (scrollTop + inner.outerHeight() < inner[0].scrollHeight) {
            //        if (!className.match(/\bapp-can-scroll-down\b/))
            //            container.addClass('app-can-scroll-down');
            //    }
            //    else
            //        if (className.match(/\bapp-can-scroll-down\b/))
            //            container.removeClass('app-can-scroll-down');
            //});
        }
    }

    function tappingTimeout() {
        tapping(false);
        //setTimeout(function () {
        //    tapping();
        //}, 250);
        setTimeout(tapping, 250)
    }

    function tapping(allow) {
        if (!arguments.length)
            allow = true;
        skipTap = !allow;
    }

    function goForwardTo(pageId) {
        $touch.navigate('#' + pageId);
        navigationStack().pageUrl = pageId;
    }

    function userNameToInitials(user) {
        user = user.split(/@/g);
        user = user[0];
        user = user.split(/\\/g);
        user = user[user.length > 1 ? 1 : 0];
        var userWords = user.replace(/\W/g, ' ').trim(),
            word, initials = '', i;
        if (!userWords)
            userWords = user;
        userWords = userWords.split(/\b/g);
        for (i = 0; i < userWords.length; i++) {
            word = userWords[i];
            if (word)
                word = word.trim();
            if (word)
                initials += word.substring(0, 1);
            if (initials.length === 2)
                break;
        }
        return initials;
    }

    function findFieldMappedToValue(lookupField, cfv) {
        var result, m,
            iterator = /(\w+)(\s*=\s*(\w+))?/g,
            contextFilter = lookupField.ContextFields;
        if (contextFilter) {
            m = iterator.exec(contextFilter);
            while (m) {
                if (m[1] == cfv.Name) {
                    result = lookupField._dataView.findField(m[3] ? m[3] : m[1]);
                    break;
                }
                m = iterator.exec(contextFilter);
            }
        }
        return result;

    }

    function lovKey(field) {
        var dataView = field._dataView,
            externalFilter = createExternalFilter(dataView, field, []);
        externalFilter = externalFilter.length ? JSON.stringify(externalFilter) : '';
        return field.Name + '_listOfValues_' + externalFilter.toLowerCase().replace(/\W+/g, '_');
    }

    _app.lovKey = lovKey;

    function clearFieldLookupCache(field) {
        var dataView = field._dataView;
        dataView.session(field.Name + '_listCache', null);
        dataView.sessionRemove(lovKey(field));
    }

    function createExternalFilter(dataView, field, filter) {
        var contextFilter = dataView.get_contextFilter(field, dataView.extension().collect()),
            contextIndex = 0,
            cfv, lookupField, itemsStyle = field.ItemsStyle || '',
            row = dataView.editRow();

        while (contextIndex < contextFilter.length) {
            cfv = contextFilter[contextIndex];
            if (cfv.Literal) {
                //filter.push(cfv.Name + ':=%js%' + JSON.stringify(cfv.Value));
                //contextFilter.splice(contextIndex, 1);
                contextIndex++;
            }
            else {
                lookupField = findFieldMappedToValue(field, cfv);
                var lookupFieldOp2 = dataView.findField(lookupField.Name + '_op2'),
                    lookupFieldOp = dataView.findField(lookupField.Name + '_op'),
                    op = null, requiresValues;// = lookupFieldOp ? (row[lookupFieldOp.Index] || '=') : '=';
                if (lookupFieldOp2)
                    op = row[lookupFieldOp2.Index];
                if (op == null && lookupFieldOp)
                    op = row[lookupFieldOp.Index];
                if (op == null)
                    op = '=';
                requiresValues = _app.filterOpValueRequired(op);
                if (op.match(/^\$/))
                    op += '$';
                if (cfv.Value == null) {
                    if (lookupFieldOp) {
                        contextFilter.splice(contextIndex, 1);
                        if (op && !requiresValues)
                            filter.push(cfv.Name + ':' + op);
                    }
                    else {
                        contextIndex++;
                        filter.push(cfv.Name + ':=null');
                    }
                }
                else {
                    if (lookupField) {
                        if (lookupField.ItemsTargetController || lookupField.ItemsStyle == 'CheckBoxList') {
                            contextFilter.splice(contextIndex, 1);
                            var cfValues = _app.csv.toArray(cfv.Value);
                            cfValues.forEach(function (v, index) {
                                cfValues[index] = dataView.convertFieldValueToString(lookupField, v);
                            });
                            if (op == '=')
                                op = '$in$';
                            filter.push(cfv.Name + ':' + op + cfValues.join('$or$'));
                        }
                        else {
                            if (op == '$between$') {
                                cfv.Value2 = row[dataView.findField(lookupField.Name + '_v2').Index];
                                if (cfv.Value2 == null)
                                    op = '>=';
                                else
                                    if (cfv.Value > cfv.Value2)
                                        cfv.Value = [cfv.Value2, cfv.Value2 = cfv.Value][0];
                            }
                            cfv.Value = dataView.convertFieldValueToString(lookupField, cfv.Value);
                            if (cfv.Value2 != null)
                                cfv.Value2 = dataView.convertFieldValueToString(lookupField, cfv.Value2);
                            if (op == '=') {
                                contextIndex++;
                                filter.push(cfv.Name + ':=' + cfv.Value);
                            }
                            else {
                                contextFilter.splice(contextIndex, 1);
                                filter.push(cfv.Name + ':' + op + (cfv.Value != null ? cfv.Value : '') + (cfv.Value2 != null ? '$and$' + (cfv.Value2) : ''));
                            }
                        }
                    }
                }
            }
        }
        if (itemsStyle.match(/^(AutoComplete|Lookup)$/) && field.ItemsTargetController || itemsStyle == 'CheckBoxList') {
            var fieldValue = row[field.Index];
            if (fieldValue != null) {
                fieldValue = _app.csv.toArray(fieldValue.toString());
                fieldValue.forEach(function (v, index) {
                    // requires special handling for dates
                    fieldValue[index] = '%js%' + _app.serializer.serialize(v);
                });
                filter.push(field.Name + ':$notin$' + fieldValue.join('$or$'));
            }
        }
        var extended = field.Extended;
        if (extended && extended.filter) {
            extended.filter.forEach(function (filterDef) {
                var fieldName = filterDef.match(/^(.+?)\:/);
                if (fieldName && fieldName[1] != field.Name)
                    filter.push(filterDef);
            });
            extended.search.forEach(function (filterDef) {
                filter.push(filterDef);
            });
        }
        return contextFilter;
    }


    function calcWidth(element) {
        var elemObj = element[0], pageClassName,
            width,
            className = elemObj.className,
            leftSideBarWidth = appBars.left.visible ? appBars.left.width : 0,
            rightSideBarWidth = appBars.left.visible ? appBars.right.width : 0;
        // scrollable/wrapper
        if (className.match(/\b(app\-wrapper)\b/)) {
            pageClassName = element.closest('.ui-page')[0].className;
            if (pageClassName.match(/\b(app\-page\-modal|app\-has\-panel)\b/) && pageClassName.indexOf('app-page-modal-never') == -1)
                width = parseCss(element, 'width');//modalPageWidth();
            else
                width = _screen.width - leftSideBarWidth - rightSideBarWidth;
        }
        else if (className.match(/\b(app\-bar\-tools)\b/)) // toolbar
            width = _screen.width - rightSideBarWidth;
        else
            width = element.outerWidth();
        return width;
    }

    function canCreateNewItem(field) {
        return field.ItemsDataController && field.ItemsNewDataView;
    }

    function allowModal() {
        return _screen.width >= toPhysicalWidth($settings('ui.modal.when') || 'md') && _screen.height >= toPhysicalWidth('xs') || findModalRoot().length > 0;
    }

    function allowButtonBar() {
        return _screen.width > 420 && _screen.height >= 600;
    }

    function findModalRoot() {
        return $('.app-page-modal-root');
    }

    function whenPageCanceled(callback, activePageId) {
        if (!activePageId)
            activePageId = findActivePage().prevAll('.ui-page').first().attr('id');
        $document.one('pagecanceled.app', function (e) {
            if (e.namespace === 'app') {
                var currentActivePageId = activePageIdentifier();
                if (activePageId === currentActivePageId || currentActivePageId === 'Main')
                    callback();
                else if (findActivePage().prevAll('.ui-page').filter(function () { return $(this).attr('id') === activePageId; }).length)
                    whenPageCanceled(callback, activePageId);
            }
        });
    }

    function whenPageShown(callback) {
        $document.one('pagereadycomplete.app', function () {
            doPageShown(callback);
        });
    }

    function doPageShown(callback) {
        if (document.readyState === 'complete')
            callback(findActivePage());
        else
            setTimeout(doPageShown, 32, callback);
    }

    function goBack(callback) {
        _input.ignoreErrors = true;
        if (callback && typeof callback == 'function')
            whenPageShown(callback);
        isInTransition = true;
        _history.go(-1);
    }

    function displayPageHeader(pageInfo) {
        var header = pageInfo ? pageInfo.page.find('.app-page-header').filter(function () { return !$(this).is('.app-page-header-fixed') }) : null;//pageInfo.isPanel ? $('#' + pageInfo.Id + ' .app-page-header') : null;
        if ($body.is('.app-page-header-hidden') && activePageIdentifier('Main') || pageInfo && pageInfo.headerText == false)
            pageHeaderText(false, header);
        else
            pageHeaderText(pageInfo && pageInfo.headerText || pageInfo && pageInfo.dataView && pageInfo.dataView.get_view().Label || document.title, header);
    }

    function nop() { }

    function showInfoView(context) {
        var standalone = typeof context == 'string';
        touch.infoView(findDataView(standalone ? context : context.id), standalone);
    }

    function accountManagerChangeCurrentUser(context, link) {
        if (context.refresh_token && _app.userName() != context.name)
            doChangeCurrentUser(context.name);
        else
            callWithFeedback(link, function () {
                doChangeCurrentUser(context.name);
            });
    }

    function isDedicatedLoginPage() {
        return _window.location.pathname.match(/\/login(\.aspx|$)/i);
    }

    function showLoginOnStart() {
        function doShowLogin() {
            touch.showAccountManager(null, true);
        }

        //function doShowLoginDelayed() {
        //    setTimeout(doShowLogin, 1000);
        //}
        if (loginRequest)
            location.href = loginRequest;
        else if (touch._started)
            doShowLogin();
        else {
            if (_app.AccountManager.count())
                accountManagerScreen(null, 'loading');
            $document.one('pagereadycomplete.app', /*identityConfirmationRequested && (iOS || isMac) ? doShowLoginDelayed : */doShowLogin);
        }
    }

    function showSplash() {
        if ($settingsEnabled('splash.enabled') && !appStudio()) {
            if (sessionStorage)
                if (sessionStorage['spashShown'])
                    return;
                else
                    sessionStorage['spashShown'] = true;
            var duration = Math.max(1000, $settings('splash.duration') || 2500) - 500;
            accountManagerScreen(/*[{ text: loadingStatusText}]*/null, 'splash');
            setTimeout(function () {
                accountManagerScreen().find('.app-acc-close').trigger('vclick');
            }, duration);
        }
    }

    function oauth2Concent() {
        _app.getScript('~/js/daf/daf-otpauth', {
            then: function () {
                $document.trigger('oauth2consent.app');
            }
        });
    }

    function tryAutoLogin() {
        var forceAccMan = _window.location.href.match(/(\?|&)_accMan=(\w+)/),
            returnUrl = touch.returnUrl(),
            token = findCookieValue('.ID_TOKEN'),
            handler = findCookieValue('.ID_PROVIDER'),
            justSignedOut;

        if (token)
            _app.cookie('.ID_TOKEN', null, -1);

        if (oauth2Request) {
            forceAccMan = [, , 'list'];
            if (loggedIn) {
                if (oauth2Request.consent || $settings('membership.accountManager.enabled') === false) {
                    forceAccMan = false;
                    $document.one('pagereadycomplete.app', oauth2Concent);
                }
                else
                    $document.one('accountmanagerclose.app', oauth2Concent)
            }
            _app.cookie('.oauth2', oauth2Request.request_id + ':consent', 0, 0, 5);
        }

        if (sessionStorage) {
            justSignedOut = sessionStorage['signedOut'];
            sessionStorage.removeItem('signedOut');
        }
        if (!loggedIn && _app.AccountManager.enabled() || forceAccMan || token) {
            var identities = _app.AccountManager.list(),
                lastUser = identities._lastUser && identities[identities._lastUser],
                loginLastUser = !forceAccMan && lastUser && !!lastUser.refresh_token,
                forceMode = forceAccMan ? forceAccMan[2] : null,
                showLoading = forceMode === 'loading' || forceMode === 'splash',
                showList = forceMode === 'list';

            if (token) {
                lastUser = { name: handler, refresh_token: token, Handler: handler };
                loginLastUser = true;
                showLoading = false;
            }

            if (loginLastUser || showLoading) {
                if (showLoading && !lastUser)
                    lastUser = { UserName: 'Test' };
                // attempt login
                var items = [];
                if (forceMode !== 'splash') {
                    items.push({ text: toEmailOrIssuer(lastUser.name), context: lastUser });
                    items.push({ text: loadingStatusText });
                }
                accountManagerScreen(items, forceMode);

                if (showLoading)
                    return;

                _app.switchUser(lastUser, function () {
                    // The current page is reloading only if it is public. Otherwise user may get into an infinite authentication lookup when the user account is not authorized to access the resource.
                    var url = $body.data('public') /*|| handler && !returnUrl*/ ? _window.location.href : returnUrl || appBaseUrl;
                    if (!forceAccMan)
                        _window.location.replace(url);
                }, function () {
                    isBusy(false);
                    lastUser.access_token = null;
                    lastUser.refresh_token = null;
                    _app.AccountManager.set(lastUser);
                    showLoginOnStart();
                });
            }
            else if ((showList || returnUrl || justSignedOut) && !isDedicatedLoginPage())
                showLoginOnStart();
            else
                splashOrLoginRedirect();
        }
        else
            splashOrLoginRedirect();
    }

    function splashOrLoginRedirect() {
        if (!loggedIn)
            if (loginRequest)
                location.href = loginRequest;
            else
                showSplash();
    }

    function accountManagerScreen(items, mode) {
        var screen = $('.app-acc-man'),
            list;

        function applyCustomBackground(element, bkg) {
            if (bkg.match(/url\(/))
                element.css('background', bkg);
            else
                element.css('background-image', 'url(' + bkg + ')');
            element.css('text-indent', '-9999px');
        }

        if (!oauth2Request)
            screen.find('.app-acc-msg').remove();

        if (!arguments.length)
            return screen;
        if (screen.length) {
            screen.show().appendTo($body)[0].className = 'app-acc-man';
            mediaBreakpoints(screen);
            list = screen.find('ul').empty();
        }
        else {
            screen = mediaBreakpoints($div('app-acc-man').appendTo($body));
            $div('app-acc-space').appendTo(screen);
            var inner = $div('app-acc-inner').appendTo(screen),
                logo = $div('app-logo').appendTo(inner).html(appName()),
                listContainer = $div('app-acc-list').appendTo(inner);
            screenChanged_accountManager({ accountManager: screen });
            var close = $('<a class="app-acc-close"><i class="material-icon">close</i></a>').attr('title', labelClose).prependTo(inner);
            var splashSettings = settings.splash,
                bkg, lg;

            if (splashSettings) {
                bkg = splashSettings.background;
                lg = splashSettings.logo;
                if (bkg)
                    applyCustomBackground(screen.find('.app-acc-space'), _app.resolveClientUrl(bkg));
                if (lg)
                    applyCustomBackground(logo, _app.resolveClientUrl(lg));
            }
            close.on('vclick', function () {
                callWithFeedback(close, function () {
                    closePopups();
                    $body.removeClass('app-has-acc-man');
                    screen.fadeOut(function () {
                        refreshContext();
                        $document.trigger('accountmanagerclose.app');
                    });
                });
            });
            list = $ul().appendTo(listContainer).on('vclick', 'a', function (e) {
                var target = $(e.target),
                    a = target.closest('a'),
                    item = a.data('context'),
                    userName;
                if (target.is('.app-btn-more')) {
                    userName = item.context.name;
                    callWithFeedback(target, function () {
                        showListPopup({
                            anchor: target, items: [
                                { text: userName, user: userName, keepOpen: true, callback: nop, selected: true, depth: 1 },
                                {},
                                {
                                    text: resourcesMembershipBar.LoginButton, icon: 'material-icon-arrow-forward', callback: function () {
                                        a.trigger('vclick');
                                    }
                                },
                                {
                                    text: resourcesMobile.Forget, icon: 'material-icon-delete', callback: function () {
                                        _app.AccountManager.remove(userName, true);
                                        if (userName == _app.userName())
                                            signOut();
                                        a.remove();
                                    }
                                }
                            ]
                        });
                    });
                }
                else if (item.callback)
                    callWithFeedback(a, function () {
                        item.callback(item.context, a);
                    });
                return false;
            });

            var footer = $div('app-acc-footer').appendTo(inner).html($('#PageFooterBar,footer small').html());
            if (oauth2Request)
                $div('app-acc-msg').insertBefore(screen.find('.app-logo')).html(resources.OAuth2.ChooseAccMsg.replace('XXXXX', '<b>' + oauth2Request.name + '</b>'));
            listContainer.css({ 'top': getBoundingClientRect(logo).bottom - _screen.top + 16, 'bottom': footer.outerHeight(true) });
        }

        $body.addClass('app-has-acc-man');

        if (mode && mode !== 'loading' && mode !== 'splash' && !screen.is('.app-acc-man-loading'))
            screen.hide().fadeIn();
        if (mode)
            screen.removeClass('app-acc-man-loading app-acc-man-switch').addClass('app-acc-man-' + mode);

        $(items).each(function () {
            var item = this,
                li = $li().appendTo(list),
                a = $a().appendTo(li),
                label = $div('app-user-name').text(item.text).appendTo(a),
                itemContext = item.context,
                userName = itemContext && itemContext.name,
                photoIcon, email;
            if (item.icon)
                materialIcon(item.icon, a);
            a.data('context', item);
            if (userName) {
                a.addClass('app-avatar');
                label.text(toEmailOrIssuer(userName));

                email = itemContext.Handler || itemContext.email;
                if (email && email !== userName)
                    a.append($span('app-user-email').text(toEmailOrIssuer(email)));

                if (userName === _app.userName())
                    a.addClass('app-selected');
                else if (!itemContext.refresh_token)
                    a.append($span('app-user-signed-out').text(resourcesMobile.SignedOut));



                photoIcon = $('<i class="app-icon-avatar">' + userNameToInitials(toEmailOrIssuer(userName)) + '</i>');
                a.prepend(photoIcon);
                avatar(userName, photoIcon);
                if (item.callback)
                    $span('app-icon material-icon app-btn-more').appendTo(a).attr('title', labelMore);
            }
            if (!item.callback)
                a.addClass('app-link-disabled');
        });

    }

    function toEmailOrIssuer(identify) {
        return identify === 'AppIdentity' ? _app.storage.get('AppIdentityIssuer') || identify : identify;
    }

    function requestDataViewSync(dataView, key) {
        dataView._syncKey = key;
        dataView._selectedKey = key;
    }

    function highScreenDPI() {
        return screenDPI >= 144;
    }

    function saveTouchPoint(e) {
        if (e.type !== 'taphold')
            _lastTouch = touchPoint(e);
    }

    function lastTouchX(defaultValue) {
        return _lastTouch && _lastTouch.x || defaultValue;
    }

    function lastTouchY(defaultValue) {
        return _lastTouch && _lastTouch.y || defaultValue;
    }

    function calcPopupHeight(popup) {
        var arrow = popup.find('.ui-popup-arrow-container');
        return popup.outerHeight() + (arrow.length ? arrow.height() / 2 : 0) + 5 /* tolerance */;
    }

    function checkIfMultiSelect(dataView, link, action) {
        if (dataView.multiSelect()) {
            var keepSelection;
            if (!link) {
                link = (activePageIdentifier(dataView._id) ? findActivePage() : findEcho(dataView)/* findActivePage('#' + dataView._id + '_echo')*/).find('.app-listview .ui-btn.app-selected');
                keepSelection = true;
            }
            if (!link.is('.app-checked')) {
                if (dataView._selectedKeyList.length)
                    toggleSelectedRows(dataView, keepSelection);
                toggleRowSelection(dataView, link, action);
                return true;
            }
        }
    }

    function ensureModalPageSize(page) {
        var activePage = findActivePage(),
            aw = parseCss(activePage, 'width'),
            ah = parseCss(activePage, 'height'),
            at = parseCss(activePage, 'top'),
            w = parseCss(page, 'width'),
            h = parseCss(page, 'height'),
            t = parseCss(page, 'top');
        if (aw !== w || ah !== h || at !== t)
            resetPageHeight(page);
    }

    function uiAutomation() {
        return $body && $body.is('.app-ui-automation:not(.app-ui-automation-system)');
    }

    function isModalAndCentered(page) {
        return page.is('.app-page-modal-centered,.app-page-modal-fullscreen,.app-page-modal-fit-content,.app-page-modal-dock,.app-ui-automation-root') || kiosk();
    }

    function modalSlideGap() {
        return _screen.width > 1200 ? 80 : _screen.width < 500 ? 25 : 35;
    }

    function arrangeModalPages(toPage, prevPage) {
        var right, pageHash, page,
            lastCenteredPage, i,
            glassPane, firstPartialPage,
            //rightModalPage,
            //rightGlassPane = $('.app-page-modal-glass-pane-right'),
            pageGap = modalSlideGap(),
            modalSizes = [],
            modalPages = [],
            modalPageCount;
        if (!toPage)
            toPage = findActivePage();

        if (!toPage.is('.app-page-modal')) return;

        //lastCenteredPage = toPage;
        pageHash = '#' + toPage.attr('id');
        for (i = navigationStack('length'); i--; i >= 0) {
            var entry = navigationStack(i);
            if (modalPages.length) {
                pageHash = entry.hash;
                if (pageHash) {
                    page = $(pageHash);
                    if (!page.length || !page.is('.app-page-modal'))
                        break;
                }
                else
                    break;
            }
            else if (entry.hash === pageHash)
                page = toPage;
            if (page) {
                modalPages.push(page);
                if (isModalAndCentered(page)/* && page != toPage*/)
                    lastCenteredPage = page;
            }
        }
        modalPageCount = modalPages.length;
        // the slide closest to the top is the "last centered" page
        if (lastCenteredPage) {
            i = modalPages.indexOf(lastCenteredPage);
            if (i < modalPageCount - 1)
                lastCenteredPage = modalPages[i + 1];
        }

        for (i = 0; i < modalPageCount; i++) {
            page = modalPages[i];
            if (i > 0) {
                if (lastCenteredPage)
                    ensureModalPageSize(page.addClass('app-page-modal-revealed'));
                else {
                    prevPage = modalPages[i - 1];
                    right = _screen.physicalWidth - prevPage.offset().left + pageGap;
                    if (right > _screen.physicalWidth * 1.75 || isReadingPaneDetail(page))
                        break;
                    ensureModalPageSize(page.addClass('app-page-modal-partial'));
                    page.css('right', right);
                    if (!firstPartialPage)
                        firstPartialPage = page;
                }
            }
            if (lastCenteredPage) {
                var size = page.css('width') + ',' + page.css('height');
                if (modalPageCount > 1)
                    if (modalSizes.indexOf(size) === -1) {
                        if (lastCenteredPage !== page && !page.is('.app-modal-keyboard'))
                            page.addClass('app-page-modal-centered');
                        modalSizes.push(size);
                    }
                    else
                        page.addClass('app-page-modal-obscured');
            }
            if (lastCenteredPage === page)
                lastCenteredPage = null;
        }
        page = modalPages[modalPageCount - 1];
        if (page && isReadingPaneDetail(page))
            resetPageHeight(page);

        glassPane = $('.app-page-modal-glass-pane');
        if (!glassPane.length && !isReadingPaneDetail(toPage)) {
            glassPane = $div('app-page-modal-glass-pane');
            $body.addClass('app-has-modal-glass-pane');
        }
        if (firstPartialPage && modalPages.indexOf(firstPartialPage) === 1) {
            glassPane.addClass('app-page-modal-glass-pane-partial').css({ right: firstPartialPage.css('right'), top: firstPartialPage.css('top'), height: firstPartialPage.css('height') }).insertAfter(firstPartialPage);
            $body.addClass('app-has-modal-glass-pane-partial');
        }
        else {
            glassPane.css({ right: 0, top: '', height: '' }).removeClass('app-page-modal-glass-pane-partial').insertBefore(modalPages[0]);
            $body.removeClass('app-has-modal-glass-pane-partial');
        }
        if (isReadingPaneDetail(toPage))
            glassPane.remove();
        else
            glassPane.toggleClass('app-page-modal-above-kiosk', glassPane.next().is('.app-page-modal-above-kiosk'));
        if (uiAutomation())
            glassPane.insertBefore('.app-ui-automation-root');
    }

    function updateAdaptiveWrappingContainers(page) {
        var adaptiveContainers = page.find('[data-wrap="adaptive"]');
        if (adaptiveContainers.length)
            if (isReadingPaneDetail(page)/* && !$settingsEnabled('ui.readingPane.adaptiveWrapping')*/)
                adaptiveContainers.attr('data-wrap', 'true');
            else {
                var controlHeights = [],
                    minHeight = 30, // the normal height is 30 or less
                    wrappingCount = 0,
                    totalCount = 0;
                adaptiveContainers.find('[data-control]').each(function () {
                    var control = $(this),
                        controlType = control.data('control'),
                        height;
                    if (controlType === 'label' || controlType === 'field') {
                        height = control.height();
                        if (height) {
                            controlHeights.push(height);
                            if (height < minHeight) {
                                minHeight = height;
                            }
                        }
                    }
                });
                controlHeights.forEach(function (h) {
                    if (h > minHeight)
                        wrappingCount++;
                });
                if (wrappingCount > controlHeights.length * .2) {
                    adaptiveContainers.attr('data-wrap', 'true');
                    resetPageHeight(page);
                }
            }
    }

    function pageReady(ui) {
        if (!settings) return;
        useFullscreenWhenSeeAll = false;
        tapping();
        activeLink();
        transitionStatus(false);
        var callback = touch.pageTransitionCallback;
        if (callback) {
            touch.pageTransitionCallback = null;
            isBusy(false);
            setTimeout(callback);
            return;
        }
        updateMenuButtonStatus();
        isPageReady = false;
        // transition has finished
        //function executePageChangeCallback() {
        //    if (pageChangeCallback) {
        //        pageChangeCallback();
        //        pageChangeCallback = null;
        //        //if (pageInfo && pageInfo.returnCallback) {
        //        //    pageInfo.returnCallback();
        //        //    pageInfo.returnCallback = null;
        //        //}
        //    }
        //}
        var pageInfo = ui.toPageInfo || getPageInfo(),
            dataView,
            uiOptions = ui.options,
            reverse = uiOptions && uiOptions.fromPage && uiOptions.reverse;

        //function autoOpenNextItemInReadingPaneMaster() {
        //    if (isReadingPaneMaster())
        //        if (pageInfo.dataView._busy() || touch.busy())
        //            setTimeout(autoOpenNextItemInReadingPaneMaster, 50);
        //        else {
        //            var selectedItem = pageInfo.scrollable.find('.dv-item .app-selected'),
        //                nextItem = selectedItem.length ? selectedItem.parent().next() : pageInfo.scrollable.find('.dv-item:first');
        //            if (nextItem.length) {
        //                makeVisible(nextItem);
        //                nextItem.find('.ui-btn').trigger('vclick')
        //            }
        //            else
        //                prevPage.addClass('app-hidden');
        //        }
        //}

        if (pageInfo) {
            if (pageInfo.initCallback) {
                pageInfo.initCallback();
                pageInfo.initCallback = null;
            }
            //else
            //    executePageChangeCallback();
        }
        //else if (isMainPageActive())
        //    executePageChangeCallback();

        isBusy(false);

        var toPage = $(ui.toPage),
            toPageIsModal = toPage.is('.app-page-modal'),
            prevPage = $(ui.prevPage),
            prevPageIsModal = prevPage.is('.app-page-modal');

        if (reverse) {
            if (isReadingPaneMaster()) {
                $('.app-reading-pane-detail').addClass('app-hidden'); // do not use prevPage and hide all instances of the detail pane created with "Save and New"
                // FEATURE: this is a prototype of "Auto-open next item" mode
                //if (isReadingPaneDetail(prevPage) && false/*true*/) {
                //    var prevDataView = getPageInfo(prevPage).dataView;
                //    if (prevDataView && !prevDataView._newRow.length) {
                //        prevPage.removeClass('app-hidden');
                //        setTimeout(autoOpenNextItemInReadingPaneMaster, 50);
                //    }
                //}
                //else
                $body.removeClass('app-has-reading-pane-right app-has-reading-pane-bottom app-has-reading-pane');
            }
        }
        else if (isReadingPaneDetail()) {
            toPage/*$('.app-reading-pane-detail')*/.removeClass('app-hidden');
            $body.addClass('app-has-reading-pane app-has-reading-pane-' + (_screen.splitTop ? 'bottom' : 'right'));
        }


        if (!isInTransition && pageInfo)
            dataView = pageInfo.dataView;

        // Safari triggers double transition
        if (toPage && prevPage && toPage.attr('id') === prevPage.attr('id'))
            return false;

        calcPageMinWidth(toPage);
        resetPageHeight(toPage);
        updateAdaptiveWrappingContainers(toPage);

        // page is about to become "ready"

        // compress stack when webkit is creating a duplicate entry on "Save and New"
        if (navigationStack('index') > 1 && navigationStack().hash === navigationStack('prev').hash)
            navigationStack('reduce');

        var modalBackground = touch._modalBackground;
        if ((!prevPageIsModal || isReadingPaneDetail(prevPage)) && toPageIsModal) {
            //prevPage.css('display', 'block');
            if (!isReadingPaneDetail(prevPage))
                prevPage.addClass('app-page-modal-root');
            if (!modalBackground)
                modalBackground = touch._modalBackground = $div('app-page-modal-background');
            modalBackground.insertBefore(toPage).show();
            if (isReadingPaneDetail(toPage))
                modalBackground.hide();
        }
        else if (prevPageIsModal && (!toPageIsModal || isReadingPaneDetail(toPage)))
            if (modalBackground)
                modalBackground.hide();

        //if (modalBackground && prevPage && prevPage.is('.app-page-modal-root'))
        //    modalBackground.toggleClass('app-page-modal-background-transparent', dataView && dataView.tagged('modal-background-transparent'));

        var isBackgroundTransparent = !!(dataView && dataView.tagged('modal-background-transparent'));
        $body.toggleClass('app-has-modal-background-clear', dataView && !!(dataView.tagged('modal-background-clear') || dataView._inlineEditor != null && isReadingPaneDetail(reverse ? pageInfo.page.prevAll('.ui-page:first') : prevPage)));
        $body.toggleClass('app-has-modal-background-transparent', isBackgroundTransparent);
        $body.toggleClass('app-has-modal-glass-pane-transparent', isBackgroundTransparent && prevPageIsModal && toPage.prevAll('.ui-page').is('.app-page-modal'));

        $('.app-page-modal-partial').removeClass('app-page-modal-partial').css('right', '');
        //$('.app-page-modal-revealed,.app-page-modal-centered,.app-page-modal-obscured').removeClass('app-page-modal-revealed app-page-modal-centered app-page-modal-obscured');
        $('.app-page-modal-centered,.app-page-modal-obscured').removeClass('app-page-modal-centered app-page-modal-obscured');
        if (reverse)
            prevPage.removeClass('app-page-modal-revealed');
        if (toPageIsModal)
            arrangeModalPages(toPage, prevPage, reverse);
        else {
            if (!isReadingPaneMaster(toPage))
                toPage.removeClass('app-page-modal-root');
            $('.app-page-modal-glass-pane').remove();
            $body.removeClass('app-has-modal-glass-pane');
        }

        var scrollable = pageInfo && pageInfo.scrollable || findScrollable(toPage);

        yardstick(scrollable.find('.app-listview'));
        setupGridHeaderStyle(scrollable);
        fitTabs(toPage);
        syncEmbeddedViews(scrollable);
        updateScrollbars(scrollable);
        updateMenuStripPosition();

        if (isHosted && !toolbarIsVisible)
            touch._toolbar.css('visibility', activePageIdentifier('Main') || findActivePage() && findActivePage().is('.app-page-modal') ? 'hidden' : '');

        stickyHeader(pageInfo ? pageInfo.page : null);
        _input.popup('hide');

        reverse = navigationStack('index') < navigationHistory.previousIndex;

        moveFooterAboveNotificationBar(true);
        //if (notifyBar && notifyBar.is(':visible'))
        //    findFooterOnActivePage().css({ 'transition': 'transform 200ms ease-in', 'transform': 'translate3d(0,-' + notifyBar.outerHeight() + 'px,0)' });

        if (pageTransitions() === 'slide' && (prevPage && !prevPage.is('.app-transition-none') && reverse || !toPage.is('.app-transition-none') && !reverse))
            pageTransition(prevPage, toPage, reverse, function () {
                pageReadyComplete(pageInfo, reverse, prevPage);
            });
        else {
            var doDelay = pageInfo && pageInfo.dynamic && !pageInfo.delayed;
            if (doDelay) {
                pageInfo.delayed = true;
                //setTimeout(function () {
                //    pageReadyComplete(pageInfo, reverse);
                //});
                setTimeout(pageReadyComplete, 0, pageInfo, reverse, prevPage);
            }
            else if (!reverse && isReadingPaneDetail(toPage) && !dataView._skipAnimate) {
                toPage.hide();
                isInTransition = true;
                setTimeout(function () {
                    toPage.fadeIn(128, function () {
                        isInTransition = false;
                        pageReadyComplete(pageInfo, reverse, prevPage);
                    })
                });
            }
            else
                pageReadyComplete(pageInfo, reverse, prevPage);

        }
    }

    function pageReadyComplete(pageInfo, reverse, prevPage) {
        var scrollable = pageInfo ? pageInfo.scrollable : findScrollable(),
            pageReadyEvent = $.Event('pageready.app'),
            autoFocus,
            causesCalculate,
            dataView;
        if (pageInfo) {
            dataView = pageReadyEvent.dataView = pageInfo.dataView;
            createPageTabBar(pageInfo);
        }


        fetchOnDemand(100);
        isBusy(false);
        $document.trigger(pageReadyEvent);
        configurePromoButton(pageInfo ? pageInfo.dataView : null);
        if (!(reverse && prevPage.is('.app-modal-keyboard'))) {
            refreshContext(false, 0);
            fetchEchos(null, null, pageInfo ? pageInfo.scrollable.find('.app-echo') : null);
        }

        if (pageInfo) {
            autoFocus = pageInfo.autoFocus;
            pageInfo.autoFocus = true;
            causesCalculate = pageInfo.calculate;
            if (causesCalculate) {
                delete pageInfo.calculate;
                causesCalculate = dataView.findField(causesCalculate);
                dataView._raiseCalculate(causesCalculate, causesCalculate);
            }
        }

        touch.garbageCollector();

        if (reverse)
            touch.syncData(pageInfo); // sync any dataviews that have changed or might have changed prior to returning to this page.


        var activePage = findActivePage(),
            skipAutoFocus,
            inputExecuteValues = activePage.data('inputExecute');

        isPageReady = true;

        if (reverse)
            skipAutoFocus = touch.syncWithOdp(dataView);

        if (inputExecuteValues) {
            activePage.removeData('inputExecute');
            inputExecute(inputExecuteValues);
        }

        if (dataView && dataView._inlineEditor) {
            iyf();
            if (notifyBar && !notifyBar.is('.app-hidden'))
                notifyBar.trigger('vclick');//.addClass('app-hidden').data('busy', false)
        }

        if (!reverse && activePage.is('.app-modal-keyboard'))
            resetPageHeight(activePage);

        $document.trigger($.Event('pagereadycomplete.app', { dataView: dataView, reverse: reverse, page: activePage }));

        if (!skipAutoFocus && !isInTransition)
            if (scrollable && scrollable.length && (!activeElementOfDocument().closest('[data-control]').length || reverse)) {
                focusScrollable(scrollable);
                if (autoFocus !== false) {
                    var pageAutoFocusEvent = $.Event('pageautofocus.app', { page: activePage, dataView: dataView, reverse: reverse });
                    activePage.trigger(pageAutoFocusEvent);
                    if (pageAutoFocusEvent.isDefaultPrevented()) {
                        autoFocus = false;
                        clearTimeout(removeFocusTimeout);
                    }
                }
                if (!isTouchPointer && autoFocus !== false)
                    _input.keyboard('ensure', function () {
                        inputFocus({ container: scrollable, lastFocused: reverse === true, autoFocus: true });
                    });
            }

        if (reverse) {
            var entry = navigationStack('next'),
                canceledPageId = entry && entry.hash;
            if (canceledPageId && canceledPageId.match(/^#/)) {
                var prevPageInfo = touch.pageInfo(canceledPageId.substring(1));
                if (prevPageInfo) {
                    $(canceledPageId).trigger('pagecanceled.app');
                    var prevDataView = prevPageInfo.dataView,
                        prevSurvey = prevDataView && prevDataView._survey;
                    if (prevSurvey && prevSurvey.close)
                        $document.trigger($.Event(prevSurvey.close, { dataView: prevDataView, survey: prevSurvey }));
                }
            }
        }
        else if (!uiAutomation() && dataView && dataView.pageProp('zoomed') && !activePage.is('.app-page-modal-fullscreen')) //{
            findActivePage('.app-btn-fullscreen').trigger('vclick');
        //var fullScreenBtn = findActivePage('.app-btn-fullscreen').trigger('vclick');
        //if (fullScreenBtn.length)
        //    dataView.session('zoomed', true);
        //}
        $body.toggleClass('app-has-modal-page-above-kiosk', activePage.is('.app-page-modal-above-kiosk'));
        _input.keyboard('ensure');
    }

    function performSyncKey(dataView, notifyChildren) {
        var syncKey = _edit.syncKey(dataView) || dataView._syncKey,
            syncMap = _app.syncMap[dataView._controller],
            syncIdentifier;
        if (!syncKey && dataView.get_isGrid() && syncMap) {
            syncIdentifier = dataView._id + '_' + dataView._viewId;
            syncKey = syncMap[syncIdentifier] === true;
            syncMap[syncIdentifier] = false;
        }
        if (syncKey) {
            if (syncKey === true)
                dataView.sync();
            else {
                dataView.sync(syncKey);
                if (notifyChildren)
                    dataView.extension().notifyChildren();
            }
            dataView._syncKey = null;
        }
    }

    function createPageTabBar(pageInfo) {
        if (pageInfo && pageInfo.home && !pageInfo.tabBar) {
            pageInfo.tabBar = createTabBar();
            showHideTabBar(pageInfo, true);
        }
    }

    function createMainTabBar() {
        if (!touch._tabBar) {
            touch._tabBar = createTabBar();
            showHideTabBar(null, true);
        }
    }

    function createTabBar() {
        var tabBarItems = touch._tabBarItems,
            footer, tabBar, ul, li;
        if (!tabBarItems) {
            tabBarItems = touch._tabBarItems = [], items = [];
            enumerateMenuItems(items, true);

            $(items).each(function (index) {
                var item = this;
                if (item.icon && item.context)
                    tabBarItems.push(item);
                else {
                    tabBarItems.splice(index);
                    return false;
                }
            });
        }
        if (tabBarItems.length > 1 && $settings('ui.menu.tabbar') !== false) {
            footer = touch.bar('create', {
                type: 'footer', page: findActivePage()
            });
            if (!footer.length) return null;
            tabBar = $div('app-bar-tabs', 'data-location="bottom"').hide().appendTo(footer);
            footer.addClass('app-bar-footer-no-scrolling');
            ul = $ul().appendTo(tabBar);
            tabBarItems.forEach(function (item) {
                li = $li('', 'data-tooltip-location="above"').appendTo(ul).data('item', item).css('width', (Math.floor(100 / tabBarItems.length) - 1) + '%');
                materialIcon(item.icon, li);
                $span().appendTo(li).text(item.text);
                li.attr('title', item.tooltip);
                var selected = item.context.selected;
                if (selected)
                    $(item.context.children).each(function () {
                        if (this.selected)
                            selected = false;
                    });
                if (selected)
                    li.addClass('app-selected');
            });
            tabBar.data('items', tabBar.find('li'));
        }
        return tabBar;
    }

    function tabBarIsVisible() {
        var menuTabBar = $settings('ui.menu.tabbar'),
            sideBarWhen = touch._uiSideBarWhen,
            allowSideBar = sidebarIsAllowed();
        if (allowSideBar) {
            if (sideBarWhen === 'Never')
                allowSideBar = false;
            else if (sideBarWhen === 'Landscape' && _screen.width < _screen.height)
                allowSideBar = false;
        }
        return menuTabBar === true || menuTabBar !== false && (!appBars.left.visible && !allowSideBar);
    }

    function showHideTabBar(pageInfo, autoTrim) {
        var tabBar = pageInfo ? pageInfo.tabBar : touch._tabBar, isVisible,
            visible;
        if (tabBar && tabBar.length) {
            visible = tabBarIsVisible();
            isVisible = tabBar.is(':visible');
            if (visible && !isVisible || !visible && isVisible)
                touch.bar(visible ? 'show' : 'hide', tabBar);
            if (visible && autoTrim) {
                var li, items = tabBar.data('items'),
                    liWidth = items.first().outerWidth(),
                    tabCount = touch._tabBarItems.length,
                    maxTabCount = Math.floor(tabBar.width() / liWidth);
                if (tabBar.data('more')) {
                    tabBar.data('more').remove();
                    tabBar.removeData('more');
                    items.show();
                }
                if (tabCount > maxTabCount) {
                    li = $li('app-has-icon', 'data-tooltip-location="above"').appendTo(tabBar.find('ul')).attr('title', labelMore);
                    //materialIcon('material-icon-more-horiz', li)
                    $i('app-icon material-icon material-icon-more').appendTo(li);
                    tabBar.data('more', li);
                    items.filter(':gt(' + (maxTabCount - 2) + ')').hide();
                    $span().appendTo(li).text(labelMore);
                    if (!items.filter(fnVisible).filter('.app-selected').length)
                        li.addClass('app-selected');
                }

            }
            syncMenuStripWithVisibleTabBar(visible);
        }
        return visible;
    }

    function syncMenuStripWithVisibleTabBar(visible) {
        if (visible == null)
            visible = tabBarIsVisible();
        $body.toggleClass('app-has-complete-tabbar', visible && _web.Menu.nodeCount === _web.Menu.nodesWithIcons.length);
    }

    function isReadingPaneDetail(page) {
        return (page || findActivePage()).is('.app-reading-pane-detail');
    }

    function isReadingPaneMaster(page) {
        return (page || findActivePage()).is('.app-reading-pane-master');
    }

    function syncMenuStripWithVisibleSidebar() {
        var nodeCountInSidebar = _web.Menu.nodeCountInSidebar;
        if (nodeCountInSidebar)
            $body.toggleClass('app-has-complete-toolbar-in-sidebar', appBars.left.visible && _web.Menu.nodeCount === nodeCountInSidebar);
    }

    function pageTransition(prevPage, toPage, reverse, callback) {
        var prevPageIsModal = prevPage.is('.app-page-modal'),
            toPageIsModal = toPage.is('.app-page-modal'),
            prevPageIsCentered, toPageIsCentered,
            pageSet, pageSetSlideDistance,
            backText = touch._backText,
            cleanup,
            transitionCount = 0;

        function transitionEnd() {
            transitionCount--;
            if (!transitionCount) {
                if (cleanup)
                    cleanup();
                if (!transitionCount) {
                    callback();
                    tapping();
                }
            }
        }

        function start(element, styleProperties) {

            if (element.is(':visible')) {
                transitionCount++;
                element.one('transitionend', transitionEnd).css(styleProperties);
            }
        }

        function animation(options) {
            cleanup = options.done;
            options.position();
            setTimeout(function () {
                options.transition();
                setTimeout(function () {
                    $(options.run).each(function () {
                        var runDef = this,
                            options = {};
                        for (var key in runDef)
                            if (key !== 'element')
                                options[key] = runDef[key];
                        start(runDef.element, options);
                    }, 16);
                }, 16);
            }, 16);
        }


        isBusy(true);
        refreshContext(true);

        if (prevPageIsModal)
            if (toPageIsModal) {
                prevPageIsSlide = prevPage.is('.app-page-modal-partial');
                prevPageIsCentered = isModalAndCentered(prevPage) || isReadingPaneDetail(prevPage);
                toPageIsCentered = isModalAndCentered(toPage) || isReadingPaneDetail(toPage);
                if (reverse) {
                    if (prevPageIsCentered || toPageIsCentered)
                        // fade-out from modal to modal
                        animation({
                            position: function () {
                                prevPage.addClass('app-page-revealed').css({ opacity: 1 });
                            },
                            transition: function () {
                                prevPage.addClass('app-transition-fade-out');
                            },
                            run: [{ element: prevPage, opacity: 0 }],
                            done: function () {
                                prevPage.removeClass('app-transition-fade-out app-page-revealed').css({ opacity: '' });
                            }
                        });
                    else {
                        // slide back from one modal to another
                        pageSet = $('.app-page-modal-partial').add(toPage);
                        pageSetSlideDistance = parseCss(toPage, 'width') + modalSlideGap();
                        var prevPageLeft = parseCss(prevPage, 'left') + pageSetSlideDistance;
                        animation({
                            position: function () {
                                prevPage.css('left', prevPageLeft).addClass('app-page-revealed');
                                prevPage.css({ transform: 'translate3d(' + -pageSetSlideDistance + 'px,0,0)' });
                                pageSet.css({ transform: 'translate3d(' + -pageSetSlideDistance + 'px,0,0)' });
                            },
                            transition: function () {
                                pageSet.addClass('app-transition-slide');
                                prevPage.addClass('app-transition-slide');
                            },
                            run: [
                                { element: prevPage, transform: 'translate3d(' + (_screen.physicalWidth - prevPageLeft + modalSlideGap()) + 'px,0,0)' },
                                { element: pageSet, transform: '' }
                            ],
                            done: function () {
                                pageSet.removeClass('app-transition-slide').css({ transform: '', transition: '' });
                                prevPage.removeClass('app-transition-slide app-page-revealed').css({ left: '', transform: '', transition: '' });
                            }
                        });
                    }
                }
                else {
                    if (toPageIsCentered || prevPageIsCentered) {
                        // fade in from modal to modal
                        var isObscured = prevPage.is('.app-page-modal-obscured');
                        animation({
                            position: function () {
                                if (isObscured)
                                    prevPage.toggleClass('app-page-modal-obscured app-page-modal-centered');
                                toPage.css({ opacity: 0 });
                            },
                            transition: function () {
                                toPage.addClass('app-transition-fade-in');
                            },
                            run: [{ element: toPage, opacity: '' }],
                            done: function () {
                                toPage.removeClass('app-transition-fade-in');
                                if (isObscured)
                                    prevPage.toggleClass('app-page-modal-obscured app-page-modal-centered');
                            }
                        });
                    }
                    else {
                        // slide forward from one modal to another
                        pageSet = $('.app-page-modal-partial').add(toPage);
                        animation({
                            position: function () {
                                pageSetSlideDistance = parseCss(toPage, 'width') + modalSlideGap();
                                pageSet.css({ transform: 'translate3d(' + pageSetSlideDistance + 'px,0,0)' });
                                pageSet = $(pageSet.get().reverse());
                            },
                            transition: function () {
                                pageSet.addClass('app-transition-slide');
                            },
                            run: [{ element: pageSet, transform: '' }],
                            done: function () {
                                pageSet.removeClass('app-transition-slide').css({ transform: '', transition: '' });
                            }
                        });
                    }
                }
            }
            else {
                // fade out from modal to a non-modal
                modalBackground = touch._modalBackground;
                animation({
                    position: function () {
                        modalBackground.show().css({ opacity: 1 });
                        prevPage.addClass('app-page-revealed').css({ opacity: 1 });
                    },
                    transition: function () {
                        prevPage.addClass('app-transition-fade-out');
                        modalBackground.addClass('app-transition-fade-out');
                    },
                    run: [
                        { element: prevPage, opacity: 0 },
                        { element: modalBackground, opacity: 0 }
                    ],
                    done: function () {
                        prevPage.removeClass('app-transition-fade-out app-page-revealed').css({ opacity: '' });
                        modalBackground.hide().removeClass('app-transition-fade-out').css({ opacity: '' });
                    }
                });
            }
        else if (toPageIsModal) {
            // first modal page on the semi-transparent background
            var modalBackground = touch._modalBackground;
            animation({
                position: function () {
                    toPage.css({ opacity: 0 });
                    modalBackground.css({ opacity: 0 });
                },
                transition: function () {
                    toPage.addClass('app-transition-fade-in');
                    modalBackground.addClass('app-transition-fade-in');
                },
                run: [
                    { element: toPage, opacity: '' },
                    { element: modalBackground, opacity: '' }
                ],
                done: function () {
                    toPage.removeClass('app-transition-fade-in');
                    modalBackground.removeClass('app-transition-fade-in');
                }
            });
        }
        else {
            // fullscreen => fullscreen
            if (prevPage.length) {
                if (prevPage.is('#Main') && !_window.location.hash)
                    // the first page of SPA
                    callback();
                else {
                    // slide fullscreen on "large" 
                    var pageWidth = parseCss(toPage, 'width');
                    if (pageWidth > toPhysicalWidth('md'))
                        if (reverse)
                            animation({
                                position: function () {
                                    toPage.addClass('app-transition-slide-background');
                                    prevPage.addClass('app-page-revealed').css({ transform: 'translate3d(0,0,0)', 'z-index': 2, opacity: 1 });
                                    backText.css({ transform: 'translate3d(-' + parseCss(backText, 'width') + 'px,0,0)', opacity: 0 });
                                },
                                transition: function () {
                                    prevPage.addClass('app-transition-slide-peel-out');
                                    backText.addClass('app-transition-slide-and-reveal');
                                },
                                run: [
                                    { element: prevPage, transform: 'translate3d(' + 200/*Math.ceil(pageWidth * .2)*/ + 'px,0,0)', opacity: 0 },
                                    { element: backText, transform: '', opacity: '' }
                                ],
                                done: function () {
                                    toPage.removeClass('app-transition-slide-background');
                                    prevPage.removeClass('app-transition-slide-peel-out app-page-revealed').css({ transform: '', 'z-index': '', opacity: '' });
                                    backText.removeClass('app-transition-slide-and-reveal');
                                }
                            });
                        else
                            // slide fullscreen on "medium and below"
                            animation({
                                position: function () {
                                    toPage.css({ transform: 'translate3d(' + 200/*Math.ceil(pageWidth * .2)*/ + 'px,0,0)' });
                                    prevPage.addClass('app-transition-slide-background app-page-revealed');
                                    backText.css({ transform: 'translate3d(' + parseCss(backText, 'width') + 'px,0,0)', opacity: 0 });
                                },
                                transition: function () {
                                    toPage.addClass('app-transition-slide-peel-in');
                                    //prevPage.addClass('app-transition-slide-background');
                                    backText.addClass('app-transition-slide-and-reveal');
                                },
                                run: [
                                    { element: toPage, transform: '' },
                                    //  { element: prevPage, transform: 'translate3d(' + (reverse ? 1 : -1) * parseCss(prevPage, 'width') + 'px,0,0)' },
                                    { element: backText, transform: '', opacity: '' }
                                ],
                                done: function () {
                                    prevPage.removeClass('app-transition-slide-background app-page-revealed');
                                    toPage.removeClass('app-transition-slide-peel-in').css({ transform: '', transition: '', 'z-index': '' });
                                    backText.removeClass('app-transition-slide-and-reveal').css({ transform: '', opacity: '' });
                                }
                            });
                    else
                        animation({
                            position: function () {
                                toPage.css({ transform: 'translate3d(' + (reverse ? -1 : 1) * pageWidth + 'px,0,0)', 'z-index': 2 });
                                prevPage.addClass('app-page-revealed');
                                backText.css({ transform: 'translate3d(' + (reverse ? -1 : 1) * parseCss(backText, 'width') + 'px,0,0)', opacity: 0 });
                                //if (chrome || true) {
                                //    // If the page headers and toolbar are colorful then this will create a thin divider between pages and below the toolbar on Chrome.
                                //    // Element app-bar-tools-transition creates a solid background under the two moving pages. 
                                //    var fixedHeader1 = toPage.find('.app-page-header-fixed'),
                                //        fixedHeader2 = prevPage.find('.app-page-header-fixed'),
                                //        wrapper1 = findScrollable(toPage),
                                //        wrapper2 = findScrollable(prevPage);
                                //    $('<span class="app-bar-tools-transition"/>').insertAfter(mobile._toolbar).css({
                                //        //'background-color': mobile._toolbar.css('background-color'),
                                //        height: Math.max(fixedHeader1.length ? fixedHeader1.offset().top + fixedHeader1.outerHeight() - wrapper1.scrollTop() : 0, fixedHeader2.length ? fixedHeader2.offset().top + fixedHeader2.outerHeight() - wrapper2.scrollTop() : 0)
                                //    });
                                //}
                            },
                            transition: function () {
                                backText.addClass('app-transition-slide-and-reveal');
                                prevPage.addClass('app-transition-slide');
                                toPage.addClass('app-transition-slide2');
                            },
                            run: [
                                { element: toPage, transform: '' },
                                { element: prevPage, transform: 'translate3d(' + (reverse ? 1 : -1) * parseCss(prevPage, 'width') + 'px,0,0)' },
                                { element: backText, transform: '', opacity: '' }
                            ],
                            done: function () {
                                prevPage.removeClass('app-transition-slide app-page-revealed').css({ transform: '' });
                                toPage.removeClass('app-transition-slide2').css({ transform: '', transition: '' });
                                backText.removeClass('app-transition-slide-and-reveal').css({ transform: '', opacity: '' });
                                //$('.app-bar-tools-transition').remove();
                            }
                        });
                }
            }
            else
                // this is the first page
                callback();
        }
    }

    // Forms Engine Implementation

    function generateLayout(dataView, physicalWidth) {
        var view = dataView.get_view(),
            firstField,
            layout,
            stepList = [], stepMap = {}, hasWizardSteps,
            triedCustomActions,
            dynamicCategories = [], dynamicFields = [],
            layoutEvent = $.Event('generatelayout.dataview.app', { dataView: dataView, view: view }),
            clearAllButton = dataView.tagged('clear-all'),
            adaptiveWrapping = /*dataView.tagged(/reading-pane/) && _readingPane.enabled ? false :  */$settingsEnabled('ui.form.adpativeWrapping');

        $document.trigger(layoutEvent);
        layout = layoutEvent.layout;
        if (layout)
            return layout;
        // enumerate categories with dynamic visibility
        $(dataView._expressions).each(function () {
            var exp = this,
                scope = exp.Scope,
                target = exp.Target;
            if (scope === 2)
                dynamicCategories.push(target);
            if (scope === 3)
                dynamicFields.push(target);
        });
        // map categories to the wizard steps
        $(dataView._categories).each(function (index) {
            var catDef = this,
                wizardStep = catDef.Wizard,
                newRow = !index || catDef.Flow === 'NewRow', row,
                step;
            if (wizardStep)
                hasWizardSteps;
            else if (hasWizardSteps)
                wizardStep = '_after_';
            else
                wizardStep = '_before_';
            step = stepMap[wizardStep];
            if (!step) {
                step = { text: wizardStep, /*categories: [], */rows: [] };
                stepMap[wizardStep] = step;
                stepList.push(step);
                newRow = true;
            }
            if (newRow) {
                row = { categories: [] };
                step.rows.push(row);
            }
            else
                row = step.rows[step.rows.length - 1];
            //step.categories.push(catDef);
            row.categories.push(catDef);
        });
        $(stepList).each(function () {
            var step = this;
            $(step.rows).each(function () {
                var row = this,
                    tabList = [],
                    tabMap = {}, categoryMap = {};
                $(row.categories).each(function () {
                    // generate a set of tabs
                    var catDef = this,
                        tabText = catDef.Tab,
                        t = tabMap['t_' + tabText],
                        c,
                        category = { id: catDef.Id, headerText: catDef.HeaderText, desc: catDef.Description, collapsed: catDef.Collapsed, fields: [], floating: catDef.Floating, wrap: catDef.Wrap, dataViewCount: 0 };
                    if (!t) {
                        c = { categories: [] };
                        t = { text: catDef.Tab, columns: [c] };
                        tabMap['t_' + tabText] = t;
                        tabList.push(t);
                    }
                    else {
                        if (catDef.Flow === 'NewColumn') {
                            c = { categories: [] };
                            t.columns.push(c);
                        }
                        else
                            c = t.columns[t.columns.length - 1];
                    }
                    categoryMap[catDef.Index] = category;
                    c.categories.push(category);
                });
                $(dataView._fields).each(function () {
                    var f = this,
                        cat = categoryMap[f.CategoryIndex];
                    if (cat) {
                        cat.fields.push(f);
                        if (f.Type === 'DataView')
                            cat.dataViewCount++;
                    }
                });
                row.tabList = tabList;
            });
        });
        // render a layout
        layout = ['<div data-layout="form" data-layout-size="' + toLogicalWidth(physicalWidth) + '">'];

        function generateCustomActions(requiresContainer) {
            if (!triedCustomActions) {
                var actions = [];
                $(dataView.get_actions('Custom')).each(function () {
                    var a = this,
                        path = a.Path,
                        field;
                    if (path) {
                        path = path.split('/');
                        field = dataView.findField(path[0]);
                    }
                    if (!field && dataView._isActionMatched(a, true))
                        actions.push(a);
                });
                if (actions.length) {
                    if (requiresContainer)
                        layout.push('<div data-container="collapsible" data-wrap="false" data-header-text="none">');
                    layout.push('<div data-container="row">');
                    $(actions).each(function () {
                        layout.push('<span data-control="action" data-action="' + this.Path + '"><span class="app-control-inner"></span></span>');
                    });
                    layout.push('</div>');
                    if (requiresContainer)
                        layout.push('</div>');
                }
                triedCustomActions = true;
            }
        }

        $(stepList).each(function () {
            var step = this,
                stepText = step.text,
                requiresStepContainer = !stepText.match(/^\_(before|after)\_$/);
            if (requiresStepContainer) {
                layout.push('<div data-container="wizard" data-wizard-step="' + _app.htmlAttributeEncode(stepText) + '">');
                generateCustomActions(true);
            }
            $(step.rows).each(function () {
                var row = this,
                    tabList = row.tabList,
                    hasTabs = tabList.length > 1;
                if (hasTabs)
                    generateCustomActions(true);
                if (hasTabs)
                    layout.push('<div data-container="tabset">');
                $(tabList).each(function () {
                    var t = this,
                        tabColumns = t.columns,
                        hasColumns = t.columns.length > 1;
                    if (hasTabs)
                        layout.push('<div data-container="tab" data-tab-text="' + _app.htmlAttributeEncode(t.text) + '">');
                    $(tabColumns).each(function () {
                        var c = this,
                            columnRelWidth = (100 / tabColumns.length - 1),
                            colWidth = hasColumns ? physicalWidth * columnRelWidth / 100 : physicalWidth;
                        if (hasColumns && colWidth <= toPhysicalWidth('tn'))
                            hasColumns = false;

                        if (hasColumns) {
                            generateCustomActions(true);
                            layout.push('<div data-container="column" style="width:' + columnRelWidth + '%">');
                        }
                        $(c.categories).each(function () {
                            var cat = this,
                                catDesc = cat.desc,
                                categoryVisibilityMarker = ' data-visibility="c:' + cat.id + '"',
                                //skipRowAndCollapsible = false, // hasTabs && tabColumns.length === 1 && c.categories.length === 1 && cat.dataViewCount === cat.fields.length,
                                description = catDesc && catDesc.replace(/\{([\w+\_]+)\}/g, '<span data-control="field" data-field="$1" data-read-only="true"><span class="app-control-inner">&#160;</span></span>'),//dataView._processTemplatedText(row, catDesc),
                                descriptionText = description && dataView._formatViewText(resourcesViews.DefaultCategoryDescriptions[description], true, description),
                                categoryWrapped = cat.wrap,
                                doWrap = categoryWrapped === true || (hasColumns ? colWidth : physicalWidth) <= toPhysicalWidth('xs') && categoryWrapped !== false,
                                isDynamicCategory = dynamicCategories.indexOf(cat.id) !== -1;
                            //if (skipRowAndCollapsible) {
                            //    if (cat.dataViewCount > 1)
                            //        layout.push('<div data-container="simple"' + (isDynamicCategory ? categoryVisibilityMarker : '') + '>');
                            //}
                            //else
                            layout.push('<div data-category="' + cat.id + '" data-container="collapsible" data-wrap="' + (doWrap ? !categoryWrapped && adaptiveWrapping ? 'adaptive' : 'true' : 'false')
                                + /*'" x="' + colWidth + '"' +*/ '" data-header-text="' + (cat.headerText || 'none') + '"'
                                + (cat.collapsed ? 'data-collapsed="true" ' : '') + (isDynamicCategory ? categoryVisibilityMarker : '') + (clearAllButton ? ' class="app-has-clear-all' + (dataView._showClearAll ? ' app-form-clear-all-visible' : '') + '"' : '') + '>');
                            generateCustomActions();
                            if (catDesc) {
                                //if (!skipRowAndCollapsible)
                                layout.push('<div data-container="row">');
                                layout.push('<div data-control="description"><span class="app-control-inner">' + descriptionText + '</span></div>');
                                //if (!skipRowAndCollapsible)
                                layout.push('</div>');
                            }
                            var catFieldGroupList = [],
                                catFieldGroup = [],
                                numberOfColumnsInRow = 1;
                            $(cat.fields).each(function () {
                                var f = this;
                                if (f.Type === 'DataView') {
                                    if (catFieldGroup.length)
                                        catFieldGroupList.push(catFieldGroup);
                                    catFieldGroupList.push([f]);
                                    catFieldGroup = [];
                                }
                                else
                                    catFieldGroup.push(f);
                            });
                            if (!hasColumns && cat.floating) {
                                if (categoryWrapped) {
                                    if (toPhysicalWidth('sm') <= physicalWidth)
                                        numberOfColumnsInRow = 2;
                                    if (toPhysicalWidth('md') <= physicalWidth)
                                        numberOfColumnsInRow = 3;
                                    if (toPhysicalWidth('lg') <= physicalWidth)
                                        numberOfColumnsInRow = 4;
                                }
                                else {
                                    if (toPhysicalWidth('md') <= physicalWidth)
                                        numberOfColumnsInRow = 2;
                                    if (toPhysicalWidth('lg') <= physicalWidth)
                                        numberOfColumnsInRow = 3;
                                }
                                numberOfColumnsInRow = Math.min(numberOfColumnsInRow, cat.fields.length);
                            }
                            if (catFieldGroup.length)
                                catFieldGroupList.push(catFieldGroup);
                            $(catFieldGroupList).each(function () {
                                var catFields = this,
                                    numberOfFields = catFields.length;
                                var numberOfRows = Math.ceil(numberOfFields / numberOfColumnsInRow);
                                for (var rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {
                                    //if (skipRowAndCollapsible)
                                    //    layout.push('<div data-container="simple"');
                                    //else
                                    layout.push('<div data-container="row"' + (numberOfColumnsInRow > 1 ? (' data-columns="' + numberOfColumnsInRow + '"') : ''));
                                    var controls = [],
                                        mergeWithPrevious;
                                    for (var colIndex = 0; colIndex < numberOfColumnsInRow; colIndex++) {
                                        var f = catFields[rowIndex + colIndex * numberOfRows];
                                        if (f) {
                                            var isDataView = f.Type === 'DataView',
                                                fieldName = f.Name,
                                                headerText = f.HeaderText,
                                                isDynamicField = dynamicFields.indexOf(fieldName) !== -1,
                                                fieldVisibilityMarker = isDynamicField ? (' data-visibility="f:' + fieldName + '"') : '';
                                            mergeWithPrevious = f.is('merge-with-previous');
                                            //if (skipRowAndCollapsible) {
                                            //    if (isDynamicField)
                                            //        layout.push(fieldVisibilityMarker);
                                            //    else if (isDynamicCategory)
                                            //        layout.push(categoryVisibilityMarker);
                                            //}
                                            //else
                                            if (numberOfColumnsInRow === 1 && isDynamicField)
                                                layout.push(fieldVisibilityMarker);

                                            if (doWrap && numberOfColumnsInRow > 1)
                                                controls.push('<span class="app-field-group">');

                                            if (!isDataView/* && (!doWrap || headerText && headerText !== '&nbsp;')*/)
                                                controls.push('<span data-control="label" data-field="' + fieldName + '"' + (numberOfColumnsInRow > 1 ? fieldVisibilityMarker : '') + (!headerText || headerText === '&nbsp;' ? ' data-hide-when="wrap"' : '') + '><span class="app-control-inner">' + fieldName + '</span></span>');
                                            controls.push('<span data-control="' + (isDataView ? 'dataview' : 'field') + '" data-field="' + fieldName + '"' + (numberOfColumnsInRow > 1 ? fieldVisibilityMarker : '') + (f.is('focus-auto') ? ' data-focus="true"' : '') + '><span class="app-control-inner">[' + fieldName + ']</span></span>');
                                            if (doWrap && numberOfColumnsInRow > 1)
                                                controls.push('</span>');

                                            if (!firstField)
                                                firstField = f;
                                        }
                                    }
                                    if (mergeWithPrevious)
                                        layout.push(' data-merge="true"');
                                    layout.push('>');
                                    if (clearAllButton) {
                                        clearAllButton = false;
                                        layout.push('<i class="material-icon app-form-clear-all" title="' + labelClear + '">clear</i>');
                                        dataView._showClearAll = true;
                                    }
                                    $(controls).each(function () {
                                        layout.push(this);
                                    });
                                    layout.push('</div>');
                                }
                            });
                            //if (skipRowAndCollapsible) {
                            //    if (cat.dataViewCount > 1)
                            //        layout.push('</div>');
                            //}
                            //else
                            layout.push('</div>');
                        });
                        if (hasColumns)
                            layout.push('</div>');
                    });
                    //if (wrapColumns)
                    //    layout.push('</div>');
                    if (hasTabs)
                        layout.push('</div>');
                });
                if (hasTabs)
                    layout.push('</div>');
            });
            if (requiresStepContainer)
                layout.push('</div>');
        });
        //if (firstField && !dataView.tagged('sticky-header-form-disabled') && !allowModal(dataView))
        //    layout.splice(1, 0, '<div data-container="stickyheader"><span data-control="field" data-field="' + firstField.Name + '" data-read-only="true"><span class="app-control-inner">&#160;</span></span></div>');
        layout.push('</div>');
        layout = layout.join('\r\n');
        layout = layout.replace(/\"\s+>/ig, '">');
        return layout;
    }

    function toLogicalWidth(w) {
        var lw;
        if (w >= 1366)
            lw = 'xxl';
        else if (w >= 1200)
            lw = 'xl';
        else if (w >= 992)
            lw = 'lg';
        else if (w >= 768)
            lw = 'md';
        else if (w >= 576)
            lw = 'sm';
        else if (w >= 480)
            lw = 'xs';
        else if (w >= 320)
            lw = 'xxs';
        else
            lw = 'tn';
        return lw;
    }

    function toMaxPhysicalWidth(w) {
        var sizeIndex = screenBreakpoints.indexOf(w);
        if (sizeIndex === -1)
            return _screen.width;
        return toPhysicalWidth(screenBreakpoints[Math.min(screenBreakpoints.length - 1, sizeIndex + 1)]);
    }

    function toPhysicalWidth(w) {
        switch (w) {
            case 'tn':
                return 280;
            case 'xxs':
                return 320;
            case 'xs':
                return 480;
            case 'sm':
                return 576;
            case 'md':
                return 768;
            case 'lg':
                return 992;
            case 'xl':
                return 1200;
            case 'xxl':
                return 1366;
            default:
                return _screen.width;
        }
    }

    function createLayout(dataView, physicalWidth/*, target*/) {
        var logicalWidth = toLogicalWidth(physicalWidth),
            layoutId = dataView._controller + '_' + dataView._viewId + '_' + dataView._filterFields + '_layout_' + logicalWidth + (allowModal(dataView) ? '_m' : ''),
            l, createLayoutEvent = $.Event('createlayout.dataview.app', { dataView: dataView, view: dataView._viewId }),
            survey = dataView.survey();

        $document.trigger(createLayoutEvent);
        l = createLayoutEvent.layout;
        l = l ? { html: l } : _app.cache[layoutId];

        if (!l) {
            var layout = dataView.get_view().Layout,
                layoutElem;
            if (layout) {
                var tempLayout = $('<div>' + layout + '</div>'),
                    layoutList = tempLayout.find('[data-layout]');

                if (layoutList.length) {
                    var layoutElemSizeIndex,
                        maxSizeIndex = screenBreakpoints.indexOf(logicalWidth);
                    layoutList.each(function () {
                        var l = $(this),
                            lw = l.attr('data-layout-size') || 'tn',
                            lwIndex = screenBreakpoints.indexOf(lw);
                        if (lwIndex != -1 && lwIndex <= maxSizeIndex && (!layoutElem || lwIndex > layoutElemSizeIndex)) {
                            layoutElem = l;
                            layoutElemSizeIndex = lwIndex;
                        }
                    });
                }
                else {
                    layoutElem = $('<div data-layout="form"></div>');
                    $(tempLayout.html()).appendTo(layoutElem);
                }
            }
            if (!layoutElem)
                layout = generateLayout(dataView, physicalWidth);
            else {
                //layoutElem.detach();
                //tempLayout.remove();
                layoutElem.find('[data-control]').each(function () {
                    var c = $(this),
                        contents = c.contents().remove();
                    contents.appendTo($span('app-control-inner').appendTo(c));
                });
                layout = $div().append(layoutElem.clone()).html();
            }
            l = { html: layout };
            if (!survey || !(survey.dynamic || !survey.cache))
                _app.cache[layoutId] = l;
        }
        layoutElem = $(l.html)
            .toggleClass('app-form-lines-horiz-none', hideHorizontalLinesInForms(dataView))
            .toggleClass('app-form-lines-input', showInputLinesInForms(dataView));
        layoutElem.attr('data-input-container', dataView._id);
        dataView._isWizard = layoutElem.find('[data-container="wizard"]').length > 0;
        //if (target.is('.app-wrapper'))
        //    layoutElem.appendTo(target);
        //else
        //    layoutElem.insertAfter(target);
        return layoutElem;
    }

    function hideHorizontalLinesInForms(dataView) {
        return !!dataView.tagged('form-lines-horizontal-none') || $settings('ui.form.lines.horizontal') === false;
    }

    function showInputLinesInForms(dataView) {
        return !!dataView.tagged('form-lines-input') || $settings('ui.form.lines.input') === true;
    }

    function prepareLayout(dataView, row, layout) {
        var containers = [],
            containerNodes = [],
            controls = [],
            controlNodes = [],
            rootNodes = [],
            extension = dataView.extension(),
            editing = extension.editing();

        //var result,
        //    t = +new Date();
        layout.data('prepared', true);

        layout.find('[data-visible-when]').each(function (index) {
            var container = $(this),
                expressions = dataView._expressions,
                visibleWhen = container.attr('data-visible-when'),
                isCategory = container.parent().is('[data-container="wizard"]'),
                exp = { Scope: isCategory ? 2 : 7, Target: index, Test: visibleWhen, Type: 1, ViewId: dataView._viewId };
            if (!expressions)
                expressions = dataView._expressions = [];
            expressions.push(exp);
            container.attr({ 'data-visible-when': null, 'data-visibility': (isCategory ? 'c:' : 'v:') + exp.Target });
        });


        _input.evaluate({ dataView: dataView, row: row, container: layout, ignoreDynamicButtons: true });

        // TO-DO: 
        //var superContainer = $('<div/>').width(layout.outerWidth(true)).insertBefore(layout);
        //layout.appendTo(superContainer);

        function enumerateComponents(element, parentContainerElement, parentContainerNode/*, parentContainerOffset*/) {
            if (!element.getAttribute) return;
            var controlType = element.getAttribute('data-control'),
                containerType = !controlType && element.getAttribute('data-container'),
                i, childNodes = element.childNodes,
                c,
                node;
            if (controlType && parentContainerElement) {
                controls.push(element);
                c = $(element);
                offset = c.offset();
                node = {
                    self: c, parent: parentContainerNode, type: controlType, children: []//,
                    //position: c.css('position'),
                    //left: offset.left - parentContainerOffset.left - 1, top: offset.top - parentContainerOffset.top - 1,
                    //width: c.width(), outerWidth: c.outerWidth(true), height: c.height(), outerHeight: c.outerHeight(true)
                };
                //node.right = node.left + node.outerWidth - 1;
                //node.bottom = node.top + node.outerHeight - 1;
                controlNodes.push(node);
                parentContainerNode.children.push(node);
                c.data('node', node);

            }
            else if (containerType) {
                containers.push(element);
                c = $(element);
                //offset = c.offset();
                //width = c.width();
                node = {
                    /*id: containers.length, */self: c, children: [], type: containerType
                    //position: c.css('position'),
                    //left: Math.round(Math.max(0, offset.left - (parentContainerElement ? parentContainerOffset.left : layoutOffset.left) - 1)),
                    //top: Math.round(offset.top - (parentContainerElement ? parentContainerOffset.top : layoutOffset.top)),
                    //width: width, height: c.height(), outerHeight: c.outerHeight(true), outerWidth: c.outerWidth(true)
                };
                //node.right = node.left + node.outerWidth - 1;
                //node.bottom = node.top + node.outerHeight - 1;
                c.data('node', node);
                containerNodes.push(node);
                if (parentContainerElement) {
                    node.parent = parentContainerNode;
                    parentContainerNode.children.push(node);
                }
                else
                    rootNodes.push(node);
            }

            for (i = 0; i < childNodes.length; i++)
                enumerateComponents(childNodes[i], containerType ? element : parentContainerElement, containerType ? node : parentContainerNode, null/* containerType ? offset : parentContainerOffset*/);
        }
        enumerateComponents(layout[0]);

        //result = (+new Date() - t);

        //containers = $(containers);
        //controls = $(controls);

        layout.data('rootNodes', rootNodes).attr('data-state', editing ? 'write' : 'read');
        if (editing && showInputLinesInForms(dataView))
            layout.addClass('app-form-lines-horiz-none');

        renderLayoutContainers(dataView, row, editing, rootNodes);
        observe(true, layout);
    }

    function renderLayoutContainers(dataView, row, editing, containers) {
        $(containers).each(function (index) {
            var container = this,
                self = container.self,
                tabs;
            if (container.ready || !self.is(':visible')) return;
            container.ready = true;
            if (container.type === 'tabset') {
                tabs = [];
                $(container.children).each(function () {
                    var t = this;
                    if (t.type === 'tab')
                        tabs.push({ text: t.self.attr('data-tab-text'), content: t.self, context: t });
                });
                if (tabs.length) {
                    container.tabs = tabs;
                    touch.tabs('create', {
                        id: dataView._id + '_tabset_' + index,
                        tabs: tabs, className: 'app-tabs-layout',
                        scope: dataView.get_selectedKey(),
                        change: function (tabInfo) {
                            var tabContent = tabInfo.content;
                            ensureLayoutControls({ dataView: dataView, /*row: row, */controls: tabInfo.context.children });
                            pageResized(null, tabContent);
                            fitSummaryToolbars(tabContent);
                            if (dataView.editing() && !isTouchPointer && !isInTransition)
                                inputFocus({ container: tabContent });
                        }
                    });
                    $(tabs).each(function () {
                        var t = this;
                        if (t.active) {
                            ensureLayoutControls({ dataView: dataView, row: row, editing: editing, controls: t.context.children });
                            return false;
                        }
                    });
                }
            }
            else {
                if (container.type === 'collapsible') {
                    var headerText = self.attr('data-header-text'),
                        contents, toggle, body, isCollapsed = self.attr('data-collapsed') === 'true';
                    if (headerText && headerText !== 'none') {
                        contents = self.contents();
                        toggle = $div('app-feedback', 'data-container="toggle"');
                        body = $div('', 'data-container="simple"');
                        contents.appendTo(body);
                        $span('app-collapsible-toggle-text').appendTo(toggle).text(headerText);
                        $span('app-collapsible-toggle-button').appendTo(toggle).attr('data-title', isCollapsed ? labelMaximize : labelMinimize);
                        toggle.appendTo(self);
                        body.appendTo(self);
                        if (isCollapsed)
                            self.addClass('app-container-collapsed');
                    }
                }
                renderLayoutControls(dataView, row, editing, container.children);
            }
        });
    }

    function renderLayoutControls(dataView, row, editing, controls) {
        $(controls).each(function (index) {
            var node = this,
                c = node.self,
                controlType,
                inner,
                fieldName,
                field,
                headerText, labelIcon, originalField;
            if (node.children.length)
                renderLayoutContainers(dataView, row, editing, [node]);
            else {
                if (node.ready || !c.is(':visible')) return;
                node.ready = true;
                fieldName = c.attr('data-field');
                controlType = node.type;
                if (fieldName) {
                    inner = c.find('.app-control-inner');
                    field = originalField = dataView.findField(fieldName);
                    if (field) {
                        // we are dealing with a data-aware control
                        if (!field.AllowNulls)
                            c.attr('data-required', true);
                        // data-control="label"
                        if (controlType === 'label' || controlType === 'header') {
                            //$('<span class="app-control-inner"/>').appendTo(c.empty()).text(field.HeaderText);
                            labelIcon = field.tagged(/\blabel\-icon-(.+?)(\s|,|$)/);
                            field = dataView._allFields[field.AliasIndex];
                            headerText = field.HeaderText;
                            if (labelIcon) {
                                inner.html('&nbsp;');
                                labelIcon = labelIcon[1];
                                if (!labelIcon.match(iconFontRegex))
                                    labelIcon = 'material-icon-' + labelIcon;
                                materialIcon(labelIcon, c).attr('data-title', headerText);
                                c.closest('[data-layout]').addClass('app-has-icon-label');
                                if (originalField.Watermark == null)
                                    originalField.Watermark = headerText;
                            }
                            else
                                inner.html(headerText);
                            if (!headerText || headerText === '&nbsp;')
                                c.attr('data-required', null);
                        }
                        else if (controlType === 'footer') {
                            //field = dataView._allFields[field.AliasIndex];
                            var footerText = field.FooterText;
                            if (footerText)
                                inner.html(footerText);
                            else
                                c.addClass('app-hidden');
                        }
                        else {
                            // data-control="dataview"
                            c.addClass('app-field-' + field.Name);
                            if (controlType === 'dataview') {
                                if (field.Type === 'DataView' && field.DataViewController)
                                    if (dataView.extension().inserting() && !dataView.odp) {
                                        c.hide();
                                        if (c.parent().is('[data-container="row"]'))
                                            c.parent().hide();
                                    }
                                    else {
                                        fieldName = field.Name;
                                        var parentDataView = dataView.get_parentDataView(dataView),
                                            dataViewId = dataView._id + '_' + fieldName,
                                            childDataView,
                                            viewCount = 0,
                                            childPageInfo,
                                            filterFields = field.DataViewFilterFields,
                                            filterSource = field.DataViewFilterSource,
                                            contextFields = field.ContextFields,
                                            args,
                                            startPage = row[field.Index], dataViewFields,
                                            echo;
                                        if (parentDataView._controller !== dataView._controller)
                                            parentDataView = dataView;
                                        headerText = field.HeaderText;
                                        dataViewFields = dataView._dataViewFields;
                                        if (!dataViewFields)
                                            dataViewFields = dataView._dataViewFields = {};
                                        if (!dataViewFields[fieldName])
                                            dataViewFields[fieldName] = 1;
                                        else
                                            dataViewId += dataViewFields[fieldName]++;
                                        childDataView = findDataView(dataViewId);
                                        while (childDataView && childDataView._dataViewFieldParentId !== parentDataView._id) {
                                            dataViewId = parentDataView._id + '_' + fieldName + viewCount++;
                                            childDataView = findDataView(dataViewId);
                                        }
                                        //node.echoSelector = '#' + dataView._id + ' #' + dataViewId + '_echo';
                                        node.dataView = dataViewId;
                                        c.empty().attr('id', dataViewId + '_ph').attr('data-input', 'dataview'); //.addClass('app-echo-placeholder');

                                        if (!childDataView) {
                                            args = { id: dataViewId, controller: field.DataViewController, viewId: field.DataViewId, filterFields: filterFields, baseUrl: appBaseUrl, servicePath: appServicePath, showSearchBar: true, autoHide: filterFields ? 2 : null, tag: field.Tag };
                                            args.startPage = startPage;
                                            if (filterSource && !filterFields && !contextFields)
                                                field.ContextFields = contextFields = filterSource;
                                            if (filterFields || contextFields) {
                                                args.filterSource = dataView._id;
                                                if (filterSource) {
                                                    var masterField = dataView.findField(filterSource),
                                                        detailDataViews = masterField._detailDataViews, expressions, visExp;
                                                    if (masterField) {
                                                        args.filterSource = masterField._dataViewId;
                                                        if (!detailDataViews)
                                                            detailDataViews = masterField._detailDataViews = [];
                                                        detailDataViews.push(dataViewId);
                                                        // Hide dataview field if it depends on another dataview field and create a visibility expression if one does not exists yet
                                                        // Expression format:
                                                        //    !$row.Customers._ready || $row.Customers._selected

                                                        // scan expressions and create a new visibility test or augment the existing one.
                                                        expressions = dataView._expressions;
                                                        if (!expressions)
                                                            dataView._expressions = expressions = [];
                                                        expressions.every(function (exp) {
                                                            if (exp.Scope === 3 && exp.Target === fieldName && exp.ViewId === dataView._viewId) {
                                                                exp._visChanged = false; // the child "DataView" is hidden by default until user makes a selection
                                                                visExp = exp;
                                                            }
                                                            return !visExp;
                                                        });
                                                        showHideSimpleContainersWithoutVisibleChildren(c.closest('[data-visibility="f:' + fieldName + '"]').hide(), false);
                                                    }
                                                }
                                            }
                                            args.showInSummary = !!field.DataViewShowInSummary;
                                            if (field.DataViewPageSize)
                                                args.pageSize = field.DataViewPageSize;
                                            args.selectionMode = field.DataViewMultiSelect ? 'Multiple' : 'Single';
                                            if (field.DataViewShowActionButtons)
                                                args.showActionButtons = field.DataViewShowActionButtons;
                                            args.showActionBar = field.DataViewShowActionBar !== false;
                                            args.showDescription = field.DataViewShowDescription !== false;
                                            args.showViewSelector = field.DataViewShowViewSelector !== false;
                                            args.showSearchBar = field.DataViewShowSearchBar !== false;
                                            args.showQuickFind = field.DataViewShowQuickFind !== false;
                                            args.showRowNumber = !!field.DataViewShowRowNumber;
                                            if (field.DataViewShowPager)
                                                args.showPager = field.DataViewShowPager;
                                            args.showPageSize = field.DataViewShowPageSize !== false;
                                            args.showModalForms = !!field.DataViewShowModalForms;
                                            args.searchOnStart = !!field.DataViewSearchOnStart;
                                            args.autoSelectFirstRow = !!field.DataViewAutoSelectFirstRow;
                                            args.autoHighlightFirstRow = !!field.DataViewAutoHighlightFirstRow;
                                            if (field.DataViewRefreshInterval)
                                                args.refreshInterval = field.DataViewRefreshInterval;

                                            childDataView = $create(WebDataView, args, null, null, $p()[0]);
                                            childDataView._dataViewFieldName = fieldName;
                                            field._dataViewId = dataViewId;
                                            childDataView._dataViewFieldParentId = parentDataView._id; // mark this data as child
                                            childDataView._dataViewFieldOwnerId = field._dataView._id; // specify the dataview that hold "_dataViewFieldName"
                                            if (filterFields && childDataView._filterSource === /*field._dataView*/dataView._id)
                                                childDataView._filterSourceSelected(/*field._dataView*/dataView);
                                            childPageInfo = getPageInfo(dataViewId);
                                            childPageInfo.text = headerText;
                                            childPageInfo.headerText = headerText;
                                            childPageInfo.activator.text = headerText;
                                        }
                                        else
                                            childDataView._startPage = startPage;
                                        // position echo
                                        var scrollable = findScrollable(c);
                                        echo = scrollable.find('[data-for="' + dataViewId + '"]');
                                        if (!echo.length)
                                            echo = echoCreate(dataViewId, scrollable).addClass('app-echo-embedded');
                                        echo.width(c.width());
                                        if (childDataView.get_startPage()) {
                                            childDataView._loadPage();
                                            echoRefresh(dataViewId);
                                        }
                                    }
                            }
                            else if (controlType === 'field') {
                                // data-control="field"
                                if (field.ToolTip)
                                    c.attr('title', field.ToolTip);
                                _input.render({ container: c, inner: inner, dataView: dataView, field: field, row: row, editing: editing });
                            }
                            else {
                                // unknown "data-aware" control
                            }
                        }
                    }
                }
                else {
                    // this control does not make use of "data-field" attribute
                    if (controlType === 'description')
                        c.closest('[data-container]').addClass('app-has-description');
                    else if (controlType === 'action') {
                        inner = c.find('.app-control-inner');
                        var actionPath = c.attr('data-action'),
                            action = dataView.findAction(actionPath),
                            btn,
                            isAvailable,
                            description;
                        if (action) {
                            btn = $span('app-action-column-button').appendTo(inner.empty().addClass('app-action-column')).text(action.HeaderText);
                            description = action.Description;
                            if (description)
                                btn.attr('title', description);
                            isAvailable = action && dataView._isActionAvailable(action);
                            if (!isAvailable)
                                c.addClass('app-disabled');
                        }
                        else {
                            var errorText = actionPath + ': ' + inner.text();
                            $span('app-action-column-button').appendTo(inner.empty().addClass('app-action-column')).text(errorText);
                            c.addClass('app-disabled');
                        }
                    }
                }
            }
        });
    }

    function renderDirtyLayoutControls(dataView, row, editing, controls) {
        // render visible controls that are dirty
        $(controls).each(function (index) {
            var node = this,
                c = node.self,
                field;
            if (!node.ready)
                if (c.is(':visible'))
                    renderLayoutControls(dataView, row, editing, [node]);
                else
                    return false;
            if (node.children.length)
                renderDirtyLayoutControls(dataView, row, editing, node.children);
            else {
                if (node.ready && node.dirty && c.is(':visible')) {
                    field = _input.elementToField(c);
                    _input.render({ container: c, dataView: dataView, field: field, editing: editing, row: row });
                    node.dirty = false;
                }
            }
        });
    }

    function ensureLayoutControls(options) {
        var dataView = options.dataView,
            row = options.row,
            editing = options.editing,
            controls = options.controls;
        if (!controls || !controls.length) return;
        if (!dataView)
            dataView = findDataView($(controls[0].self).closest('[data-input-container]').attr('data-input-container'));
        if (!row)
            row = dataView.editRow();
        if (editing == null)
            editing = dataView.editing();
        renderLayoutControls(dataView, row, editing, controls);
        renderDirtyLayoutControls(dataView, row, editing, controls);
        observe(true, $('#' + dataView._id + ' .app-wrapper'));
    }

    function syncEmbeddedViews(scrollable, delay) {
        if (isInTransition && !delay)
            delay = 50;
        if (delay) {
            clearTimeout(_window._syncEmbeddedViewsTimeout);
            //_window._syncEmbeddedViewsTimeout = setTimeout(function () {
            //    syncEmbeddedViews(scrollable);
            //});
            _window._syncEmbeddedViewsTimeout = setTimeout(syncEmbeddedViews, 0, scrollable);
            return;
        }
        if (!scrollable)
            scrollable = findScrollable();
        var list = [],
            page = findPage(scrollable),
            scrollableOffset = scrollable.offset(),
            scrollableScrollTop, pageLeft;

        scrollable.find('[data-control="dataview"]').each(function () {
            var that = $(this),
                node = that.data('node'),
                echo = findEcho(node.dataView),//$(node.echoSelector),
                h = parseCss(echo, 'height') + parseCss(echo, 'margin-top') + parseCss(echo, 'margin-bottom') + parseCss(echo, 'padding-top') + parseCss(echo, 'padding-bottom')//echo.outerHeight(true);
            if (echo.length && h) {
                if (h !== parseCss(that, 'height') /*that[0].offsetHeight*/)
                    that.height(h);
                list.push({ p: that, e: echo });
            }
        });
        var visibilityChanged;
        $(list).each(function () {
            var item = this,
                placeholder = item.p, placeholderOffset,
                w = placeholder.width();
            if (w) {
                if (scrollableScrollTop == null) {
                    scrollableScrollTop = scrollable.scrollTop();
                    pageLeft = page.length ? page.offset().left : 0;
                }
                placeholderOffset = placeholder.offset();
                if (item.e.css('display') === 'none') {
                    visibilityChanged = true;
                    item.e.css('display', '');
                }
                item.e.css({
                    //visibility: '',
                    left: placeholderOffset.left - pageLeft /*- (isModalPage(page) ? parseCss(page, 'left') : (appBars.left.visible ? appBars.left.width + 1 : 0))*/,
                    top: Math.round(placeholderOffset.top + scrollableScrollTop - scrollableOffset.top),// + parseCss(page, 'padding-top'),
                    width: w
                }).removeClass('app-echo-hidden');

            }
            else
                item.e.addClass('app-echo-hidden');//css({ 'visibility': 'hidden', left: -20000, top: 0 });
        });
        if (visibilityChanged) {
            setupGridHeaderStyle(scrollable);
            fetchEchos();
        }
        if (isReadingPaneMaster(page))
            syncEmbeddedViews(findScrollable('.app-reading-pane-detail:not(.app-hidden)'));
    }

    function expandCollapsedItems(context, link) {
        var item = link.parent().hide().next();
        while (item.length && !item.is(':visible'))
            item = item.show().next();
    }

    function createStyle() {
        return $htmlTag('style').appendTo($('head'));
    }

    function enumerateConditionalStyleExpressions(dataView) {
        return dataView._enumerateExpressions(_web.DynamicExpressionType.Any, _web.DynamicExpressionScope.ViewRowStyle, dataView.get_viewId());
    }

    function evaluateConditionalStyleExpressions(dataView, row, target, expressions) {
        if (!expressions)
            expressions = enumerateConditionalStyleExpressions(dataView);
        if (expressions && expressions.length) {
            var customCssClasses = dataView._evaluateJavaScriptExpressions(expressions, row, true);
            if (target) {
                var allCssClasses = [];
                $(expressions).each(function () {
                    var exp = this;
                    if (exp.Scope === 1)
                        allCssClasses.push(exp.Result);
                });
                allCssClasses = allCssClasses.join(' ');
                target.removeClass(allCssClasses);
                if (customCssClasses)
                    target.addClass(customCssClasses);
            }

        }
    }

    function frozenFieldName(dataView) {
        var fieldName = dataView._gridFrozenField;
        if (!fieldName) {
            fieldName = dataView.pageProp('frozenField')
            if (!fieldName)
                if (dataView._hasKey()) {
                    dataView._fields.every(function (f) {
                        if (f.tagged('grid-frozen-field'))
                            fieldName = f.Name;
                        return !fieldName;
                    });
                    if (!fieldName)
                        fieldName = '_first_';
                }
                else
                    fieldName = '_none_';
            dataView._gridFrozenField = fieldName;
        }
        return fieldName;
    }

    function stickyHeaderTemplate(page) {
        if (!page)
            page = findActivePage();
        return page.find('.dv-heading');
    }

    function removeStickyHeaderTemplate(page) {
        stickyHeaderTemplate(page).remove();
    }

    function pathToId(path) {
        var id = path.replace(/\.\w+$/, '').replace(/\W/g, '_').toLowerCase() || 'page';
        if (id.match(/^\_/))
            id = id.substring(1);
        return id;
    }

    function usePopupPanel() {
        var w = _screen.width,
            h = _screen.height;
        return w < 480 && h < 640 || h < 480 && w < 640;
    }

    function dataViewEchoChanged(dataView) {
        getPageInfo(typeof dataView == 'string' ? dataView : dataView._id).echoChanged = true;
    }

    //function gridViewIsPreferred() {
    //    return true;
    //    //var gw = 480;
    //    //if (appBars.left.visibile)
    //    //    gw += 193;
    //    //if (appBars.right.visible)
    //    //    gw += 193;
    //    //return _screen.width >= gw;//$body.is('.app-sidebar-undocked') ? 480 : 480 + 193;
    //}

    function dataInputOf(element, selector) {
        return _input.of(element, selector);
    }

    function lookupHidePopup() {
        _input.methods.lookup._hidePopup();
    }

    function findScrollable(selector) {
        var scrollable;
        if (selector) {
            if (typeof selector == 'string') {
                if (selector.match(/^\w/))
                    selector = '#' + selector;
                return $(selector).find('.app-wrapper');
            }
            if (selector.length && selector[0].className.indexOf('ui-page') !== -1)
                return selector.find('.app-wrapper');
            scrollable = selector.closest('.app-wrapper');
            if (!scrollable.length)
                scrollable = findScrollable();
            return scrollable;
        }
        else {
            scrollable = findActivePage('.app-wrapper');
            return scrollable ? scrollable : $();
        }
    }

    function findPage(selector) {
        return selector ? selector.closest('.ui-page') : findActivePage();
    }

    function findFocusedSummaryView(selector) {
        if (!selector)
            selector = findPage();
        else
            selector = $(selector).closest('.app-wrapper');
        return selector.find('.app-focus[data-input="dataview"]');
    }

    function findDataViewMaster(dataView) {
        return findDataView(dataView._filterSource);
    }

    function findEcho(selector) {
        var echo;
        if (typeof selector == 'string') {
            if (selector.match(/_ph$/))
                selector = selector.substring(0, selector.length - 3);
            if (!selector.match(/_echo$/))
                selector += '_echo';
            echo = $('#' + selector);
        }
        else if (selector != null && selector._controller) {
            var pageInfo = getPageInfo(selector);
            echo = pageInfo.echo;
            if (!echo)
                echo = findEcho(pageInfo.id);//
        }
        else if (selector != null && selector._dataViewId) // find echo for DataView field
            echo = findEcho(selector._dataViewId);
        else {
            selector = $(selector);
            if (selector.data('control') === 'dataview')
                echo = findEcho(selector.attr('id'));
            else
                echo = $(selector).closest('.app-echo');
        }
        return echo;
    }

    function focusScrollable(scrollable) {
        var wrapper = activeElementOfDocument().closest('.app-wrapper');
        scrollable = findScrollable(scrollable);
        if (!kiosk('focus') && scrollable.length && (!wrapper.length || wrapper[0] !== scrollable[0]))
            scrollable.trigger('focus');
        return scrollable;
    }

    function reloadWindow() {
        var href = _window.location.href,
            hashIndex = href.indexOf('#');
        if (hashIndex >= 0)
            href = href.substring(0, hashIndex);
        _window.location.reload(href);
    }

    function displayDensity() {
        if (!_displayDensity) {
            var density = $settings('ui.displayDensity.value');
            _displayDensity = 16;
            if (density === 'Compact')
                _displayDensity = 14;
            else if (density === 'Condensed' || density === 'Tiny')
                _displayDensity = 12;
        }
        return _displayDensity;
    }

    function scrollWrapper(wrapper, scrollTop) {

        function allowScrolling() {
            wrapper.removeData('scrolling enableScrollEventsTimeout');
            updateVScrollbar(wrapper);
        }

        wrapper.data('scrolling', true);
        wrapper.scrollTop(scrollTop);
        var enableScrollEventsTimeout = wrapper.data('enableScrollEventsTimeout');
        if (enableScrollEventsTimeout != null)
            clearTimeout(enableScrollEventsTimeout);
        wrapper.data('enableScrollEventsTimeout', setTimeout(allowScrolling, 300));
    }

    function echoRereshToolbarWithDelay(dataView, echo) {
        if (!echo)
            echo = findEcho(dataView);// $('#' + dataView._id + '_echo');
        if (echo.length)
            echo.find('.app-echo-toolbar .app-echo-controls').addClass('app-stale');
        var pageId = activePageIdentifier();
        clearTimeout(_window._refreshEchoToolbar);
        _window._refreshEchoToolbar = setTimeout(function () {
            if (activePageIdentifier(pageId) && !isBusy() && !isInTransition)
                fetchEchos();
        }, 500);
    }

    function popupAnimation(menu) {
        return !menu && usePopupPanel() ? 'none' : (isTouchPointer ? 'fade' : 'none');
    }

    //function iconIsGlyph(icon) {
    //    return false;
    //    //return icon && typeof icon == 'string' && icon.match(/glyphicon-/);
    //}

    function iconIsMaterial(icon) {                //        /^(material-icon|glyphicons|glyphicon|fa|ion|icon|mdi)-(.+)/
        return icon && typeof icon == 'string' && icon.match(iconFontRegex);//icon.match(/^(material-icon|glyphicons|glyphicon|fa|ion|icon|mdi)-(.+)/);
    }

    function materialIcon(icon, parent) {
        //                 /\b(((material-icon|glyphicons|glyphicon|fa|ion|icon|mdi)-([\w-]+?)))(\s|$|,)/g
        var m = icon.match(iconFontRegex); //icon.match(/^(material-icon|glyphicons|glyphicon|fa|ion|icon|mdi)-(.+)/);
        if (!m) return null;
        var
            font = m[1],
            supportsLigatures = font === 'material-icon';
        return $('<i class="app-icon ' + font + ' ' + m[0] + '" aria-hidden="true" data-icon="' + icon + '">' + (supportsLigatures ? m[2].replace(/-/g, '_') : '') + '</i>').appendTo(parent.addClass('app-has-icon app-has-' + font));
    }

    function progressIndicatorInPanel() {
        return $('.ui-panel-open .ui-btn.app-animated');
    }

    function progressIndicatorInPopup() {
        return $('.ui-popup-active .ui-btn.app-animated');
    }



    function startSearchCallback(context) {
        _app.search('show', context.dataViewId);
    }

    function resizeSignatures(content) {
        $(content).find('.app-signature').each(function () {
            _app.upload('resize', { container: this });
        });
    }

    function focusStatusBar(statusBar) {
        var current = statusBar.find('.Current'),
            currentOffset,
            statusBarOffset;
        if (current.length) {
            statusBarOffset = statusBar.offset();
            currentOffset = current.offset();
            statusBar.scrollLeft(currentOffset.left - statusBarOffset.left - current.outerWidth(true) / 2);
        }
    }

    function wizard(method, options) {
        if (!options)
            options = {};
        var container = options.container || findActivePage(),
            layout = options.layout || container,
            config;
        if (!layout.is('[data-layout]')) {
            layout = layout.find('[data-layout]');
            if (!layout.length && container)
                layout = container.closest('[data-layout]');
        }
        config = layout.data('wizard-config');

        if (!config) {
            config = { steps: [], active: 0 };
            config.containers = layout.find('[data-container="wizard"]').each(function (index) {
                var container = $(this),
                    step = { text: container.attr('data-wizard-step'), isDynamic: container.find('> [data-visibility]').length > 0 };
                config.steps.push(step);
            });
            layout.data('wizard-config', config);
        }

        if (!config.steps.length) return;

        function visible(index) {
            var skip,
                step = config.steps[index];
            if (step.isDynamic) {
                skip = true;
                $(config.containers[index]).children().each(function () {
                    var elem = this;
                    if (elem.style.display !== 'none') {
                        skip = false;
                        return false;
                    }
                });
            }
            return !skip;
        }

        function find(dir, index) {
            if (index == null)
                index = config.active;
            index += dir;
            while (index >= 0 && index < config.steps.length) {
                if (visible(index))
                    break;
                else
                    index += dir;
            }
            return index;
        }

        function selectPage(text) {
            $(config.steps).each(function (index) {
                var step = this;
                if (step.text === text && visible(index)) {
                    config.active = index;
                    pageChanged();
                }
            });
        }

        function test(dir, index) {
            var index = find(dir, index);
            return index >= 0 && index < config.steps.length;
        }

        function changeVisiblePage() {
            hideTooltip();
            config.containers.removeClass('app-wizard-active');
            var index = config.active,
                activeStep;
            if (index !== -1) {
                activeStep = $(config.containers[index]).addClass('app-wizard-active');
                ensureLayoutControls({ controls: activeStep.data('node').children });
                pageResized();
                fetchEchos();
            }
        }

        function pageChanged() {
            changeVisiblePage();
            status();
            if (!isTouchPointer)
                inputFocus({ container: $(config.containers[config.active]) });
        }

        function status() {
            var page = container.closest('.ui-content'),
                next, prev;
            if (!page.length)
                page = container.find('.ui-content');
            next = page.find('[data-action-path="wizard-next"]'),
                prev = page.find('[data-action-path="wizard-prev"]');
            next.toggleClass('app-btn-disabled', !test(1));
            prev.toggleClass('app-btn-disabled', !test(-1));
            updateStatusBar();
        }

        function updateStatusBar() {
            var page = layout.closest('.ui-page'),
                statusBar = page.find('.app-status-bar'),
                dataView,
                sb;

            if (statusBar.length) {
                dataView = findDataView(page.attr('id'));
                if (dataView._statusBarAuto) {
                    // generate a status bar
                    sb = [dataView._controller + '.' + dataView._viewId + '._wizard:' + config.active + '\n'];
                    $(config.steps).each(function (index) {
                        var step = this,
                            skip,
                            text = step.text;
                        if (step.isDynamic) {
                            skip = true;
                            $(config.containers[index]).children().each(function () {
                                if (this.style.display !== 'none') {
                                    skip = false;
                                    return false;
                                }
                            });
                        }
                        if (!skip)
                            sb.push((index === config.active ? ('[' + text + ']') : text) + ' >');
                    });
                    dataView._statusBarAuto = sb.join('');
                }
                statusBar.html(dataView.statusBar());
                var segments = statusBar.find('li.Segment'),
                    zindex = segments.length + 10;
                segments.each(function (i) {
                    this.style.zIndex = zindex - i;
                });
                focusStatusBar(statusBar);
            }
        }

        switch (method) {
            case 'start':
                config.active = test(1, -1) ? 0 : -1;
                changeVisiblePage();
                updateStatusBar();
                break;
            case 'status':
                status();
                break;
            case 'select':
                selectPage(options.text);
                break;
            case 'next':
                var next = find(1);
                if (next !== -1) {
                    config.active = next;
                    pageChanged();
                }
                break;
            case 'prev':
                var prev = find(-1);
                if (prev !== -1) {
                    config.active = prev;
                    pageChanged();
                }
                break;
            case 'visible':
                if (options.step)
                    if (options.step.is('.app-wizard-active'))
                        return true;
                    else {
                        var index = options.step.prevAll('[data-container="wizard"]').length;
                        return visible(index);
                    }
                break;
            case 'show':
                if (options.step && !options.step.is('.app-wizard-active')) {
                    index = options.step.prevAll('[data-container="wizard"]').length;
                    if (index !== config.active && visible(index)) {
                        config.active = index;
                        changeVisiblePage();
                        status();
                    }
                }
                break;
        }
    }

    function configurePromoButton(dataView, thumbnails) {
        if (!$settings('ui.actions.promote')) return;
        var button = touch.promo(),
            activePageId,
            viewStyle,
            isList,
            pageInfo, page, pageOffset,
            showOnLeft,
            buttonWidth, buttonOffset;

        if (!dataView)
            dataView = activeDataView();
        if (dataView)
            activePageId = dataView._id;
        if (dataView) {
            viewStyle = dataView.extension().viewStyle();
            isList = true;//(viewStyle === 'List' || viewStyle === 'Cards');
            showOnLeft = viewStyle === 'Map';
            if (isList && thumbnails == null)
                thumbnails = findActivePage('.app-listview .ui-li-has-thumb').length > 0;
            if (viewStyle !== 'Map')
                if (isList && thumbnails || dataView.get_showMultipleSelection() || dataView.inlineEditing() || !sidebarIsVisible())
                    showOnLeft = false;
        }
        button = touch.promo();
        buttonWidth = button.outerWidth();
        buttonOffset = Math.floor(buttonWidth / 3);
        pageInfo = getPageInfo(activePageId);

        function positionForNonModalPage() {
            var rightPanelWidth = _screen.left,
                splitBottom = _screen.splitBottom,
                defaultBottomOfPromo = 9; // 9 is the default bottom of the "promo" button
            if (splitBottom)
                splitBottom += _readingPane.divider + defaultBottomOfPromo;
            button/*.removeClass('app-promo-modal')*/.css({
                left: showOnLeft ? _screen.left + (appBars.left.visible ? appBars.left.width + buttonOffset : buttonOffset) : 'auto',
                right: showOnLeft ? 'auto' : (rightPanelWidth + (appBars.right.visible ? appBars.right.width + buttonOffset : buttonOffset) + (_screen.splitRight ? _screen.splitRight + _readingPane.divider : 0)),
                bottom: isVirtualScreen() ? _screen.bottom + (splitBottom || defaultBottomOfPromo) : (splitBottom || '')
            });
        }

        if (pageInfo) {
            page = pageInfo.page; //$('#' + activePageId);
            if (page)
                if (page.is('.app-page-modal')) {
                    pageOffset = page.offset();
                    if (page.is('.app-page-modal-fullscreen') || page.find('.app-listview.app-grid').length)
                        button.css({
                            left: showOnLeft ? pageOffset.left + buttonOffset : 'auto',
                            right: showOnLeft ? 'auto' : _screen.physicalWidth - (pageOffset.left + page.outerWidth()) + buttonOffset,
                            bottom: _screen.physicalHeight - (pageOffset.top + page.outerHeight() - buttonOffset),
                            'margin-bottom': 0
                        });
                    else
                        button.css({
                            left: showOnLeft ? pageOffset.left + buttonOffset : 'auto',
                            right: showOnLeft ? 'auto' : _screen.physicalWidth - (pageOffset.left + page.outerWidth()) + buttonOffset,
                            bottom: _screen.physicalHeight - (pageOffset.top + page.outerHeight() + Math.ceil(buttonWidth / 2)),
                            'margin-bottom': 0
                        });
                }
                else
                    positionForNonModalPage();
        }
        else
            positionForNonModalPage();
    }

    function updateMenuStripPosition(force) {
        var title = touch._title;
        if (title.data('screen-width') !== _screen.width || force)
            title.data('screen-width', _screen.width).css('marginLeft', appBars.left.visible ? appBars.left.width : touch._logo.offset().left + touch._logo.outerWidth());
    }

    function updateSidebarInner() {
        var leftInner = appBars.left.inner,
            toolbarSidebar = $('.app-btn-menu-background'),
            logo = $('.app-logo');
        if (appBars.left.visible && !appBars.left.mini) {
            var sidebarWidth = appBars.left.defaultWidth;
            leftInner.parent().css({ 'width': sidebarWidth });
            appBars.left.width = sidebarWidth;
            leftInner.css('width', '');
            toolbarSidebar.css('width', sidebarWidth);
            logo.css('max-width', sidebarWidth - appBars.left.toolbar.height()); // 56px is the default width of the mini-sidebar
        }
        else {
            leftInner.parent().css('width', '');
            toolbarSidebar.css('width', '');
            appBars.left.width = leftInner.css('width', '').outerWidth();
            logo.css('max-width', '');
        }
        if (scrollbarInfo.width)
            leftInner.css({ 'overflow-y': 'scroll', 'width': appBars.left.width - scrollbarInfo.width + 2 });
    }

    function updateSidebarVisibility() {
        var bodyClass = document.body.className,
            leftChanged, rightChanged;

        function showLeftSideBar() {
            if (appBars.left.mini && !bodyClass.match(/\bapp\-has\-minisidebar\-left\b/))
                $body.addClass('app-has-minisidebar-left');
            else if (!appBars.left.mini && bodyClass.match(/\bapp\-has\-minisidebar\-left\b/))
                $body.removeClass('app-has-minisidebar-left');
            if (!bodyClass.match(/\bapp-has-sidebar-left\b/)) {
                $body.addClass('app-has-sidebar-left');
                appBars.left.visible = true;
                updateSidebarInner();
                //leftInner.css({ 'overflow-y': 'scroll', width: sidebar.width() - parseCss(leftInner, 'padding-left') - parseCss(leftInner, 'padding-right') - scrollbarInfo.width });
                leftChanged = true;
            }
            if (!touch.sideBar.ready)
                touch.sideBar();
        }

        function hideLeftSideBar() {
            if (bodyClass.match(/\bapp\-has\-minisidebar\-left\b/))
                $body.removeClass('app-has-minisidebar-left');
            if (bodyClass.match(/\bapp-has-sidebar-left\b/)) {
                $body.removeClass('app-has-sidebar-left');
                appBars.left.visible = false;
                appBars.left.width = 0;
                leftChanged = true;
                $('.app-btn-menu-background').width('');
            }
        }

        if (!isHosted) {
            if ($settings('ui.sidebar.when') === 'Landscape')
                if (sidebarIsAllowed() && _screen.width > _screen.height)
                    showLeftSideBar();
                else
                    hideLeftSideBar();
            else if ($settings('ui.sidebar.when') === 'Never') {
                if (bodyClass.match(/\bapp-has-sidebar-left\b/)) {
                    $body.removeClass('app-has-sidebar-left app-has-minisidebar-left');
                    appBars.left.visible = false;
                    appBars.left.width = 0;
                    leftChanged = true;
                }
            }
            else // 'Always'
                if (sidebarIsAllowed())
                    showLeftSideBar();
                else
                    hideLeftSideBar();

        }
        // Right Side Bar
        //if (_screen.width >= toPhysicalWidth('md') && false/* 992*/) {
        //    //if (!bodyClass.match(/\bapp-has-sidebar-right\b/)) {
        //    //    $body.addClass('app-has-sidebar-right');
        //    //    appBars.right.visible = true;
        //    //    appBars.right.width = appBars.right.inner.outerWidth() - scrollbarInfo.width;
        //    //    rightChanged = true;
        //    //}
        //}
        //else
        if (bodyClass.match(/\bapp-has-sidebar-right\b/)) {
            $body.removeClass('app-has-sidebar-right');
            appBars.right.visible = false;
            appBars.right.width = 0;
            rightChanged = true;
        }
        if (leftChanged) {
            updateMenuStripPosition(true);
            syncMenuStripWithVisibleSidebar();
            stickyHeader();
            configurePromoButton();
        }
        if (rightChanged) {
            var toolbarRight = 0;
            if (appBars.right.visible)
                toolbarRight += appBars.right.width + 1;
            touch._toolbar.css(toolbarRight ? { 'right': toolbarRight, width: 'auto' } : { 'right': '', width: '' });
            configurePromoButton();
        }
        updateMiniSiderInnerHeight();
    }

    function updateMiniSiderInnerHeight() {
        if (appBars.left.visible) {
            var inner = appBars.left.inner,
                bottom = parseInt(inner[0].style.bottom || '0');
            if (appBars.left.mini) {
                if (!bottom)
                    inner.css('bottom', inner.next().outerHeight() - 1);
            }
            else if (bottom)
                appBars.left.inner.css('bottom', '');
        }
    }

    function openHref(href) {
        activeLink();
        var m = href.match(/^(_\w+)\:(.+)$/),
            t;
        if (m && m[1]) {
            u = m[2];
            t = m[1];
            if (t === '_blank')
                //if (_app.host)
                //    _app.host.invoke('navigate', { type: 'external', url: u });
                //else
                _window.open(u, t, 'modal=yes,alwaysRaised=yes,resizable=yes');
            else if (t === '_internal')
                _app.touch.openExternalUrl(u, false)();
            else
                _window.open(u, t);
        }
        else if (isTouchPointer || isMac)
            _window.location.href = href;
        //else if (href.indexOf('http') != -1)
        //    _app.touch.openExternalUrl(href, false)();
        else
            _window.open(href);
    }

    function timeNow() {
        return new Date().getTime();
    }

    function parseCss(element, stylePropertyName) {
        return parseFloat(arguments.length === 1 ? element : element.css(stylePropertyName));
    }

    function safePoint(p) {
        if (p.x != null)
            p.x = Math.ceil(p.x);
        if (p.y != null)
            p.y = Math.ceil(p.y);
        return p;
    }

    function resetToolbarButtons() {
        var buttons = touch._toolbarButtons,
            contextButton = touch._contextButton,
            contextButtonLeft = Math.ceil(contextButton.show().offset().left),
            contextButtonWidth = parseCss(contextButton, 'width') + 2,
            gap = displayDensity(),
            rightPos, i = buttons.length - 1;

        rightPos = parseCss(touch._toolbar, 'width') - contextButtonLeft + gap;
        if (isVirtualScreen())
            rightPos += _screen.left;
        while (i >= 0) {
            btn = $(buttons[i]).css('right', rightPos);
            rightPos = rightPos + contextButtonWidth + gap;
            i--;
        }
    }
    function textOrHtml(field, t, elem, conditionalWrapping) {
        if (field.htmlEncode()) {
            if (field.TextMode == 3) {
                var lines = htmlEncode(t).split(/\r?\n/),
                    i, s;
                for (i = 0; i < lines.length; i++) {
                    s = lines[i],
                        m = s.match(/^\s+/);
                    if (m)
                        lines[i] = Array(m[0].length * 2).join('&nbsp;') + s.substring(m[0].length);
                }
                t = lines.join('<br/>');
                if (lines.length > 15) {
                    elem.html(div('app-text-collapsible')).children().html(t);
                    $span('ui-btn ui-btn-icon-notext ui-btn-inline ui-icon-carat-d ui-inline ui-corner-all app-btn-toggle').attr('data-title', labelMaximize).appendTo(elem);
                }
                else {
                    elem.html(t);
                    if (conditionalWrapping)
                        elem.css('white-space', 'nowrap');
                }
            }
            else
                elem.text(t);
        }
        else
            elem.html(t);
    }


    function hidePresenters(scrollable, extension, keepMap) {
        scrollable.find('> .app-map, > .app-presenter-instruction').hide();
        if (!keepMap)
            extension._mapPageWindow = null;
        touch.presenter('hide', { container: scrollable });
    }

    function enablePanelAnimation() {
        return true;
        //var enable = settings.pageTransition != 'none';
        //if (arguments.length == 0)
        //    return enable;
        //if (!enable)
        //    panel.removeClass('ui-panel-animate');
    }

    function appendMoreButton(dataView, link, frozen) {
        if (dataView._hasKey()) {
            var button = link.find('.app-btn-more');
            if (!button.length)
                button = $span('app-btn-more').appendTo(link);
            button.attr('title', labelMore);
            if (frozen)
                button.addClass('app-frozen');
        }
    }

    function advancedSearchFilter(dataView) {
        //var filter = [];
        //if (dataView && dataView.viewProp('useAdvancedSearch'))
        //    filter = dataView.viewProp('advancedSearchFilter') || filter;
        //return filter;
        var filter = [];
        if (dataView && dataView.asearch('active'))
            filter = dataView.asearch('filter');
        return filter;
    }

    function applyDataFilter(dataView) {
        resetInstruction(dataView);
        persistDataFilter(dataView);
        $(dataView._allFields).each(function () {
            delete this._listOfValues;
        });
        resetGridHeaderStyle(dataView);
        //dataView._requiresContextRefresh = true;
        var text = dataView.extension().filterStatus(true, false);
        touch.notify({ dataView: dataView, text: text || resourcesMobile.FilterCleared });
        dataView._forceSync();
        dataView.refreshData();
    }

    function clearDataFilter(dataView, keepAdvancedSearch) {
        if (!keepAdvancedSearch && advancedSearchFilter(dataView).length)
            //dataView.viewProp('advancedSearchFilter', null);
            dataView.asearch('filter', null);
        dataView.clearFilter(true);
        applyDataFilter(dataView);
    }

    function advancedFilterStatus(dataView) {
        var oldFilter = dataView._filter,
            advancedFilter = advancedSearchFilter(dataView),
            status;
        if (advancedFilter.length) {
            dataView._filter = [];
            status = dataView.extension().filterStatus(true);
            dataView._filter = oldFilter;
        }
        return status;
    }

    function persistDataFilter(dataView) {
        var filter = (dataView.get_filter() || []).slice(0),
            externalFields = [],
            expression, i = 0,
            searchingEvent = $.Event('searching.app', { dataView: dataView });
        $(dataView.get_externalFilter()).each(function () {
            externalFields.push(this.Name);
        });
        while (i < filter.length) {
            expression = filter[i];
            if (Array.indexOf(externalFields, expression.match(/^\w+/)[0]) !== -1)
                filter.splice(i, 1);
            else
                i++;
        }
        dataView.viewProp('filter', filter);

        $document.trigger(searchingEvent);
    }

    function menuStripIsVisible() {
        var menuStripInfo = touch._menuStrip;
        return menuStripInfo && menuStripInfo.strip.is(':visible');
    }

    function updateMenuStripState(visible) {
        var menuStripInfo = touch._menuStrip,
            menuStrip = menuStripInfo && menuStripInfo.strip;
        if (menuStrip) {
            if (!arguments.length)
                visible = menuStripIsVisible();
            if (visible) {
                if (!menuStrip.is(':visible')) {
                    if (_app.dragMan.active())
                        menuStrip.show();
                    else
                        menuStrip.fadeIn('fast');
                }
            }
            else {
                menuStrip.hide();
                touch.refreshTitleState();
            }
        }
    }

    function addListSeparator(list, withText) {
        if (list.length && list[list.length - 1].text)
            list.push(withText === false ? {} : { text: '$separator' });
    }

    function clearHtmlSelection(delay) {
        var result = true;
        if (delay)
            //setTimeout(function () {
            //    clearHtmlSelection();
            //}, 5);
            setTimeout(clearHtmlSelection, 5);
        else
            try {
                if (_window.getSelection) {
                    var range = _window.getSelection();
                    if (range && range.rangeCount > 0)
                        range.removeAllRanges();
                }
                else if (document.selection)
                    document.selection.empty();
            }
            catch (ex) {
                result = false;
            }
        return result;
    }

    function htmlSelection() {
        var range,
            result;
        if (document.selection && document.selection.createRange) {
            range = document.selection.createRange();
            result = range.htmlText;
        }
        else if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
                var clonedSelection = range.cloneContents();
                var div = document.createElement('div');
                div.appendChild(clonedSelection);
                result = div.innerHTML;
            }
        }
        return result;
    }

    function hideMenuStrip(enable) {
        var stripInfo = touch._menuStrip,
            strip = stripInfo && stripInfo.strip;
        if (strip) {
            strip.hide();
            if (arguments.length === 1)
                strip.attr('data-enabled', enable ? 'true' : 'false');
        }
    }

    function changeViewStyle(listview, viewStyle) {
        if (viewStyle === 'Cards')
            listview.addClass('app-cardview').removeClass('app-grid app-onecolumnview');
        else if (viewStyle === 'Grid')
            listview.addClass('app-grid').removeClass('app-cardview app-onecolumnview');
        else if (viewStyle === 'List')
            listview.addClass('app-onecolumnview').removeClass('app-cardview app-grid');
    }

    function changeViewStyleWithFeedback(dataViewId, viewStyle, keyValue) {
        var dataView = findDataView(dataViewId);
        resetInstruction(dataView);
        dataView.extension().viewStyle(viewStyle, keyValue);
        dataViewEchoChanged(dataViewId);
        refreshContext(true);
        refreshContext(false, 10);
    }

    function showPresenterInstruction(scrollable, extension) {
        if (!extension.instruction) return;
        var presenterInstruction = scrollable.find('> .app-presenter-instruction'),
            instruction = extension.instruction();
        if (!presenterInstruction.length)
            presenterInstruction = $div('app-presenter-instruction').appendTo(scrollable).hide();
        if (instruction) {
            presenterInstruction.show();
            presenterInstruction.html(instruction);
        }
        else
            presenterInstruction.hide();
        revealStickyHeaderInstruction();
        resetStickyHeaderInstruction(extension.dataView(), scrollable.closest('.ui-page'), false, true);
    }

    function resetStickyHeaderInstruction(dataView, page, isGrid, isPresenter) {
        // update heading
        getPageInfo(dataView).stickyHeader.hide();
        var that = dataView.extension(),
            gridHeader;
        if (!that._instructed && dataView._totalRowCount !== -1) {
            var instruction = that.instruction(),
                heading = stickyHeaderTemplate(page);
            if (instruction || isGrid) {
                heading.empty();
                that._instructed = true;
                if (!heading.length)
                    heading = $span('dv-heading').appendTo(page).hide();
                if (instruction)
                    $span('app-view-instruction').appendTo(heading).html(instruction.replace(/<a.*?<\/a>/gi, ''));
                heading.attr('data-selector', isPresenter ? '.app-presenter-instruction:visible' : 'ul.app-listview li.app-list-instruction');
                if (isGrid) {
                    gridHeader = createGridHeader(dataView, heading);
                    if (!instruction)
                        gridHeader.addClass('app-grid-header-no-description');
                }
                stickyHeader();
                if (isGrid || dataView.extension().viewStyle().match(/Cards|List/) && dataView.get_groupExpression())
                    $document.trigger($.Event('scrollstop.app', { relatedTarget: findScrollable(page)/*.find('.ui-content .app-wrapper')*/ }));
            }
            else
                heading.remove();
        }
    }

    function showPresenters(scrollable) {

        function doShow(presenter) {
            var name = presenter.attr('data-presenter'),
                dataView = isReadingPaneDetail() ? findDataView(scrollable.closest('.ui-page').attr('id')) : activeDataView(),
                id = dataView ? dataView._id : null,
                echo = presenter.closest('.app-echo');
            if (echo.length)
                id = echo.attr('data-for');
            if (id && presenter.css('display') !== 'none')
                touch.presenter('show', { name: name, id: id, container: scrollable || findScrollable(presenter) });
        }

        if (scrollable) {
            scrollable.find('div[data-role="presenter"]').each(function () {
                doShow($(this));
            });
            $('.ui-page:not(.ui-page-active) div[data-role="presenter"]').each(function () {
                var presenter = $(this);
                if (!presenter.closest('.app-echo-inner').length)
                    presenter.addClass('app-stale');
            });
        }
        else
            $('div[data-role="presenter"].app-stale').each(function () {
                var presenter = $(this);
                presenter.removeClass('app-stale');
                doShow(presenter);
            });
    }

    function resetMapHeight(wrapper) {
        wrapper.find('> .app-map').each(function () {
            var mapView = $(this),
                header = wrapper.find('> .app-page-header').filter(fnVisible),
                instruction = wrapper.find('> .app-presenter-instruction').filter(fnVisible),
                elementAbove = $(instruction.length && instruction || header.length && header),
                mapInfo = mapView.data('data-map');
            mapView.css('top', elementAbove.length ? elementAbove.position().top + elementAbove.outerHeight(true) : 0);
            if (mapView.is(':visible') && mapInfo) {
                var map = mapInfo.map,
                    center = map.getCenter();
                google.maps.event.trigger(map, "resize");
                map.setCenter(center);
            }
        });
    }

    //function resetInvisiblePageHeight(page) {
    //    var p = page[0];
    //    p.style.zIndex = -10;
    //    resetPageHeight(page);
    //    p.style.zIndex = '';
    //}

    function modalPageWidth() {
        var max = $settings('ui.modal.max'),
            w,
            sw = _screen.width,
            xxsw;
        if (max)
            w = Math.min(toPhysicalWidth(max), sw - 30);
        else {
            w = sw;// Math.max(sw, _screen.height * .85);
            xxsw = toPhysicalWidth('sm');
            w = w <= xxsw ? w - 30 : Math.max(xxsw, Math.ceil(w / 1.4));
            w = Math.min(w, toPhysicalWidth('md'));
            if (w > sw)
                w = sw < xxsw ? sw : sw - 30;
        }
        return w;
    }

    function modalPageHeight() {
        var sh = _screen.height,
            h = Math.max(768 / 2 - 30, _screen.width <= toPhysicalWidth('xxs') ? (sh - 30) : Math.ceil(sh * .8));
        if (h > sh - 30)
            h = sh - 30;
        return h;
    }

    function adjustFixedPageHeader(wrapper) {
        var fixedPageHeader = wrapper.prev();
        if (fixedPageHeader.is('.app-page-header-fixed')) {
            fixedPageHeader.css('top', parseCss(wrapper, 'top'));
            var headerHeight = fixedPageHeader.outerHeight();
            wrapper.data('header-height', headerHeight);
            var fixedPageImage = fixedPageHeader.prev();
            if (fixedPageImage.is('.app-page-header-image')) {
                fixedPageImage.css('height', '');
                fixedPageImage.css({ 'top': parseCss(wrapper, 'top'), height: fixedPageImage.height() + headerHeight });
            }
        }
    }

    function resetFillScreenElements(wrapper, wrapperHeight) {
        wrapper.find('> .app-presenter > [data-fill-screen="true"]').each(function () {
            var elem = $(this);
            elem.height(wrapperHeight - (elem.offset().top - wrapper.offset().top));
        });
    }

    function pageHeaderFilterFunc() {
        return $(this).is('.app-bar-header,.app-bar-actions,.app-tabs');
    }

    function resetPageHeight(p) {
        var activePage = findActivePage(),
            page = p || activePage,
            getPageRectEvent,
            pageRect;
        var
            isActive = page.attr('id') === activePage.attr('id') || page.is('.app-page-modal-root'),
            isModal = page.is('.app-page-modal'),
            //prototypePage = isActive ? page : activePage,
            toolbarHeight = _screen.toolbarHeight,
            pagePaddingTop = toolbarHeight,//prototypePage.css('padding-top'),
            pageWidth,
            pageMinHeight = _screen.height - toolbarHeight,//prototypePage[0].style.minHeight,//prototypePage.css('min-height'),
            pageContent = page.find('.ui-content'),
            tabs = pageContent.children().filter(pageHeaderFilterFunc),
            footers = pageContent.find('.app-bar-footer'),
            fixedTop = contentFramework && page.find(contentFramework.fixedTop.selector),
            fixedTopHeight = fixedTop && fixedTop.css('position') === 'fixed' && fixedTop.outerHeight(),
            fixedBottom = contentFramework && page.find(contentFramework.fixedBottom.selector),
            fixedBottomHeight = fixedBottom && fixedBottom.css('position') === 'fixed' && fixedBottom.outerHeight(),
            wrapperBottom = 0, isFullscreen,
            classAttr = page.attr('class'),
            pageInfo = getPageInfo(page.attr('id')),
            dataView = pageInfo && pageInfo.dataView,
            appBarsLeftWidth = appBars.left.width,
            readingPaneEnabled = _readingPane.enabled;
        if (appBarsLeftWidth)
            appBarsLeftWidth++; // there is a border
        if (isModal) {
            page.removeData('moved');
            var maxSize = classAttr.match(/\bapp-page-modal-max-(tn|xxs|xs|sm|md|lg|xl|xxl|any)\b/),
                dock = classAttr.match(/\bapp-page-modal-dock-(top|left|right|bottom)\b/),
                screenGap = _screen.width < 480 && dock || page.is('.app-page-modal-gap-none') ? 0 : 15,
                modalHeight = modalPageHeight(),
                modalWidth = modalPageWidth(),
                maxModalWidth = page.data('modalWidth') || (maxSize ? (dock ? toPhysicalWidth(maxSize[1]) : toMaxPhysicalWidth(maxSize[1])) : 0);
            if (dock)
                dock = dock[1];
            if (maxSize)
                modalWidth = Math.min(_screen.width - screenGap * 2, maxModalWidth);
            isFullscreen = classAttr.match(/\bapp-page-modal-fullscreen\b/);
            if (isFullscreen) {
                modalWidth = _screen.width - screenGap * 2;
                modalHeight = _screen.height - screenGap * 2;
            }
            var wrapper = findScrollable(page),//.find('.ui-content .app-wrapper'),
                tabsHeight = 0;

            var pageTop = (_screen.height - modalHeight) / 2,
                pageLeft = (_screen.width - modalWidth) / 2,
                pageRight, pageBottom;
            if (readingPaneEnabled && classAttr.match(/\bapp-reading-pane-detail\b/) && (_screen.splitLeft || _screen.splitBottom)) {
                if (_screen.splitLeft) {
                    pageTop = 0;
                    pageLeft = appBarsLeftWidth + _screen.splitLeft + _readingPane.divider;
                    modalWidth = _screen.splitRight;
                    modalHeight = _screen.height;
                }
                else {
                    // below
                    pageTop = _screen.toolbarHeight + _screen.splitTop + _readingPane.divider;
                    pageLeft = appBarsLeftWidth;
                    modalWidth = _screen.width - appBarsLeftWidth;
                    modalHeight = _screen.splitBottom;
                }
                page.toggleClass('app-reading-pane-detail-vertical', !_screen.splitLeft)
            }
            else if (dock) {
                if (dock === 'top') {
                    pageTop = _screen.width === modalWidth ? 0 : screenGap;
                    //if (_screen.height < 384)
                    //    modalHeight = _screen.height - 30;
                }
                else if (dock === 'left') {
                    pageLeft = screenGap;
                    if (!dataView || !dataView.tagged('modal-fit-content')) {
                        pageTop = screenGap;
                        pageBottom = screenGap;
                        modalHeight = _screen.height - screenGap * 2;
                    }
                }
                else if (dock === 'bottom') {
                    pageTop = 'auto';
                    pageBottom = screenGap;
                    //if (_screen.height < 384)
                    //    modalHeight = _screen.height - 30;
                }
                else if (dock === 'right') {
                    pageLeft = 'auto';
                    pageRight = screenGap;
                    if (!dataView || !dataView.tagged('modal-fit-content')) {
                        pageTop = screenGap;
                        pageBottom = screenGap;
                        modalHeight = _screen.height - screenGap * 2;
                    }
                }
            }
            if (isVirtualScreen()) {
                if (pageTop !== 'auto')
                    pageTop += _screen.top;
                if (pageLeft !== 'auto')
                    pageLeft += _screen.left;
                if (pageBottom != null && pageBottom !== 'auto')
                    pageBottom += _screen.bottom;
                if (pageRight != null && pageRight !== 'auto')
                    pageRight += _screen.right;
            }
            if (pageTop !== 'auto')
                pageTop = Math.round(pageTop);

            pageRect = { page: page, dataView: dataView, top: pageTop, right: pageRight, bottom: pageBottom, left: pageLeft, width: modalWidth, height: modalHeight };
            getPageRectEvent = $.Event('getpagerect.app', { rect: pageRect });
            $document.trigger(getPageRectEvent);
            modalWidth = pageRect.width;
            modalHeight = pageRect.height;

            page.css({
                'padding-top': 0,
                top: pageRect.top,
                left: pageRect.left,
                right: pageRect.right,
                bottom: pageRect.bottom,
                'min-width': modalWidth,
                'max-width': modalWidth,
                width: modalWidth,
                'min-height': modalHeight,
                'max-height': modalHeight,
                height: modalHeight
            });


            footerHeight = footers.length ? footers.outerHeight() : 0;
            tabs.each(function () {
                var bar = $(this);
                if (bar.css('display') !== 'none')
                    tabsHeight += bar.outerHeight(true);
            });
            var scrolling = wrapper.data('scrolling'),
                modalTitle = page.find('.app-page-modal-title');
            wrapper.data('scrolling', true);
            page.find('.app-bar-actions,.app-bar-footer,.app-bar-header').each(function () {
                var elem = $(this);
                elem.width(Math.round(modalWidth - parseCss(elem, 'padding-left') - parseCss(elem, 'padding-right')));
            });
            if (modalTitle.length)
                tabsHeight += modalTitle.outerHeight();

            var wrapperWidth = modalWidth + scrollbarInfo.width,
                wrapperHeight = modalHeight - footerHeight - tabsHeight;

            wrapper.css({
                top: tabsHeight,
                left: 0,
                'min-width': wrapperWidth,
                'max-width': wrapperWidth,
                width: wrapperWidth,
                'min-height': wrapperHeight,
                'max-height': wrapperHeight,
                height: wrapperHeight
            });
            resetFillScreenElements(wrapper, wrapperHeight);


            if (!isFullscreen && dataView && dataView.tagged('modal-fit-content') && !getPageRectEvent.isDefaultPrevented()) {
                var stub = wrapper.find('.app-stub'),
                    stubPos, newHeight, heightDelta;
                if (stub.length) {
                    stubPos = stub.position();
                    newHeight = Math.ceil(stubPos.top + stub.height() + wrapper.scrollTop() - (wrapper.find('.app-stub-keyboard').height() || 0));
                    heightDelta = /*wrapper.height()*/ (/*modalHeight*/ wrapper.height()/* - footerHeight - tabsHeight*/) - newHeight;
                    if (heightDelta > 0) {
                        wrapper.css({
                            'min-height': modalHeight - footerHeight - tabsHeight - heightDelta,
                            'max-height': modalHeight - footerHeight - tabsHeight - heightDelta,
                            height: modalHeight - footerHeight - tabsHeight - heightDelta
                        });
                        modalHeight -= heightDelta;
                        if (dock !== 'top' && dock !== 'bottom')
                            pageTop = _screen.top + (_screen.height - modalHeight) / 2;
                        page.css({
                            top: pageTop,
                            'min-height': modalHeight,
                            'max-height': modalHeight,
                            height: modalHeight
                        });
                    }
                }
                page.addClass('app-page-modal-fit-content');
            }
            adjustFixedPageHeader(wrapper);


            wrapper.data('vscrollbar').css({
                height: modalHeight - footerHeight - tabsHeight,
                right: 0,
                top: tabsHeight
            });
            resetMapHeight(wrapper);
            if (isActive)
                $app.display(wrapper);
            if (!scrolling)
                wrapper.data('scrolling', false);
        }
        else {

            page.css({ 'padding-top': pagePaddingTop/*, 'min-height': pageMinHeight */ });

            pagePaddingTop = parseCss(pagePaddingTop);
            if (isHosted && !toolbarIsVisible && page.attr('id') === 'Main') {
                pagePaddingTop = 0;
                pageMinHeight += toolbarHeight;
            }
            pageLeft = _screen.left + appBarsLeftWidth;
            pageWidth = _screen.width - appBarsLeftWidth;

            //  take into account the reading-pane-(auto|right|bottom) tag
            if (pageInfo && pageInfo.home && readingPaneEnabled && classAttr && classAttr.match(/\bapp-reading-pane-master\b/)) {
                var newToolbarWidth,
                    readingPaneIsBelow = _screen.portrait,
                    splitLeft, splitRight,
                    splitTop, splitBottom,
                    readingPaneDivider = _readingPane.divider,
                    readingPaneMinLeft = _readingPane.minLeft,
                    readingPaneMinRight = _readingPane.minRight,
                    readingPaneMinTop = _readingPane.minTop,
                    readingPaneMinBottom = _readingPane.minBottom,
                    effectivePageWidth = _screen.width - appBarsLeftWidth,
                    effectivePageHeight = _screen.height - toolbarHeight,
                    verticalSplitChanged,
                    readingPaneSplitter = _readingPane.splitter,
                    readingPaneBackground = _readingPane.bkg;
                if (readingPaneIsBelow) {
                    splitTop = pageVariable('splitTop');
                    splitBottom = splitTop ? effectivePageHeight - splitTop - readingPaneDivider : splitBottom = Math.ceil(effectivePageHeight * .618);
                    if (effectivePageHeight - readingPaneDivider - splitBottom < readingPaneMinTop || effectivePageHeight - readingPaneDivider - splitTop < readingPaneMinBottom)
                        splitBottom = effectivePageHeight - readingPaneDivider - readingPaneMinTop;
                    if (effectivePageHeight - _readingPane.minTop - readingPaneDivider >= readingPaneMinBottom) {
                        // setup vertical reading pane
                        if (splitBottom >= readingPaneMinBottom) {
                            pageMinHeight = splitTop = effectivePageHeight - splitBottom - readingPaneDivider;
                            verticalSplitChanged = true;
                        }
                    }
                }
                else {
                    splitLeft = pageVariable('splitLeft');
                    splitRight = splitLeft ? effectivePageWidth - splitLeft - readingPaneDivider : Math.ceil(effectivePageWidth * .618);
                    if (effectivePageWidth - readingPaneDivider - splitRight < readingPaneMinLeft)
                        splitRight = effectivePageWidth - readingPaneDivider - readingPaneMinLeft;
                    else if (effectivePageWidth - readingPaneDivider - splitLeft < readingPaneMinRight)
                        splitRight = readingPaneMinRight;
                    if (effectivePageWidth - readingPaneMinLeft - readingPaneDivider >= readingPaneMinRight) {
                        // setup horizontal reading pane
                        if (splitRight >= readingPaneMinRight) {
                            pageWidth = splitLeft = effectivePageWidth - splitRight - readingPaneDivider;
                            newToolbarWidth = splitLeft + appBarsLeftWidth;
                        }
                    }
                }
                if (splitLeft !== _screen.splitLeft || splitRight !== _screen.splitRight || splitTop !== _screen.splitTop || splitBottom !== _screen.splitBottom) {
                    _screen.toolbarWidth = newToolbarWidth;
                    if (newToolbarWidth && _screen.splitLeft != null & _screen.splitLeft != splitLeft)
                        _screen.toolbarWidthChanged = true;
                    _screen.splitLeft = newToolbarWidth ? splitLeft : null;
                    _screen.splitRight = newToolbarWidth ? splitRight : null;
                    _screen.splitTop = verticalSplitChanged ? splitTop : null;
                    _screen.splitBottom = verticalSplitChanged ? splitBottom : null;
                    screenChanged_toolbar({});
                    if (newToolbarWidth || verticalSplitChanged) {
                        if (isReadingPaneDetail() && findActivePage().is('.app-hidden'))
                            findActivePage().removeClass('app-hidden');
                        if (!readingPaneSplitter)
                            readingPaneSplitter = _readingPane.splitter = $span('app-reading-pane-splitter', 'data-draggable="reading-pane"');
                        readingPaneSplitter.insertAfter(page).show().toggleClass('app-bottom', verticalSplitChanged != null);
                        if (newToolbarWidth)
                            readingPaneSplitter.css({
                                left: pageLeft + pageWidth,
                                top: _screen.top,
                                height: pageMinHeight + _screen.toolbarHeight,
                                width: ''
                            });
                        else
                            readingPaneSplitter.css({
                                left: pageLeft,
                                top: _screen.top + toolbarHeight + splitTop,
                                width: pageWidth,
                                height: ''
                            });
                        if (typeof readingPaneBackground != 'object') {
                            var readingPaneBackgroundImageUrl;
                            if (typeof readingPaneBackground == 'string') {
                                readingPaneBackgroundImageUrl = _app.resolveClientUrl(readingPaneBackground);
                                if (!readingPaneBackground.match(/\(/))
                                    readingPaneBackgroundImageUrl = 'url(' + readingPaneBackgroundImageUrl + ')';
                            }
                            else
                                readingPaneBackgroundImageUrl = readingPaneBackground || readingPaneBackground == null ? '' : 'none';
                            readingPaneBackground = _readingPane.bkg = $span('app-reading-pane-bkg').css('background-image', readingPaneBackgroundImageUrl);
                            readingPaneBackground.insertAfter(page).show();
                        }
                        if (newToolbarWidth)
                            readingPaneBackground.css({
                                left: pageLeft + pageWidth,
                                top: _screen.top,
                                height: pageMinHeight + _screen.toolbarHeight,
                                width: readingPaneDivider + splitRight,
                                display: ''
                            });
                        else
                            readingPaneBackground.css({
                                left: pageLeft,
                                top: _screen.top + toolbarHeight + splitTop,
                                width: pageWidth,
                                height: readingPaneDivider + splitBottom,
                                display: ''
                            });
                    }
                }
                if (!(newToolbarWidth || verticalSplitChanged)) {
                    if (readingPaneSplitter) {
                        readingPaneSplitter.hide();
                        $('.app-reading-pane-detail').addClass('app-hidden');
                    }
                    if (typeof readingPaneBackground == 'object')
                        readingPaneBackground.hide();

                }
            }

            page.css({
                left: pageLeft,
                width: pageWidth,
                top: _screen.top,
                //paddingTop: pagePaddingTop + _screen.top,
                minHeight: _screen.splitTop || pageMinHeight
            });
            findScrollable(page)/*.find('.ui-content .app-wrapper')*/.each(function () {
                var wrapper = $(this),
                    tabsHeight = 0; // tabs.length ? tabs.outerHeight(true) : 0;
                var scrolling = wrapper.data('scrolling');
                wrapper.data('scrolling', true);

                tabs.each(function () {
                    var bar = $(this);
                    if (bar.css('display') !== 'none')
                        tabsHeight += bar.outerHeight(true);
                });
                footers.each(function () {
                    var bar = $(this);
                    if (bar.css('display') !== 'none')
                        wrapperBottom += bar.outerHeight(true);
                });
                if (tabsHeight) {
                    pageMinHeight = pageMinHeight - tabsHeight;
                    pagePaddingTop = pagePaddingTop + tabsHeight;
                }
                if (fixedTopHeight) {
                    pageMinHeight -= fixedTopHeight;
                    pagePaddingTop += fixedTopHeight;
                }
                if (fixedBottomHeight) {
                    pageMinHeight -= fixedBottomHeight;
                    wrapperBottom += fixedBottomHeight;
                }
                if (wrapperBottom)
                    wrapperBottom -= 2;

                var wrapperHeight = pageMinHeight - wrapperBottom;

                wrapper.css({ 'top': pagePaddingTop, bottom: wrapperBottom, 'min-height': wrapperHeight });
                resetFillScreenElements(wrapper, wrapperHeight);
                if (isActive)
                    wrapper.css({ 'height': wrapperHeight });
                if (scrollbarInfo.width)
                    wrapper.css('width', '').width(wrapper.width() + scrollbarInfo.width);


                // update the vscrollbar of the wrapper
                $(wrapper.data('vscrollbar')).css({
                    height: pageMinHeight - wrapperBottom,
                    right: 1,
                    top: pagePaddingTop
                });

                adjustFixedPageHeader(wrapper);

                resetMapHeight(wrapper);
                if (isActive)
                    $app.display(wrapper);
                if (!scrolling)
                    wrapper.data('scrolling', false);
            });
        }
        if (isTouchPointer)
            $body.scrollTop(0);
        if (page.data('trackPosition'))
            $document.trigger($.Event('pagepositionchanged.app', { page: page }));
    }


    function findCookieValue(name) {
        var cookies = document.cookie.split(';'), i, c;
        for (i in cookies) {
            c = cookies[i].trim();
            if (c.startsWith(name + '='))
                return c.substring(name.length + 1);
        }
    }

    function initTouchUI() {
        //settings = __settings;
        var
            highDisplayDensity = $settings('ui.displayDensity.mobile')/* settings.mobileDisplayDensity*/,
            lowDisplayDensity = $settings('ui.displayDensity.desktop')/*settings.desktopDisplayDensity*/,
            sysBrowser = _msSys.Browser,
            futureDate,
            expires,
            cookie,
            pageHeaderParent = $('#PageHeader').parent(),
            //pageTheme,// = $body.attr('data-theme') || (pageHeaderParent.attr('class') || '').match(/\bpage-theme-(\w+)\b/i),
            cookieTheme,
            firstContentPage = $('div[data-content-framework]').first(),
            //buttonShapes = userVariable('buttonShapes'),
            promoteActions = userVariable('promoteActions'),
            smartDates = userVariable('smartDates'),
            inputFocusStyle = $settings('ui.input.focus.style') || 'underline',
            bodyClasses = ($body.attr('class') || '').split(/\s+/),
            classIndex = 0,
            worker = appBaseUrl + 'worker.js';

        if ('serviceWorker' in navigator)
            navigator.serviceWorker.getRegistrations().then(function (list) {
                var swReg;
                for (var i = 0; i < list.length; i++) {
                    var reg = list[i];
                    if (reg.active && (reg.active.scriptURL === location.origin + worker)) {
                        swReg = reg;
                        break;
                    }
                };
                if (settings.client.enabled) {
                    if (!settings.state)
                        if (swReg) {
                            // update registration when needed
                        }
                        else
                            navigator.serviceWorker.register(worker);
                }
                else if (swReg) {
                    swReg.unregister();
                }
            });

        while (classIndex < bodyClasses.length)
            if (iconIsMaterial(bodyClasses[classIndex]))
                bodyClasses.splice(classIndex, 1);
            else
                classIndex++;

        if (isTouchPointer)
            bodyClasses.push('app-touch')
        else if (!forceTouchPointerCheck/* && $settings('ui.showSystemButtons') !== 'Always'*/)
            bodyClasses.push('app-desktop');


        // find theme cookie
        var user = settings.appInfo.split('|')[1],
            cookieThemeValue = findCookieValue('.COTTHEME' + user);
        if (cookieThemeValue) {
            var vs = cookieThemeValue.split('.');
            if (vs.length > 1)
                cookieTheme = { theme: vs[0], accent: vs[1] };

        }

        if (!pageHeaderParent.length)
            pageHeaderParent = $body;

        function validateSidebar(value) {
            if (value)
                value = value.match(/Landscape|Always|Never/);
            return value ? value[0] : 'Landscape';
        }

        //settings.mapApiIdentifier = settings.mapApiIdentifier;
        $settings('membership.profile', $settings('membership.profile') || 'view switch login logout');
        $settings('ui.transitions.style', userVariable('transitions') || $settings('ui.transitions.style') || 'slide'/*(android || chrome || scrollbarInfo.width > 0 || highScreenDPI() || $app.host || (mobile.returnUrl() || '').indexOf('/_invoke/getidentity') != -1 ? 'slide' : 'none')*/);
        touch._uiSideBarWhen = isKioskPage ? 'Never' : userVariable('sidebar') || validateSidebar($settings('ui.sidebar.when'));
        $settings('ui.sidebar.when', touch._uiSideBarWhen || (sidebarIsAllowed() ? 'Always' : 'Landscape'));
        var userMiniSideBar = userVariable('minisidebar');
        $settings('ui.sidebar.mini', userMiniSideBar != null ? userMiniSideBar : $settingsEnabled('ui.sidebar.mini') || $settings('ui.sidebar.mini') == null && _screen.width <= toPhysicalWidth('lg'));
        $settings('ui.menu.location', isHosted ? 'toolbar' : $settings('ui.menu.location') ? $settings('ui.menu.location') : 'toolbar');
        settings.bars = { left: { visible: false, width: 0, content: [] }, bottom: { visible: false, height: 0, content: [] }, right: { visible: false, width: 0, content: [] } };
        $settings('ui.theme.name', userVariable('theme') || cookieTheme && cookieTheme.theme || $settings('ui.theme.name'));
        $settings('ui.theme.accent', userVariable('accent') || cookieTheme && cookieTheme.accent || $settings('ui.theme.accent'));
        $settings('ui.displayDensity.value', userVariable('displayDensity') ||
            (screenDPI < 144 ? lowDisplayDensity || 'Condensed' :
                (highDisplayDensity === 'Auto' ? 'Compact'/*(Math.min(screen.availHeight, screen.availWidth) <= toPhysicalWidth('sm') ? 'Comfortable' : 'Compact')*/ : highDisplayDensity)));
        //labelsInForm: userVariable('labelsInForm') || settings.labelsInForm,
        $settings('ui.list.labels.display', userVariable('labelsInList') || $settings('ui.list.labels.display')),
            $settings('ui.showSystemButtons', userVariable('showSystemButtons') || $settings('ui.showSystemButtons') || 'Auto');
        //buttonShapes: buttonShapes != null ? buttonShapes : settings.buttonShapes
        $settings('ui.actions.promote', appStudio() ? false : promoteActions != null ? promoteActions : $settings('ui.actions.promote'));
        menuAutoExpand = $settings('ui.menu.autoExpand') || 'current';
        $settings('ui.list.initialMode', isHosted ?
            'Summary' :
            userVariable('initialListMode') || $settings('ui.list.initialMode') || 'SeeAll');
        $settings('ui.smartDates', smartDates != null ? smartDates : $settings('ui.smartDates') === true);
        var wideScrollbars = $settings('ui.scrollbars.wide');
        if (wideScrollbars)
            bodyClasses.push('app-scrollbars-wide');
        dataViewHistory = $settings('ui.history.dataView') || 'search filter sort group';
        autoCompleteMaxRowCount = $settings('ui.autoCompleteMaxRowCount') || 1000;
        multiSelectMaxRowCount = $settings('ui.multiSelectMaxRowCount') || 1000;

        if ($settings('barcode.enabled') === true) {
            barcode.enabled = true;
            barcode.enter = $settings('barcode.enter') || ['Enter'];
            barcode.override = $settingsEnabled('barcode.override');
            barcode.inputSpeed = $settings('barcode.inputSpeed') || 30;
            barcode.slowInputSpeed = $settings('barcode.slowInputSpeed') || 100;
            barcode.inventorySpeed = $settings('barcode.inventorySpeed') || 500;
            barcode.frequency = $settings('barcode.frequency') || 100;
            barcode.ignore = new RegExp($settings('barcode.ignore') || 'total.+?\\d+', 'i');
            //barcode.prefix = $settings('barcode.prefix');
            //barcode.suffix = $settings('barcode.suffix') || ['Enter'];
        }

        appBars = settings.bars;

        if (sysBrowser.agent == sysBrowser.InternetExplorer && sysBrowser.version <= 9/* && !(__settings.host || window.external)*/) {
            $body.hide();
            if (settings.defaultUI) {
                futureDate = new Date().getDate() + 365,
                    expires = new Date();
                expires.setDate(futureDate);
                cookie = String.format('appfactorytouchui=false; expires={0}; path=/', expires.toUTCString());
                document.cookie = cookie;
                location.reload($touch.path.parseUrl(location.href).hrefNoHash);
            }
            else
                alert(resourcesMobile.TouchUINotSupported);
        }

        //$body.addCass('app-compact-forms');

        //if (iOS) {
        //    $body.addClass('app-ios');
        //    //if (iOSMajorVersion < 8)
        //    //    $body.addClass('app-ios7');
        //    document.addEventListener('touchmove', function (e) {
        //        if ($(e.target).closest(disableTouchMoveSelector).length)
        //            e.preventDefault();
        //    }, { passive: false });
        //}
        if (iOS)
            bodyClasses.push('app-ios');
        if (android || chromeOS)
            bodyClasses.push('app-android');

        //if (/*_app.host ||*/ $settings('ui.native'))
        //    bodyClasses.push('app-native');

        //if (settings.buttonShapes == false)
        //    $body.addClass('app-buttons-text-only');

        if ($settings('ui.showSystemButtons') !== 'Always')
            bodyClasses.push('app-show-system-buttons-on-hover');

        if (inputFocusStyle !== 'none')
            bodyClasses.push('app-input-focus-' + inputFocusStyle);

        if ($settings('ui.input.focus.label') === true)
            bodyClasses.push('app-input-focus-label');

        //$('<link href="http://fonts.googleapis.com/css?family=Roboto" rel="stylesheet" type="text/css">').appendTo($('head'));
        if (oauth2Request || deviceRequest) {
            $settings('ui.menu.tabbar', false);
            $settings('ui.menu.location', 'none');
        }
        if (pageHeaderParent.is('.Tall'))
            bodyClasses.push('app-page-header-hidden');
        if (pageHeaderParent.is('.Wide') ||
            $settings('ui.menu.location') !== 'sidebar' && (firstContentPage.length && firstContentPage.attr('data-sidebar') !== 'true') ||
            !firstContentPage.length && $('div[data-app-role="page"]').first().attr('data-sidebar') === 'false' ||
            oauth2Request || deviceRequest) {
            $settings('ui.sidebar.when', 'Never');
            $settings('settings.options.sidebar', false);
        }

        if (isHosted) {

            if (!location.href.match(/_showNavigation=false/)) {
                bodyClasses.push('app-hosted-show-navigation');
                toolbarIsVisible = true;
                touch._toolbar.css('visibility', '');
            }
            if (location.hash) {
                $body.children().hide();
                location.reload(location.pathname + location.search);
                return;
            }
            bodyClasses.push('app-hosted');
        }

        $document.trigger('init.app');

        //$touch.defaultPageTransition = 'none';//settings.pageTransition;
        // configure left, right, and bottom panels
        if ($settingsEnabled('ui.sidebar.mini'))
            appBars.left.mini = true;

        var sidebar = $('<div id="app-sidebar" class="ui-panel ui-panel-fixed app-sidebar app-sidebar-left app-sidebar"><div class="ui-panel-inner app-has-scrollbars" tabindex="0"><ul/></div><div class="app-bar-toolbar-bottom"></div></div>').appendTo($body),
            inner = sidebar.find('.ui-panel-inner');
        sidebar.toggleClass('app-sidebar-menu', $settings('ui.menu.location') === 'sidebar');
        appBars.left.defaultWidth = userVariable('sidebar.width') || touch.sidebar('defaultWidth');

        screenChanged_sidebar({ sidebar: sidebar });

        if (scrollbarInfo.width)
            inner.css({ 'overflow-y': 'scroll', width: sidebar.width() - parseCss(inner, 'padding-left') - parseCss(inner, 'padding-right') + scrollbarInfo.width });
        appBars.left.inner = inner;
        appBars.left.toolbar = inner.next();
        appBars.left.content.push(sidebar.find('ul').listview());
        sidebar = $('<div class="ui-panel ui-panel-fixed app-sidebar app-sidebar-right"><div class="ui-panel-inner" tabindex="0"><ul></ul></div></div>').appendTo($body);
        inner = sidebar.find('.ui-panel-inner');
        //if (scrollbarInfo.width)
        //    inner.css({ 'overflow-y': 'scroll', width: sidebar.width() - parseCss(inner, 'padding-left') - parseCss(inner, 'padding-right') + scrollbarInfo.width });
        appBars.right.inner = inner;
        appBars.right.content.push(sidebar.find('ul').listview());


        //if (!$settings('ui.displayDensity.value'))
        //    $settings('ui.displayDensity.value', 'Compact'/* isTouchPointer ? 'Comfortable' : 'Compact'*/);

        bodyClasses.push(themeToClass($settings('ui.theme.name')));
        bodyClasses.push('app-accent-' + $settings('ui.theme.accent'));
        bodyClasses.push(displayDensityToClass($settings('ui.displayDensity.value')));
        //if (settings.labelsInForm == 'AlignedRight')
        //    $body.addClass('app-labelsinform-alignedright');
        if ($settings('ui.list.labels.display') === 'DisplayedAbove')
            bodyClasses.push('app-labelsinlist-displayedabove');

        $body.attr('class', bodyClasses.join(' '));

        updateSidebarVisibility();

        $document.trigger('starting.app');
    }

    function fitTabs(page) {
        touch.tabs('fit', { page: page });
    }

    function restoreScrolling(page) {
        page = $(page);
        findScrollable(page)/*.find('.ui-content .app-wrapper')*/.each(function () {
            var wrapper = $(this),
                scrollTop = wrapper.data('scroll-top');
            //if (scrollTop && wrapper.scrollTop() != scrollTop)
            //    scrollWrapper(wrapper, scrollTop);
        });
        page.find('.app-echo-inner').each(function () {
            var wrapper = $(this),
                scrollLeft = wrapper.data('scroll-left');
            if (wrapper.parent().is(':visible') && scrollLeft && wrapper.scrollLeft() != scrollLeft) {
                wrapper.scrollLeft(scrollLeft);
            }
        });
    }

    function saveScrolling(page) {
        page = $(page);
        if (page.is(':visible'))
            page.find('.app-echo-inner').each(function () {
                var wrapper = $(this);
                if (wrapper.parent().is(':visible'))
                    wrapper.data('scroll-left', wrapper.scrollLeft());
            });
    }

    function getScrollInfo(wrapper) {
        var scrollTop = wrapper.scrollTop();
        return { top: scrollTop * -1, height: wrapper.height() + scrollTop, maxHeight: wrapper[0].scrollHeight };
    }

    //var scrollList = [];

    function registerPanelScroller(panel) {
        var wrapper = panel.find('.ui-panel-inner'),
            scrolling, lastScrollTop, lastCheck;

        function checkScrollStop() {
            var scrollTop = wrapper.scrollTop(),
                scrollChanged = scrollTop !== lastScrollTop;
            if (scrollChanged || timeNow() - lastCheck < 100) {
                lastScrollTop = scrollTop;
                //scrollList.push(scrollTop);
                if (scrollChanged)
                    lastCheck = timeNow();
                requestAnimationFrame(checkScrollStop);
            }
            else {
                //clearInterval(scrollInterval);
                scrolling = false;
                tapping();
                wrapper.data('scroll-stop-time', new Date());
                // alert(scrollList.toString());
            }
        }

        if (wrapper.length) {
            wrapper.on('scroll keydown keyup', function () {
                if (isInTransition || !isTouchPointer)
                    return;
                if (!scrolling) {
                    scrolling = true;
                    lastScrollTop = wrapper.scrollTop();
                    //scrollList = [lastScrollTop];

                    tapping(false);
                    lastCheck = timeNow();


                    /*scrollInterval =*/ requestAnimationFrame(checkScrollStop);
                }
            });
        }
    }

    function unRegisterPanelScroller(panel) {
        panel.find('.ui-panel-inner').off('scroll keydown keyup');
    }

    function updateScrollbars(container, delayed) {
        if (!container)
            container = findScrollable();
        updateVScrollbar(container, false, delayed === true);
        container.find('.app-data-list').each(function () {
            updateHScrollbar($(this));
        });
        findPage(container).find('.app-hscrollbar2[data-view]').each(function () {
            var scrollbar = $(this),
                dataView = findDataView(scrollbar.attr('data-view'));
            if (dataView.session('scroll-left') && scrollbar.width() >= dataView.session('grid-avail-width'))
                touch.scrollGrid(dataView, 0);
            updateHScrollbarOfGrid(dataView, scrollbar.find('.app-hscrollbar-handle'));
        });
    }

    function updateHScrollbar(container, scrollbarHandle) {
        //if (container.length)
        //    if (!scrollbarHandle) {
        //        scrollbarHandle = container;
        //        if (container.parent().attr('class').match(/\-outer/))
        //            scrollbarHandle = container.parent();
        //        scrollbarHandle = scrollbarHandle.next().find('.app-hscrollbar-handle');
        //    }
        var scrollLeft = container.scrollLeft();

        var width = container.width(),
            scrollWidth = container[0].scrollWidth,
            ratio = Math.abs(width - scrollWidth) <= 2 ? 1 : width / scrollWidth;
        //scrollbarHandle.parent().css('visibility', ratio === 1 ? 'hidden' : '');
        if (ratio === 1 || container.find('.app-hidden').length) {
            //scrollbarHandle.css('display', 'none');
            container.removeClass('app-inner-shadow-left app-inner-shadow-right app-inner-shadow-left-right');
        }
        else {
            if (scrollLeft <= 0)
                container.addClass('app-inner-shadow-right').removeClass('app-inner-shadow-left app-inner-shadow-left-right');
            else if (scrollLeft >= container[0].scrollWidth - container[0].clientWidth - 1)
                container.addClass('app-inner-shadow-left').removeClass('app-inner-shadow-right app-inner-shadow-left-right');
            else
                container.addClass('app-inner-shadow-left-right').removeClass('app-inner-shadow-right app-inner-shadow-left');
            //    scrollbarHandle.css({
            //        left: scrollLeft * ratio,
            //        width: width * ratio,
            //        display: ''
            //    });
        }
    }

    function updateHScrollbarOfGrid(dataView, scrollbarHandle) {
        var isSummary = dataView.sessionShared('isSummary'),
            width,
            //frozenWidth = dataView.session('grid-frozen-width'),
            scrollLeft = dataView.session('scroll-left') || 0,
            scrollWidth = dataView.session('grid-avail-width'),
            ratio, echo, scrollbar;
        if (!isSummary)
            scrollbarHandle = $('#' + dataView._id + ' .app-bar-footer .app-hscrollbar-handle');
        // locate the scrollbar
        if (!scrollbarHandle) {
            echo = findEcho(dataView);
            scrollbarHandle = echo.find('.app-hscrollbar-handle');
        }
        scrollbar = scrollbarHandle.parent();
        // update user interface
        width = scrollbar.width();
        ratio = Math.abs(width - scrollWidth) <= 2 ? 1 : width / scrollWidth;
        if (ratio < 1)
            scrollbarHandle.css({
                left: scrollLeft * ratio,
                width: width * ratio
            });
        if (isSummary)
            scrollbar.css('visibility', ratio >= 1 ? 'hidden' : '');
        else {
            var display = scrollbar.css('display'),
                newDisplay = ratio >= 1 ? 'none' : 'block',
                parentBar = scrollbar.parent(), footer,
                prevBar, nextBar;
            if (display !== newDisplay) {
                scrollbar.css('display', newDisplay);
                touch.bar(newDisplay === 'block' ? 'show' : 'hide', parentBar);
            }
            footer = parentBar.parent();
            if (!footer.data('hsbInit')) {
                footer.data('hsbInit', true);
                prevBar = parentBar.prev();
                nextBar = parentBar.next();
                footer.toggleClass('app-bar-footer-flat', newDisplay === 'block' && !prevBar.length && dataView.extension().viewStyle() === 'Grid');
                footer.toggleClass('app-bar-footer-scrollbar', newDisplay === 'block' && !prevBar.length && !nextBar.length);
            }
        }
    }


    function updateVScrollbar(wrapper, vscrollbarHandle, delayed) {
        if (wrapper.length)
            if (delayed) {
                clearTimeout(_window._updateVScrollbarTimeout);
                //_window._updateVScrollbarTimeout = setTimeout(function () {
                //    updateVScrollbar(wrapper, vscrollbarHandle);
                //}, 100);
                _window._updateVScrollbarTimeout = setTimeout(updateVScrollbar, 100, wrapper, vscrollbarHandle);
            }
            else {
                if (!vscrollbarHandle)
                    vscrollbarHandle = wrapper.next().find('.app-vscrollbar-handle');
                var scrollHeight = wrapper[0].scrollHeight,
                    wrapperHeight = wrapper.height(),
                    ratio = scrollHeight && wrapper.css('overflow-y') !== 'hidden' ? Math.ceil(wrapperHeight) / scrollHeight : 1,
                    vscrollbar = vscrollbarHandle.parent(),
                    page = wrapper.parent().parent();
                footer = vscrollbar.next();
                vscrollbar.css('visibility', ratio >= 1 ? 'hidden' : '');
                if (ratio === 1) {
                    vscrollbarHandle.css('display', 'none');
                    footer.addClass('app-bar-footer-no-scrolling');
                    page.removeClass('app-page-scrolled');
                    if (page.is('#Main'))
                        touch._toolbar.removeClass('app-page-scrolled');
                }
                else {
                    //requestAnimationFrame(function () {
                    var scrollTop = wrapper.scrollTop(),
                        h = wrapperHeight * ratio,
                        topAdjustment = 0;
                    if (h < 16) {
                        h = 16;
                    }
                    vscrollbarHandle.css({
                        top: scrollTop * ratio - topAdjustment,
                        //transform: 'translate3d(0,' + wrapper.scrollTop() * ratio + 'px,0)',
                        height: h,
                        display: ''
                    });
                    footer.toggleClass('app-bar-footer-no-scrolling', scrollHeight <= scrollTop + wrapperHeight);
                    var hh = wrapper.data('header-height'),
                        scrolled = scrollTop > (hh || 50);
                    page.toggleClass('app-page-scrolled', scrolled);
                    if (page.is('#Main'))
                        touch._toolbar.toggleClass('app-page-scrolled', scrolled);
                    //  });
                }
            }
    }

    function createScroller(page, handleScrollingEvents) {
        var wrapper = findScrollable(page),
            vscrollbar, vscrollbarHandle,
            content, children,
            scrolling, lastScrollTop, timeCheck;

        function notifyScrollDirChange() {
            lastScrollTop = wrapper.data('lastScrollTop');
            if (lastScrollTop == null)
                lastScrollTop = 0;
            var lastDirection = wrapper.data('scroll-dir'),
                scrollTop = wrapper.scrollTop(),
                newDirection = scrollTop < lastScrollTop ? 'up' : (scrollTop == lastScrollTop ? 'none' : 'down');
            if (newDirection === 'none' && lastDirection === 'none')
                newDirection = 'up';
            if (newDirection !== lastDirection) {
                wrapper.data('scroll-dir', newDirection);
                $document.trigger($.Event('scrolldir.app', { relatedTarget: wrapper }));
            }
        }

        function checkScrollStop() {
            var scrollTop = wrapper.scrollTop(),
                scrollChanged = scrollTop != lastScrollTop,
                now = timeNow();

            if (scrollChanged || now - timeCheck < 100) {
                lastScrollTop = scrollTop;
                if (scrollChanged)
                    timeCheck = now;
                requestAnimationFrame(checkScrollStop);
            }
            else {
                clearInterval(wrapper.data('scrollInterval'));
                notifyScrollDirChange();
                scrolling = false;
                tapping();
                wrapper.data({ 'scroll-stop-time': new Date(), 'lastScrollTop': scrollTop, scrollInterval: null });
                vscrollbar.removeClass('app-scrollbar-reveal');
                $document.trigger($.Event('scrollstop.app', { relatedTarget: wrapper }));
            }
        }


        if (!wrapper.length) {
            content = page.find('.ui-content');
            children = content.contents();
            wrapper = $div('app-wrapper').appendTo(content);//.addClass('app-has-scrollbars');
            if (scrollbarInfo.width)
                wrapper.css('overflow-y', 'scroll');
            var windowWidth = _screen.width;
            wrapper.toggleClass('app-display-tablet', windowWidth >= toPhysicalWidth('sm') + (appBars.left.visible ? appBars.left.width : 0));

            vscrollbar = $div('app-vscrollbar').insertAfter(wrapper);
            vscrollbarHandle = $div('app-vscrollbar-handle', 'data-draggable="vscrollbar"').appendTo(vscrollbar);
            wrapper.data({ 'vscrollbar': vscrollbar, 'vscrollbar-handle': vscrollbarHandle });
            updateVScrollbar(wrapper, vscrollbarHandle);

            enhanceScrolling(wrapper, false);

            var pageInfo = touch.pageInfo(page);
            if (pageInfo && pageInfo.external)
                vscrollbar.css('display', 'none');

            if (handleScrollingEvents === false)
                wrapper.on('scroll', function (event) {
                    updateVScrollbar(wrapper, vscrollbarHandle);
                });
            else
                wrapper.on('scroll', function (event) {

                    if (isInTransition || wrapper.data('scrolling')) {
                        clearInterval(wrapper.data('scrollInterval'));
                        wrapper.data('lastScrollTop', wrapper.scrollTop());
                        scrolling = false;
                        tapping();
                        return;
                    }

                    updateVScrollbar(wrapper, vscrollbarHandle);

                    if (!scrolling) {
                        scrolling = true;

                        hideTooltip();
                        $document.trigger($.Event('scrollstart.app', { relatedTarget: wrapper }));
                        tapping(false);
                        vscrollbar.addClass('app-scrollbar-reveal');

                        timeCheck = timeNow();

                        requestAnimationFrame(checkScrollStop);
                    }
                    else
                        notifyScrollDirChange();
                });
            if (!isTouchPointer)
                wrapper.attr('tabindex', 0);
            var headerAndDivider = $('<div class="app-page-header"><h2></h2><h1></h1></div><div class="app-page-header-divider"></div>');
            if (wrapper.closest('[data-page-header="false"]').length)
                headerAndDivider.hide();
            headerAndDivider.appendTo(wrapper);
            children.appendTo(wrapper);
            if (intersectionObserver)
                wrapper.data('observer', new intersectionObserver(intersectionWasObserved, { root: wrapper[0]/*, rootMargin: '0px', threshhold: 0*/ }));

        }
        return wrapper;
    }

    function intersectionWasObserved(entries, observer) {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                var target = entry.target,
                    elem = $(target),
                    key = elem.attr('data-observe'),
                    src = elem.attr('data-src');
                if (src) {
                    elem.attr({ 'src': src, 'data-src': null, 'data-observe': null });
                    _observed[src] = elem[0].src;
                }
                observer.unobserve(target);
                delete observedIntersections[key];
            }
        });
    }

    function observe(enabled, container) {
        if (!container)
            container = findScrollable();
        if (container.length > 1)
            container.each(function () {
                observe(enabled, $(this));
            });
        else {
            var entries,
                scrollable,
                observer;

            entries = container.find('[data-observe' + (enabled ? '="true"' : '') + ']');
            if (entries.length) {
                var scrollable = findScrollable(container),
                    observer = scrollable.data('observer');
                if (observer)
                    if (enabled)
                        entries.each(function () {
                            var that = this,
                                elem = $(that),
                                src = elem.attr('data-src');
                            if (src && _observed[src])
                                elem.attr({ 'src': src, 'data-observe': null });
                            else {
                                observer.observe(that);
                                elem.attr('data-observe', intersectionObservationCount);
                                observedIntersections[intersectionObservationCount++] = null;
                            }
                        });
                    else
                        entries.each(function () {
                            var that = this,
                                key = $(that).attr('data-observe');
                            if (key in observedIntersections) {
                                //try {
                                observer.unobserve(that);
                                //} catch (ex) { }
                                delete observedIntersections[key];
                            }
                        });
            }
        }
    }

    function activeLink(link, causesTransition) {
        //isInTransition = link != null && causesTransition != false;
        touch.activeLink(link);
    }

    //function higlightButton(button) {
    //    activeLink(button);
    //    setTimeout(function () {
    //        activeLink();
    //    }, 200);
    //}

    function callWithFeedback(link, method) {
        if (!method)
            method = nop;
        link = $(link);
        var classAttr = link.attr('class');
        if (classAttr && classAttr.match(/\bapp-btn-/)) {
            link.addClass('ui-btn-active');
            //setTimeout(function () {
            //    link.removeClass('ui-btn-active');
            //}, feedbackDelay);
            setTimeout(function () {
                //if (isInTransition && method == nop)
                //    setTimeout(function () {
                //        callWithFeedback(link);
                //    }, feedbackDelay);
                //else {
                link.removeClass('ui-btn-active');
                feedbackFrom = 'link';
                method(link);
                //}
            }, feedbackDelay);
        }
        else {
            activeLink(link);
            setTimeout(function () {
                if (isInTransition && method === nop) {
                    // do nothing
                }
                else {
                    activeLink();
                    feedbackFrom = 'link';
                    if (link && link.is('.app-btn'))
                        feedbackFrom = 'toolbar';
                    method(link);
                }
            }, feedbackDelay);
        }
    }

    function userActivity() {
        if (membership)
            membership._updateLastActivity();
    }

    function contextSidebar() {
        if (!sidebarElement || !sidebarElement.length)
            sidebarElement = $('.app-sidebar').first();
        return sidebarElement;
    }

    function sidebarIsVisible(location) {
        return settings.bars[location || 'left'].visible;// contextSidebar().is(':visible');
    }

    function executeContextAction(item, link, skipFocus) {
        if (item) {
            var context = item.context,
                href = item.href;
            if (!skipFocus)
                focusScrollable();
            if (href)
                openHref(href);
            else if (item.callback) {
                if (link && context && !context.url)
                    link.parent().find('.app-btn').trigger('vclick');
                item.callback(context, link);
            }
        }
    }

    function ensureFocusedLink(link) {
        var focusedLinks = link.closest('ul').find('.app-focus');
        link.closest('.ui-panel-inner').trigger('focus');
        if (focusedLinks.length) {
            focusedLinks.removeClass('app-focus ui-btn-active');
            link.addClass('app-focus ui-btn-active');
        }
    }

    function scrollFocusedLinkIntoView(link, inner) {
        if (link.length) {
            if (!inner)
                inner = link.closest('.ui-panel-inner');
            var itemOffset = link.offset(),
                innerOffset = inner.offset(),
                deltaY,
                top = innerOffset.top,
                bottom = top + inner.outerHeight() - 1;
            if (itemOffset.top < top)
                deltaY = itemOffset.top - top;
            else if (itemOffset.top + link.outerHeight() > bottom)
                deltaY = itemOffset.top + link.outerHeight() - bottom;
            if (deltaY)
                setTimeout(function () {
                    inner.scrollTop(inner.scrollTop() + deltaY);
                }, 10);
        }
    }

    function transitionStatus(inProgress) {
        var activePage = findActivePage();
        if (activePage) {
            if (isReadingPaneDetail())
                activePage = $('.app-reading-pane-master');
            activePage.find('.dv-load-at-top').css('visibility', inProgress ? 'hidden' : '');
        }
        isInTransition = inProgress;
    }

    function activeDataView() {
        return touch.dataView();
    }

    function findActivePage(selector) {
        var activePage = $touch.activePage || $();
        return arguments.length ? activePage.find(selector) : activePage;
    }

    function activePageIdentifier(test) {
        var activePage = findActivePage(),
            pageId = activePage ? activePage.attr('id') : '_';
        return test ? pageId === test : pageId;
    }

    function getPageInfo(selector) {
        return touch.pageInfo(selector);
    }

    function classNameOfColumnInGrid(dataView, field) {
        return 'rg_' + dataView._id + '_v_' + dataView._viewId + (dataView._groupExpression ? '_g_' + dataView._groupExpression.replace(/\W/g, '_') : '') + '_f_' + field.Name;
    }

    function classNameOfFirstScrollableColumnInGrid(dataView) {
        return 'rg_' + dataView._id + '_v_' + dataView._viewId + (dataView._groupExpression ? '_g_' + dataView._groupExpression.replace(/\W/g, '_') : '') + '_scroll_';
    }

    function fieldToMinWidth(field, elementWidth) {
        if (!elementWidth)
            elementWidth = displayDensity();
        var cols = field.cols != null ? field.cols : field.toColumns(),
            minCols = field.long ? cols * .5 : cols < 11 ? cols : (cols < 21 ? Math.ceil(cols * .5) : 10);
        return Math.ceil(elementWidth * (minCols <= 3 ? 1 : .55) * minCols);
    }

    function yardstick(listview) {
        var elementWidth = Math.ceil(displayDensity() * 1);
        $(listview || findActivePage('.app-listview')).each(function () {
            var view = $(this),
                viewParent = view.parent(),
                page = view.closest('.ui-page'), pageDisplay,
                //id = 'w' + Math.ceil((_screenWidth - (sidebarIsVisible() ? (appBars.left.visible ? appBars.left.width + 1 : 0) : 0)) / elementWidth),
                id = 'w' + Math.ceil(parseCss(page, 'width') / elementWidth),
                data = yardstickData[id],
                firstItem, cardItemWidth, listItemWidth, firstGridSpan, gridColumnPadding,
                widthClass, // = 'app-width',
                lastWidthClass = view.data('data-yardstick-class'),
                testListView = $body.find('#app-yardstick'),
                isGrid = view.is('.app-grid'),
                isEcho = viewParent.is('.app-echo-inner'),
                gridWidth,
                listBreakpoint, cardBreakpoint,
                isPopup;

            if (!data/* && !isEchoOrMap || isEcho && isGrid && !data*/) {
                if (!testListView.length)
                    testListView = $('<ul id="app-yardstick" class="app-listview"><li class="dv-item"><div class="ui-btn"><span>1</span></div></li><li class="dv-item"><div class="ui-btn">2</div></li><li class="dv-item"><div class="ui-btn">3</div></li></ul>').appendTo($body).listview();
                //                testListView.css({ marginLeft: _screen.left, marginRight: _screen.right });
                if (isEcho && isGrid)
                    viewParent = findScrollable(viewParent);
                testListView.addClass('app-onecolumnview').appendTo(viewParent).show();
                firstItem = testListView.find('li').first();

                isPopup = view.closest('.ui-popup').length;
                pageDisplay = page.css('display');
                if (pageDisplay !== 'block' && !isPopup) {
                    page.css('display', 'block');
                    resetPageHeight(page);
                }

                listItemWidth = firstItem.outerWidth();

                testListView.toggleClass('app-onecolumnview  app-cardview');
                cardItemWidth = firstItem.outerWidth();

                testListView.toggleClass('app-cardview app-grid');
                firstGridSpan = testListView.find('span').first();
                gridColumnPadding = parseCss(firstGridSpan, 'margin-left'); // firstGridSpan.outerWidth() - firstGridSpan.width();
                scrollbarInfo.gridColumnPadding = gridColumnPadding;
                gridWidth = firstItem.outerWidth();
                testListView.removeClass('app-grid');

                if (pageDisplay !== 'block' && !isPopup)
                    page.css('display', '');

                testListView.appendTo($body).hide();

                //listBreakpoint = 'xl';
                //if (listItemWidth < 480)
                //    listBreakpoint = 'tn';
                //else if (listItemWidth < 640)
                //    listBreakpoint = 'xxs';
                //else if (listItemWidth < 768)
                //    listBreakpoint = 'xs';
                //else if (listItemWidth < 992)
                //    listBreakpoint = 'sm';
                //else if (listItemWidth < 1199)
                //    listBreakpoint = 'md';
                //else if (listItemWidth < 1440)
                //    listBreakpoint = 'lg';
                listBreakpoint = toLogicalWidth(listItemWidth);

                //cardBreakpoint = 'xl';
                //if (cardItemWidth < 480)
                //    cardBreakpoint = 'tn';
                //else if (cardItemWidth < 640)
                //    cardBreakpoint = 'xxs';
                //else if (cardItemWidth < 768)
                //    cardBreakpoint = 'xs';
                //else if (cardItemWidth < 992)
                //    cardBreakpoint = 'sm';
                //else if (cardItemWidth < 1199)
                //    cardBreakpoint = 'md';
                //else if (cardItemWidth < 1440)
                //    cardBreakpoint = 'lg';

                cardBreakpoint = toLogicalWidth(cardItemWidth);


                data = { listBreakpoint: listBreakpoint, cardBreakpoint: cardBreakpoint, card: Math.floor(cardItemWidth / elementWidth), list: Math.floor(listItemWidth / elementWidth), columnPadding: gridColumnPadding, grid: {}, gridWidth: gridWidth };
                yardstickData[id] = data;
            }
            widthClass = 'app-listitem-' + (view.is('.app-cardview') ? data.cardBreakpoint : data.listBreakpoint);
            if (widthClass !== lastWidthClass) {
                if (lastWidthClass)
                    view.removeClass(lastWidthClass);
                view.addClass('app-yardstick ' + widthClass).data('data-yardstick-class', widthClass);
            }
            if (isGrid) {
                var pageInfo = getPageInfo(isEcho ? findEcho(view).attr('data-for') : page.attr('id')),
                    dataView = pageInfo.dataView,
                    gridStyle = dataView.session('grid-style'),
                    gridIsFitted = dataGridIsFitted(dataView),
                    containerBreakpoints;
                if (!gridStyle || dataView.session('grid-style-changed') || gridIsFitted && (dataView.session('window-width') !== _screen.width/* || dataView.session('grid-with-sidebar') != sidebarIsVisible()*/)) {
                    dataView.session('grid-style-changed', null);
                    var fields = dataView._fields,
                        // itemMap = createItemMap(dataView),
                        allFields = dataView._allFields,
                        fieldList = [],
                        columns,
                        totalColumns = 0,
                        multiSelect = dataView.get_showMultipleSelection(),
                        availWidth = view.is(':visible') ? view.width() : data.gridWidth,
                        hasKey = dataView._hasKey(),
                        inlineEditing = dataView.inlineEditing(),
                        systemWidth = (hasKey ? 22 : 0) + (multiSelect ? (22 + 16) : 0) + (inlineEditing ? 40 : 0) + scrollbarInfo.gridColumnPadding,
                        effectiveWidth = systemWidth,
                        effectiveFieldWidth,
                        c,
                        gridSettings = dataView.gridSettings(),// dataView.viewProp('gridColumns'),
                        css = new _msSys.StringBuilder();

                    $(fields).each(function (index) {
                        var originalField = this,
                            field = allFields[originalField.AliasIndex],
                            userDefinedWidth,
                            tag = field.Tag,
                            widthDefMatch,
                            widthDef;

                        if (!originalField.Hidden && !field.GroupBy && !originalField.OnDemand && originalField.Type !== 'DataView') {
                            columns = field.toColumns();

                            effectiveFieldWidth = Math.ceil(Math.min(availWidth * .5, columns * elementWidth * (columns <= 3 ? 1 : .55))); //Math.min(availWidth * .5, columns * elementWidth); // 
                            if (gridSettings && gridSettings.width[field.Name]) {
                                effectiveFieldWidth = gridSettings.width[field.Name];
                                userDefinedWidth = true;
                            }
                            effectiveWidth += effectiveFieldWidth + scrollbarInfo.gridColumnPadding;

                            totalColumns += columns;
                            if (tag && !userDefinedWidth) {
                                widthDefMatch = columnWidthDefRegex.exec(tag);
                                while (widthDefMatch) {
                                    if (!widthDef)
                                        widthDef = {};
                                    widthDef[widthDefMatch[1]] = widthDefMatch[2];
                                    widthDefMatch = columnWidthDefRegex.exec(tag);
                                }
                            }

                            fieldList.push({
                                name: field.Name, className: classNameOfColumnInGrid(dataView, field), // String.format('gc_{0}_{1}_{2}', dataView._id, dataView._viewId, field.Name),
                                cols: columns, type: field.Type, ew: effectiveFieldWidth, long: field.ItemsTargeDataController || field.Type === 'String' && field.Rows > 1,
                                wd: widthDef
                            });
                        }
                    });

                    if (dataView) {
                        dataView.session('avail-width', availWidth);
                        var gridAvailWidth = dataView.session('grid-avail-width'),
                            physicalWidth = systemWidth, usePhysicalWidth,
                            hasCustomWidth,
                            scale;

                        if (dataView.tagged('grid-fit-none')) {
                            if (gridIsFitted)
                                dataGridIsFitted(dataView, false);
                            gridIsFitted = false;
                        }
                        if (gridSettings) {
                            for (c in gridSettings.width)
                                hasCustomWidth = true;
                            if (hasCustomWidth) {
                                if (gridIsFitted)
                                    dataGridIsFitted(dataView, false); // dataView.viewProp('grid-is-fitted', false);
                                gridIsFitted = false;
                            }
                        }

                        if (gridAvailWidth != null && !gridIsFitted)
                            availWidth = gridAvailWidth;
                        else {
                            availWidth -= scrollbarInfo.gridColumnPadding + 1;
                            if (isEcho)
                                availWidth -= scrollbarInfo.width;
                            // handle "auto" and "width" fitting here
                            if (gridIsFitted) {
                                if (availWidth < effectiveWidth) {
                                    scale = (availWidth - (multiSelect ? 22 : 0)) / effectiveWidth;
                                    $(fieldList).each(function (index) {
                                        var f = this,
                                            //minCols = f.cols < 11 ? f.cols : (f.cols < 21 ? Math.ceil(f.cols * .5) : 10),
                                            //minWidth = Math.ceil(elementWidth * (minCols <= 3 ? 1 : .55) * minCols);
                                            minWidth = fieldToMinWidth(f, elementWidth);
                                        f.ew = (f.ew + scrollbarInfo.gridColumnPadding) * scale - scrollbarInfo.gridColumnPadding;
                                        if (f.ew < minWidth) {
                                            f.ew = minWidth;
                                            usePhysicalWidth = true;
                                        }
                                        physicalWidth += f.ew + scrollbarInfo.gridColumnPadding;
                                    });
                                }
                                //dataView.session('scroll-left', 0);
                            }
                            if (usePhysicalWidth)
                                availWidth = physicalWidth;
                            else if (!gridIsFitted)
                                availWidth = effectiveWidth;
                            dataView.session('grid-avail-width', Math.floor(availWidth));
                            dataGridIsFitted(dataView, gridIsFitted);
                            dataView.session('window-width', _screen.width);
                            //dataView.session('grid-with-sidebar', sidebarIsVisible());
                        }
                    }

                    var firstField,
                        frozenWidth = 0,
                        frozenField = frozenFieldName(dataView),
                        isFrozen = frozenField !== '_none_';

                    // create css rules

                    $(fieldList).each(function (index) {
                        c = this;
                        var widthDef = c.wd,
                            w = c.ew; // Math.floor(c.cols / totalColumns * availWidth) - data.columnPadding;
                        if (c == firstField) {
                            // 22 is the width of "app-first::after" element, minus margin; it is also the width of "check" box
                            if (hasKey)
                                w -= 22;
                            if (multiSelect)
                                w -= 22 + data.columnPadding; // 54
                        }
                        if (widthDef) {
                            if (!containerBreakpoints)
                                containerBreakpoints = pageInfo.page.attr('class').split(/\s+/);
                            screenBreakpoints.forEach(function (breakpoint) {
                                var bw = widthDef[breakpoint];
                                if (bw)
                                    if (breakpoint === 'tn' || containerBreakpoints.indexOf('app-min-' + breakpoint) >= 0)
                                        w = parseInt(bw);
                            });
                        }
                        css.appendFormat('.{0} {{width:{1}px;max-width:{1}px}}', c.className, Math.floor(w));
                        if (frozenField !== '_none_') {
                            frozenWidth += w + data.columnPadding;
                            if (frozenField === c.name || frozenField === '_first_')
                                frozenField = '_none_';
                        }
                        css.appendLine();
                    });
                    var styleString = css.toString(),
                        styleId = dataView._id + '_' + dataView._viewId;
                    if (!gridStyle) {
                        gridStyle = $('style[id="' + styleId + '"]');
                        if (!gridStyle.length)
                            gridStyle = createStyle().attr('id', styleId);
                        if (gridStyle.data('css') !== styleString)
                            gridStyle.text(styleString).data('css', styleString);
                        //dataView.session('grid-style', gridStyle);
                    }
                    if (frozenWidth)
                        frozenWidth += 4;
                    if (inlineEditing)
                        frozenWidth += 24 + data.columnPadding;
                    frozenWidth = !isFrozen && !multiSelect ? 0 : (Math.floor(frozenWidth + (hasKey ? (22 + 4) : 4)) + (multiSelect ? (22 + (frozenWidth > 0 ? data.columnPadding : 4)) : 0));
                    if (!isFrozen && !multiSelect && inlineEditing)
                        frozenWidth = 40 + data.columnPadding;
                    dataView.session('grid-frozen-width', frozenWidth);
                }
            }
        });
    }

    //function highlightSelection() {
    //    var pageInfo = getPageInfo();
    //    if (!pageInfo)
    //        return;
    //    var dataView = pageInfo.dataView,
    //        extension = dataView && dataView.extension();
    //    if (extension && dataView.get_isGrid()) {
    //        skipInfoView = true;
    //        extension.executeInContext('Eye', null, false);
    //    }
    //}

    //function addRwd(element, width) {
    //    //if (width)
    //    //    element.addClass('app-width' + width);
    //    return element;
    //}

    //function busyIndicator(show) {
    //    var menuButton = mobile._menuButton;
    //    if (arguments.length == 0)
    //        return menuButton.is('.app-transition');
    //    //if (menuButton && mobile.toolbar().is(':visible')) {
    //    //    if (show) 
    //    //        menuButton.removeClass('ui-icon-bars').addClass('ui-icon-refresh app-transition app-animation-spin');
    //    //    else
    //    //        menuButton.removeClass(transitionClasses).addClass(isNavigationRoot() ? 'ui-icon-bars' : 'ui-icon-back');
    //    //}
    //    if (menuButton && !show && mobile.toolbar().is(':visible') && !findActivePage().is('.app-page-modal')) {
    //        if (show)
    //            menuButton.removeClass('ui-icon-bars').addClass('app-transition');
    //        else
    //            menuButton.removeClass(transitionClasses).addClass(isNavigationRoot() ? 'ui-icon-bars' : 'ui-icon-back');
    //    }
    //}

    //function busyBeforeUnload() {
    //    //busyIndicator(true);
    //    //$window.one('beforeunload pagehide', function () {
    //    //    //busyIndicator(false);
    //    //});
    //}

    function isNavigationRoot() {
        var pageId = activePageIdentifier(),
            pages = touch._pages;
        return pageId === 'Main' || pages.length && pageId === pages[0].id && pages[0].home;
    }

    function updateMenuButtonStatus() {
        var menuButton = touch._menuButton,
            activePage = findActivePage(),
            activePageInfo,
            hasBack, backText;
        if (menuButton && touch.toolbar().is(':visible') && !activePage.is('.app-page-modal') && !uiAutomation()) {
            if (isNavigationRoot()/* && !advancedSearchPageIsActive()*/)
                menuButton.removeClass('ui-icon-back ui-icon-bars ' + transitionClasses).addClass('ui-icon-bars').attr({ 'data-action': '#app-btn-menu', title: resourcesMobile.Menu });
            else
                menuButton.removeClass('ui-icon-bars ' + transitionClasses).addClass('ui-icon-back').attr({ 'data-action': '#app-back', title: resourcesMobile.Back });
            hasBack = !menuButton.is('.ui-icon-bars');
            var menuStripVisibility = touch._menuStrip ? touch._menuStrip.strip.css('visibility') : null;
            touch.toolbar().toggleClass('app-has-back', hasBack);
            if (!hasBack && menuStripVisibility === 'hidden')
                touch._menuStrip.strip.css('visibility', menuStripVisibility)
            backText = touch._backText;
            if (hasBack) {
                var prevNavPage = navigationStack('prev'),
                    pageId = prevNavPage && prevNavPage.hash,
                    prevPage = pageId ? getPageInfo(pageId.substring(1)) : null,
                    headerText = prevPage ? prevPage.headerText : prevNavPage && prevNavPage.title;
                activePageInfo = getPageInfo();
                if (!headerText || activePageInfo && activePageInfo.headerText === headerText) {
                    if (activePageInfo)
                        headerText = activePageInfo.backText;
                    if (!headerText)
                        headerText = resourcesMobile.Back;
                }
                backText.text(typeof headerText == 'string' ? headerText : headerText[0]).show();
            }
            else
                backText.hide();

            //mobile._toolbar[0].style.backgroundImage = menuButton.is('.ui-icon-bars') ? '' : 'none!important';
            //mobile._menuStrip.strip.css('visibility', menuButton.is('.ui-icon-bars') ? '' : 'hidden');
        }
    }

    function savePanelScrollTop(panel) {
        if (panel.length && panel.closest('.app-sidebar').length)
            contextPanelScrolling[activePageIdentifier() + '_' + panel.attr('id')] = panel.find('.ui-panel-inner').scrollTop();
    }

    function restorePanelScrollTop(panel) {
        //if (panel.length && panel.closest('.app-sidebar').length)
        panel.find('.ui-panel-inner').scrollTop(panel.length && panel.closest('.app-sidebar').length ? (contextPanelScrolling[activePageIdentifier() + '_' + panel.attr('id')] || 0) : 0);
    }

    function isMultiSelectCheckBoxClick(e) {
        var target = $(e.target);
        if (target.is('.app-btn-check'))
            return true;
        var checkBox = target.closest('.ui-btn,.app-grid-header').find('.app-btn-check');
        return (checkBox.length > 0) && (lastTouchX(e.pageX) <= (checkBox.offset().left + checkBox.outerWidth() + 8));
    }

    function isActionColumnClick(event, dataView) {
        var result,
            echo,
            x = lastTouchX(event.clientX),
            y = lastTouchY(event.clientY),
            actionButtons = $(event.target).closest('.ui-btn').find('[data-action-path]'),
            link;
        if (actionButtons.length)
            actionButtons.each(function () {
                var btn = $(this),
                    btnOffset = btn.offset();
                if (x >= btnOffset.left - 4 && x <= btnOffset.left + btn.outerWidth() + 3 && y >= btnOffset.top - 6 && y <= btnOffset.top + btn.outerHeight() + 4) {
                    result = true;
                    btn.addClass('ui-btn-active');
                    setTimeout(function () {
                        btn.removeClass('ui-btn-active');
                        link = btn.closest('.ui-btn');
                        echo = findEcho(btn);
                        clearSelectionInEcho(echo);
                        dataViewUILinks(dataView).removeClass('app-selected app-checked ui-btn-active');
                        var dataContext = link.data('data-context');
                        if (!checkIfMultiSelect(dataView, link, 'none'))
                            dataView.extension().tap(dataContext, 'none');
                        link.addClass('app-selected');
                        var context = [],
                            actionPath = btn.attr('data-action-path');
                        enumerateActions(['ActionColumn', 'Grid', 'ActionBar', 'Custom'], dataView, context, dataView.commandRow());
                        $(context).each(function () {
                            var item = this;
                            if (item.path === actionPath) {
                                executeContextAction(item, link);
                                return false;
                            }
                        });
                        if (echo.length)
                            echoRereshToolbarWithDelay(dataView, echo);
                        else
                            dataViewEchoChanged(dataView._id);
                    }, feedbackDelay);
                    return false;
                }
            });
        return result;
    }

    function isMoreButtonClick(e) {
        var target = $(e.target);
        if (target.is('.app-btn-more'))
            return true;
        var moreButton = target.closest('.ui-btn').find('.app-btn-more'),
            x = lastTouchX(e.clientX),
            y = lastTouchY(e.clientY);
        if (!moreButton.length)
            return false;
        var buttonOffset = moreButton.offset();
        //alert(_lastTouch.x + ', ' + _lastTouch.y + ' : ' + buttonOffset.left + ', ' + buttonOffset.top + ' / ' + (buttonOffset.left + moreButton.outerWidth(true)) + ', ' + (buttonOffset.top + moreButton.outerHeight(true)));
        return (buttonOffset.left - 8 <= x) && (x <= buttonOffset.left + moreButton.outerWidth(true) + 8) &&
            (buttonOffset.top - 8 <= y) && (y <= buttonOffset.top + moreButton.outerHeight(true) + 8);
    }

    function findMoreButton(target) {
        return target.closest('.ui-btn').find('.app-btn-more');
    }

    function dataViewToClassNames(dataView) {
        return String.format('app-style-dv-{0} app-style-c-{1} app-style-cv-{1}-{2}', dataView._id, dataView._controller, dataView._viewId);
    }

    function dataViewUILinks(dataView) {
        var itemContainer = findEcho(dataView);
        if (!itemContainer.length)
            itemContainer = getPageInfo(dataView).page;
        return itemContainer.find('ul[data-role="listview"] li .ui-btn');
    }

    function checkBoxState(state) {
        $(arguments).each(function (index) {
            if (index)
                if (state)
                    $(this).addClass('app-btn-check-selected').closest('.ui-btn').addClass('app-checked').parent().addClass('app-checked');
                else
                    $(this).removeClass('app-btn-check-selected').closest('.ui-btn').removeClass('app-checked').parent().removeClass('app-checked');
        });
    }

    function removeHighlightFromSelectedRow(listview) {
        if (listview.is('.app-cardcolumn'))
            listview = listview.parent();
        listview.find('.app-selected').removeClass('app-selected ui-btn-active');
    }

    function addKeyToSelection(selectedKeyList, key) {
        if (!(key == null || key.match(/^null\b/)))
            selectedKeyList.push(key);
    }

    function toggleSelectedRows(dataView, keepSelection, toggleAll) {
        var selectedKeyList = dataView._selectedKeyList,
            selectAll = !selectedKeyList.length,
            listview = findScrollable().find('.app-style-dv-' + dataView._id), // find a listview for the given dataview on the current page
            echo = findEcho(listview),                                         // locate the echo if the listview is within the echo on the current page
            checkBoxes = listview.find('.dv-item .ui-btn:not(.app-calculated) .app-btn-check'), // checkboxes are cleared/set for the current visible listview (echo or see-all)
            gridHeaderCheckBoxes = (echo.length ? echo : listview.closest('.ui-page')).find('.app-grid-header .app-btn-check, .dv-heading .app-btn-check'),
            stickyHeaderCheckBox = touch.stickyHeaderBar().find('.app-grid-header .app-btn-check'),
            seeAllCheckboxes,
            args,
            link;

        if (selectAll && dataView._totalRowCount > multiSelectMaxRowCount) {
            _app.alert(String.format(resources.Presenters.Charts.DataWarning, multiSelectMaxRowCount), function () {
                if (echo.length)
                    touch.contextScope(dataView);
                configureFilter({ mode: 'everything' });
                touch.contextScope(null);
            });
            return;
        }

        function updateUI() {
            if (echo.length)
                echoRereshToolbarWithDelay(dataView, echo);
        }

        selectedKeyList.splice(0, selectedKeyList.length);
        checkBoxState(selectAll, checkBoxes, gridHeaderCheckBoxes, stickyHeaderCheckBox);
        if (selectAll) {
            if (checkBoxes.length && !dataView.commandRow()) {
                link = $(checkBoxes[0]).closest('.ui-btn');
                dataView.extension().tap(link.data('data-context'), 'none');
                if (echo.length)
                    link.addClass('app-selected');

            }
            if (dataView._keyFields.length === 1 && findScrollable(listview).find('.dv-load-at-top,.dv-load-at-bottom,.dv-action-see-all').length) {
                if (dataView._busy()) return;
                args = dataView._createArgsForListOfValues(dataView._keyFields[0].Name);
                args.request.MaximumValueCount = multiSelectMaxRowCount;
                dataView._invoke('GetListOfValues', args, function (lov) {
                    dataView._busy(false);
                    $(lov).each(function () {
                        addKeyToSelection(selectedKeyList, this.toString());
                    });
                    dataView.set_selectedValue(selectedKeyList.join(';'));
                    updateMultiSelectInstruction(dataView);
                    updateUI();
                });
            }
            else {
                listview.find('.dv-item .ui-btn:not(.app-calculated)').each(function () {
                    addKeyToSelection(selectedKeyList, dataView._createRowKey($(this).data('data-context').row));
                });
                updateUI();
            }
        }
        else if (!keepSelection) {
            dataView.extension().clearSelection(true);
            if (toggleAll)
                notifyKeyLoss(dataView);
        }
        dataView.set_selectedValue(selectedKeyList.join(';'));
        if (echo.length) {
            checkBoxState(selectAll, getPageInfo(dataView).page.find('.app-wrapper .app-listview .app-btn-check, .dv-heading .app-btn-check'));
            updateUI();
        }
        else {
            dataViewEchoChanged(dataView);
            refreshContext();
        }
        updateMultiSelectInstruction(dataView);
    }

    function findGridHeaderCheckBoxes(listview) {
        return listview.closest('.ui-page').find('.app-grid-header .app-btn-check, .dv-heading .app-btn-check');
    }

    function findStickyHeaderBarCheckBox(dataView) {
        return stickyHeaderBar(getPageInfo(dataView).page).find('.app-grid-header .app-btn-check');
    }

    function multiSelectInstruction(dataView) {
        var selectedKeyList = dataView._selectedKeyList,
            selectedRowCount = selectedKeyList.length;
        if (Array.indexOf(selectedKeyList, 'null') !== -1)
            selectedRowCount--;
        return selectedRowCount ? (' ' + String.format((selectedRowCount > 1 ? resourcesMobile.ItemsSelectedMany : resourcesMobile.ItemsSelectedOne), selectedRowCount) + '.') : '';
    }

    function updateMultiSelectInstruction(dataView) {
        var selectedRowCount = dataView._selectedKeyList.length,
            pageInfo = getPageInfo(dataView),
            instructions = $.merge(pageInfo.page.find('.app-multi-select-instruction'),
                findEcho(dataView).find('.app-multi-select-instruction'));//$.merge(page.find('.app-multi-select-instruction'), $('#' + dataView._id + '_echo .app-multi-select-instruction'));
        if (activePageIdentifier(dataView._id))
            $.merge(instructions, stickyHeaderBar(pageInfo.page).find('.app-multi-select-instruction'));
        instructions.text(multiSelectInstruction(dataView));
        if (selectedRowCount > 1)
            revealStickyHeaderInstruction();
        _edit.sync();
    }

    function revealStickyHeaderInstruction(header) {
        if (!header)
            header = stickyHeaderBar();
        header.find('.app-bar-text-instruction-hidden').removeClass('app-bar-text-instruction-hidden');
    }

    function toggleRowSelection(dataView, link, action) {
        var extension = dataView.extension(),
            checkButton = link.find('.app-btn-check'),
            dataContext = link.data('data-context'),
            selectedKeyList = dataView._selectedKeyList,
            originalKeyList = selectedKeyList.slice(0),
            rowKey = dataContext ? dataView._createRowKey(dataContext.row) : dataView.get_selectedKey().join(','),
            keyIndex = selectedKeyList.indexOf(rowKey),
            listview = link.closest('.ui-listview'),
            echo = findEcho(listview),
            gridHeaderCheckBoxes,
            stickyHeaderCheckBox = findStickyHeaderBarCheckBox(dataView),
            linkDataContext, selection,
            isSelected = link.is('.app-selected');

        gridHeaderCheckBoxes = findGridHeaderCheckBoxes(listview);

        if (keyIndex !== -1) {
            selectedKeyList.splice(keyIndex, 1);
            checkBoxState(false, checkButton);
            if (isSelected) {
                removeHighlightFromSelectedRow(listview);
                if (originalKeyList.length > 1)
                    dataView._clearSelectedKey();
                else {
                    extension.clearSelection(true);
                    notifyKeyLoss(dataView);
                }
                selection = listview.find('.dv-item.app-checked .ui-btn').first();
                if (selection.length) {
                    // remove this first available key from the list of keys and trigger click on the row
                    var nextDataContext = selection.data('data-context');
                    rowKey = dataView._createRowKey(nextDataContext.row);
                    selectedKeyList.splice(selectedKeyList.indexOf(rowKey), 1);
                    if (echo.length)
                        selection.trigger('vclick'/*, { ctrlKey: true }*/);
                    else
                        extension.tap(selection.data('data-context'), action);
                }
                else
                    if (selectedKeyList.length)
                        dataView.sync(selectedKeyList[0]);
            }
            if (echo.length)
                echoRereshToolbarWithDelay(dataView, echo);
            else
                dataViewEchoChanged(dataView);
        }
        else {
            addKeyToSelection(selectedKeyList, rowKey);
            checkBoxState(true, checkButton);
            removeHighlightFromSelectedRow(listview);
            if (echo.length)
                link.addClass('app-selected');
            else
                dataViewEchoChanged(dataView);
            if (dataContext)
                extension.tap(dataContext, action);
        }
        checkBoxState(selectedKeyList.length, gridHeaderCheckBoxes, stickyHeaderCheckBox);

        if (echo.length) {
            listview = findScrollable(dataView._id).find('.app-listview');
            if (listview.length) {
                linkDataContext = link.data('data-context');
                listview.find('.ui-btn').each(function () {
                    var link = $(this),
                        dataContext = link.data('data-context'),
                        isSameRow = 0;
                    if (linkDataContext) {
                        $(dataView._keyFields).each(function () {
                            var field = dataView.findField(this.Name);
                            if (linkDataContext.row && dataContext && dataContext.row && linkDataContext.row[field.Index] === dataContext.row[field.Index])
                                isSameRow++;
                        });
                        if (isSameRow === dataView._keyFields.length) {
                            checkBox = link.find('.app-btn-check');
                            if (keyIndex !== -1)
                                checkBoxState(false, checkBox);
                            else {
                                removeHighlightFromSelectedRow(listview);
                                checkBoxState(true, checkBox);
                                link.addClass('app-selected');
                            }
                            checkBoxState(listview, selectedKeyList.length, findGridHeaderCheckBoxes(listview));
                            return false;
                        }
                    }
                });
            }
        }

        selectedKeyList = selectedKeyList.join(';');
        dataView.set_selectedValue(selectedKeyList);
        if (originalKeyList.join(';') !== selectedKeyList)
            refreshContext();

        updateMultiSelectInstruction(dataView);
    }

    function createGridHeader(dataView, item) {
        var fields = dataView._fields,
            allFields = dataView._allFields,
            first = true,
            gridHeaderContainer = $('<div data-draggable="grid-header" class="app-grid-header app-grid-header-cv-' + dataView._id + '-' + dataView._viewId + '"></div>').appendTo(item).attr('data-for', dataView._id),
            scrollClassName = classNameOfFirstScrollableColumnInGrid(dataView),
            frozenField = frozenFieldName(dataView),
            requiresScrollableField = frozenField === '_none_',
            fieldCount = 0,
            columnSeparator,
            checkbox;
        if (dataView.get_showMultipleSelection()) {
            checkbox = $span('app-btn-check').appendTo(gridHeaderContainer).attr('title', resourcesMobile.LookupSelectAction);
            //$(iconCheck).appendTo(checkbox);
            if (dataView._selectedKeyList.length)
                checkbox.addClass('app-btn-check-selected');
        }
        if (dataView.inlineEditing())
            $span('app-row-status').appendTo(gridHeaderContainer);

        gridHeaderContainer.toggleClass('app-grid-header-inlineediting', dataView.inlineEditing());
        if (frozenField !== '_none_' || checkbox || dataView.inlineEditing())
            $span('app-frozen-spacer ' + scrollClassName + 'frozen_').appendTo(gridHeaderContainer);
        $(fields).each(function () {
            var originalField = this,
                field = allFields[originalField.AliasIndex],
                columnHeading,
                sortOrder, filterFunc,
                fieldFilter, originalFilter,
                headerText = field.HeaderText,
                filterStatus, columnText;
            if (!originalField.Hidden && !field.GroupBy && !originalField.OnDemand && originalField.Type !== 'DataView') {
                columnHeading = $span('', 'data-draggable="grid-header-field"').addClass(classNameOfColumnInGrid(dataView, field))
                    .attr('data-field-name', field.Name)//.attr('data-title', headerText)
                    .appendTo(gridHeaderContainer);
                if (field.Type.match(_app._numericTypeRegex))
                    columnHeading.addClass('app-field-type-numeric');
                else if (field.Type === 'Boolean')
                    columnHeading.addClass('app-field-type-bool');
                sortOrder = sortExpression(dataView, field.Name);
                filterFunc = dataView.get_fieldFilter(field, true);

                if (field.AllowSorting) {
                    columnText = $htmlTag('u').text(headerText);
                    if (sortOrder || filterFunc)
                        columnText.appendTo($htmlTag('b', 'app-grid-header-text').appendTo(columnHeading));
                    else
                        columnText.appendTo(columnHeading);
                    if (sortOrder) {
                        var sortIcon = materialIcon('material-icon-arrow-' + (sortOrder.match(/^asc/i) ? 'upward' : 'downward'), columnHeading).addClass('app-btn-sort').attr({ 'data-title': resourcesMobile.Sorted + ': ' + fieldSortOrderText(field, sortOrder), 'data-sort': sortOrder });
                        columnText.data(sortIcon.data());
                    }
                    columnText.attr('data-title', resourcesMobile.Sort + ' (' + fieldSortOrderText(field, sortOrder && sortOrder === 'asc' ? 'desc' : 'asc') + ')');
                }
                else
                    columnHeading.text(headerText);

                if (field.AllowSorting || field.AllowQBE)
                    $i('app-field-menu').attr('data-title', headerText).appendTo(columnHeading);

                if (filterFunc) {
                    //filterStatus = $('<span class="app-icon glyphicon glyphicon-filter"></span>').appendTo(columnHeading);
                    filterStatus = materialIcon('material-icon-filter-list', columnHeading);
                    $(dataView._filter).each(function () {
                        var ff = this;
                        if (ff.startsWith(field.Name + ':')) {
                            fieldFilter = ff;
                            return false;
                        }
                    });
                    if (fieldFilter && !isTouchPointer) {
                        originalFilter = dataView._filter;
                        dataView._filter = [fieldFilter];
                        filterStatus.attr('title', dataView.extension().filterStatus(true));
                        dataView._filter = originalFilter;
                    }
                }
                if (first) {
                    first = false;
                    appendMoreButton(dataView, gridHeaderContainer);
                }

                columnSeparator = $span('app-field-separator', 'data-draggable="grid-header-separator"').appendTo(gridHeaderContainer);

                if (frozenField !== '_none_') {
                    columnHeading.addClass('app-frozen');
                    if (field.Name === frozenField || frozenField === '_first_') {
                        requiresScrollableField = true;
                        frozenField = '_none_';
                    }
                    else
                        columnSeparator.addClass('app-frozen');
                }
                else if (requiresScrollableField) {
                    columnHeading.addClass(scrollClassName + ' app-scroll');
                    requiresScrollableField = false;
                }

                fieldCount++;
            }
        });
        return gridHeaderContainer;
    }

    function createCheckboxMarkup(dataView, row, rowLabels, link) {
        if (dataView.get_showMultipleSelection()) {
            var span = $span('app-btn-check').appendTo(link).attr('title', resourcesMobile.LookupSelectAction),
                rowKey;
            //$(iconCheck).appendTo(span);
            if (!rowLabels) {
                rowKey = dataView._createRowKey(row);
                if (dataView._selectedKeyList.indexOf(rowKey) !== -1) {
                    span.addClass('app-btn-check-selected');
                    link.addClass('app-checked').parent().addClass('app-checked');
                }
            }
        }
        if (dataView.inlineEditing())
            $span('app-row-status').appendTo(link);
    }

    function toHyperlink(field, row) {
        var hyperlinkFormatString = field.HyperlinkFormatString,
            result;
        if (hyperlinkFormatString)
            result = field._dataView._parseLocation(hyperlinkFormatString, row);
        return result;
    }

    function setSmartValue(container, field, value, text, doReset) {
        if (doReset)
            switch (field.Type) {
                case 'Date':
                case 'DateTime':
                    container.removeAttr('data-smart-type data-smart-value data-smart-text');
                    break;
            }
        if (!settings.ui.smartDates || value == null || field.is('smart-dates-disabled'))
            return;
        var set, startMonitor;
        switch (field.Type) {
            case 'Date':
            case 'DateTime':
                set = refreshSmartValue(container, field.Type, value, text);
                if (set) {
                    startMonitor = true;
                    container.attr({
                        'data-smart-type': field.Type,
                        'data-smart-value': JSON.stringify(value),
                        'data-smart-text': text
                    });
                }
                break;
            default:
                if (field._smartSize) {
                    set = _app.sizeToText(value);
                    container.text(set);
                }
                break;
        }
        if (set && startMonitor && !_window.smartValueInterval)
            _window.smartValueInterval = setTimeout(function () {
                refreshSmartValues();
                _window.smartValueInterval = setInterval(refreshSmartValues, 60 * 1000);
            }, 60000 - new Date().getSeconds() * 1000);
        //_window.smartValueInterval = setInterval(refreshSmartValues, 60 * 1000);
        return set;
    }

    function refreshSmartValues(spans) {
        if (!spans || !spans.length)
            spans = $('[data-smart-value]');
        spans.each(function (s) {
            var span = spans.eq(s),
                type = span.attr('data-smart-type'),
                value = JSON.parse(span.attr('data-smart-value')),
                text = span.attr('data-smart-text');

            switch (type) {
                case 'Date':
                case 'DateTime':
                    value = new Date(value);
                    break;
            }
            refreshSmartValue(span, type, value, text);
        });
    }

    function refreshSmartValue(span, type, value, text) {
        if (value) {
            switch (type) {
                case 'Date':
                case 'DateTime':
                    var smartDate = toSmartDate(value);
                    if (!!smartDate) {
                        span.text(smartDate)
                        return true;
                    }
                    else {
                        span.removeAttr('data-smart-type').removeAttr('data-smart-value').removeAttr('data-smart-text').text(text);
                        return false;
                    }
                //break;
            }
        }
    }

    function toSmartDate(value) {
        if (value == null)
            return null;
        var dayNames = dateTimeFormat.AbbreviatedDayNames,
            resourcesDates = resourcesMobile.Dates,
            now = new Date(),
            diff = now - value,
            days = diff / 86400000;

        if (days >= 8 || days < -14) { // use 8 instead of 7 to allow for "today" and "yesterday" 
            if (value.getYear() == now.getYear())
                return String.format('{0:' + dateTimeFormat.MonthDayPattern.replace(/M+/, 'MMM') + '}', value) + smartTime(value);
            return null;
        }

        var nowDate = new Date(now).setHours(0, 0, 0, 0),
            valueDate = new Date(value).setHours(0, 0, 0, 0),
            dateDiff = (nowDate - valueDate) / 86400000;

        // past days
        if (dateDiff > 1)
            return resourcesDates.Last + ' ' + dayNames[value.getDay()] + smartTime(value);
        if (dateDiff == 1)
            return resourcesDates.Yesterday + smartTime(value);
        // today
        if (dateDiff == 0) {
            if (doHideTime(value))
                return resourcesDates.Today;

            var min = diff / 1000 / 60,
                hours = min / 60;
            min %= 60;

            // past
            if (diff > 0) {
                if (hours > 1)
                    return String.format('{0:' + dateTimeFormat.ShortTimePattern + '}', value);
                if (hours == 1)
                    return resourcesDates.OneHour;
                if (min > 2)
                    return String.format(resourcesDates.MinAgo, Math.floor(min));
                if (min > 1)
                    return resourcesDates.AMinAgo;
                return resourcesDates.JustNow;
            }

            // future
            if (hours <= -1)
                return String.format('{0:' + dateTimeFormat.ShortTimePattern + '}', value);
            if (min <= -59)
                return resourcesDates.InHour;
            if (min < -2)
                return String.format(resourcesDates.InMin, -Math.floor(min));
            if (min < -1)
                return resourcesDates.InAMin;
            return resourcesDates.Now;
        }
        else {
            // future days
            if (dateDiff == -1)
                return resourcesDates.Tomorrow + smartTime(value);
            if (dateDiff >= -7)
                return dayNames[value.getDay()] + smartTime(value);
            return resourcesDates.Next + ' ' + dayNames[value.getDay()] + smartTime(value);
        }
        //return null;
    }

    // TESTING smart dates
    //    var now = new Date(),
    //        date = new Date();
    //    date.setDate(date.getDate() - 15);
    //    for (var i = 0; i < 500; i++) {
    //        if (date.getDate() != now.getDate())
    //            date.setHours(date.getHours() + 6);
    //        else
    //        {
    //            if (Math.abs(date.getHours() - now.getHours()) > 2)
    //                date.setMinutes(date.getMinutes() + 30);
    //            else if (date.getHours() == now.getHours() && Math.abs(date.getMinutes() - now.getMinutes()) < 3)
    //                date.setSeconds(date.getSeconds() + 15);
    //            else
    //                date.setMinutes(date.getMinutes() + 1);
    //        }
    //        console.log('Date: ' + date + ' | ' + (toSmartDate(date, now) || date));
    //    }

    function doHideTime(value) {
        var hour = value.getHours(),
            minute = value.getMinutes(),
            second = value.getSeconds();
        return !hour && !minute && !second;
    }

    function smartTime(value) {
        if (!doHideTime(value)) {
            var seconds = value.getSeconds(),
                minutes = value.getMinutes(),
                hours = value.getHours();

            if (hours || minutes || seconds)
                return ', ' + String.format('{0:' + (seconds ? dateTimeFormat.LongTimePattern : dateTimeFormat.ShortTimePattern) + '}', value);
        }
        return '';
    }

    function createRowMarkup(dataView, row, rowNumber, link, rowLabels, aggregates) {
        var fields = dataView._fields,
            allFields = dataView._allFields,
            scrollClassName = classNameOfFirstScrollableColumnInGrid(dataView),
            fieldLabel,
            frozenField = frozenFieldName(dataView),
            requiresScrollableField = frozenField === '_none_',
            fieldCount = 0,
            columnSeparator,
            first = true,
            requiresCellSeparator = !rowLabels || aggregates;
        if (frozenField !== '_none_' || dataView.get_showMultipleSelection() || dataView.inlineEditing())
            $span('app-frozen-spacer ' + scrollClassName + 'frozen_').appendTo(link);
        link.attr('data-draggable', 'data-item');
        createCheckboxMarkup(dataView, row, rowLabels, link);
        $(fields).each(function (index) {
            var originalField = this,
                field = allFields[originalField.AliasIndex],
                fieldClass = field.itemColumnClass || classNameOfColumnInGrid(dataView, field), // String.format('gc_{0}_{1}_{2}', dataView._id, dataView._viewId, field.Name),
                spanElem,
                v, hyperlink, isNull,
                items = originalField.Items;
            if (!originalField.Hidden && !field.GroupBy && !originalField.OnDemand && originalField.Type !== 'DataView') {
                spanElem = $span('', 'data-draggable="data-item"').appendTo(link).addClass(fieldClass + ' app-field app-field-' + field.Name);
                if (!field.itemColumnClass)
                    field.itemColumnClass = fieldClass;
                var originalValue = v = row[rowLabels ? originalField.Index : field.Index];
                if (v == null) {
                    isNull = true;
                    spanElem.addClass('app-null');
                }
                else
                    hyperlink = toHyperlink(originalField, row);
                v = field.text(v, field.TextMode !== 3);
                if (first)
                    appendMoreButton(dataView, link, frozenField !== '_none_');
                if (field.Type.match(_app._numericTypeRegex))
                    spanElem.addClass('app-field-type-numeric');
                if (rowLabels) {
                    fieldLabel = rowLabels ? rowLabels[index] : null;
                    if (fieldLabel) {
                        v = row[originalField.Index];
                        v = String.localeFormat(originalField.DataFormatString || '{0:n0}', v);
                        spanElem.text(v);
                        $div('app-static-text').text(fieldLabel).insertBefore(spanElem.contents());
                        spanElem.attr('title', field.HeaderText + '\n' + fieldLabel + ' ' + v);
                    }
                }
                else {
                    if (field.Type === 'Boolean') {
                        spanElem.addClass('app-field-type-bool');
                        materialIcon('material-icon-' + (!isNull && items && items.length >= 2 && items[items.length - 2][1] == v ? 'check-box' : 'check-box-outline-blank'), spanElem);
                    }
                    else
                        textOrHtml(field, v, spanElem, true);
                    spanElem.attr('title', field.HeaderText + ':\n' + (field.Type === 'Boolean' ? v : toTooltipText(spanElem)));
                    if (hyperlink)
                        $span().text(spanElem.text()).attr('data-href', hyperlink).appendTo(spanElem.empty());
                }
                setSmartValue(spanElem, field, originalValue, v);
                if (first && rowNumber != null)
                    $span('app-item-number').insertBefore(spanElem.contents()).text(rowNumber + '.');

                if (rowLabels && !aggregates)
                    columnSeparator = $span('app-field-separator').appendTo(link);

                if (frozenField !== '_none_') {
                    spanElem.addClass('app-frozen');
                    if (field.Name === frozenField || frozenField === '_first_') {
                        requiresScrollableField = true;
                        frozenField = '_none_';
                    }
                    else if (rowLabels && columnSeparator)
                        columnSeparator.addClass('app-frozen');
                }
                else if (requiresScrollableField) {
                    spanElem.addClass(scrollClassName);
                    requiresScrollableField = false;
                }

                if (field.TextMode === 2)
                    spanElem.addClass('app-field-data app-field-data-rtf');

                first = false;
                if (requiresCellSeparator) {
                    if (fieldCount === 1)
                        $span('app-cell-separator').insertBefore(spanElem);
                    if (fieldCount > 0)
                        $span('app-cell-separator').insertAfter(spanElem);
                }
                fieldCount++;
            }
        });
        if (requiresCellSeparator && fieldCount === 1)
            $span('app-cell-separator').appendTo(link);
    }

    function observableAttribute() {
        return intersectionObserver ? 'data-observe="true"' : null;
    }
    function createCardMarkup(dataView, row, map, rowNumber, item, link, isList, standalone) {
        var allFields = dataView._allFields,
            isLink = link.is('.ui-btn'),
            heading = $htmlTag('h3').appendTo(link),
            headingField = allFields[map.heading],
            v, columnList = [];

        var renderer = touch.render[dataView._controller];
        if (renderer) {
            renderer = renderer[dataView._viewId];
            if (renderer) {
                renderer = renderer[dataView.extension().viewStyle().toLowerCase()];
            }
        }

        if (renderer) {
            var obj = {
                _formatted: {}
            };
            dataView._allFields.forEach(function (f) {
                var v = obj[f.Name] = row[f.Index];
                obj._formatted[f.Name] = v == null ? '' : _app.htmlEncode(f.text(v));
            })
            link.html(renderer.call(obj, dataView, link));
        }

        if (isLink)
            createCheckboxMarkup(dataView, row, null, link);

        link.attr('data-draggable', 'data-item');

        if (!renderer) {

            // thumb
            if (map.thumb != null) {
                v = row[map.thumb];
                if (v && v.toString().match(/^null/))
                    item.addClass('ui-li-has-thumb');
                else {
                    var blobField = allFields[map.thumb],
                        thumb = $htmlTag('img', 'ui-li-thumb app-field', observableAttribute()).appendTo(link).addClass('app-field-' + blobField.Name).attr('alt', blobField.HeaderText);
                    _app.odp.blob('init', { image: thumb, field: blobField, key: v, crop: blobField.OnDemandStyle !== 2 });
                }
            }

            // heading
            v = row[map.heading];
            v = headingField.text(v);
            if (isLink)
                link.attr('title', v);
            if (headingField.HtmlEncode)
                heading.text(v);
            else
                heading.html(v);
            heading.addClass('app-field app-field-' + headingField.Name).attr('title', headingField.HeaderText + ':\n' + heading.text());
            if (rowNumber)
                $span('app-item-number').insertBefore(heading.contents()).text(rowNumber + '. ');
            heading.contents().wrap(span('app-field-data'));
            //if (isList)
            //    $('<span class="app-item-label"/>').insertBefore(heading.contents()).text(headingField.HeaderText);
            // aside
            // descriptive fields
            if (map.desc.length) {
                var descPara = $p('app-para').appendTo(link),
                    lastParaElem = descPara,
                    descColumn,
                    paraCount = 1,
                    itemValue;
                $(map.desc).each(function (index) {
                    var fieldIndex = this,
                        field = allFields[fieldIndex],
                        label = map.descLabels[index],
                        //labelRwdWidth = map.descLabelsRwd[index],
                        para = map.descPara[index],
                        column = map.descColumn[index], columnWidth,
                        fieldContents,
                        headerText = field.HeaderText,
                        spanElem,
                        isNull, hyperlink;
                    if (para) {
                        if (!lastParaElem.is('.app-para')) {
                            descPara = $p('app-para')/*.appendTo(link)*/;
                            if (!descColumn)
                                descPara.insertAfter(lastParaElem);
                            else
                                descPara.appendTo(link);
                            lastParaElem = descPara;
                            paraCount++;
                        }
                        descColumn = null;
                    }
                    if (column) {
                        if (!descColumn)
                            item.addClass('app-has-column');
                        descColumn = $span('app-column')/*.appendTo(link)*/.addClass(descColumn ? '' : 'app-column-first');
                        columnWidth = 100 / map.descColumnCount + '%'; // map.descColumnWidth[index] / map.descColumnTotalWidth * 100 - 1 + '%';
                        descColumn.css({ minWidth: columnWidth, maxWidth: columnWidth });
                        columnList.push(descColumn);
                    }

                    v = row[fieldIndex];
                    isNull = v == null;
                    //span = addRwd($('<span class="app-item-desc"/>').appendTo(desc), map.descRwd[index]).addClass('app-field app-field-' + field.Name);
                    spanElem = $span('app-item-desc')/*.insertAfter(lastParaElem)*/.addClass('app-field app-field-' + field.Name);
                    //if (descColumn)
                    //    span.appendTo(descColumn);
                    //lastParaElem = span;
                    v = field.text(v);
                    if (isList) {
                        itemValue = $span('app-field-data').appendTo(spanElem);
                        if (field.TextMode === 2)
                            itemValue.addClass('app-field-data-rtf');
                        textOrHtml(field, v, itemValue);

                    }
                    else {
                        itemValue = $span('app-field-data').appendTo(spanElem);
                        if (field.TextMode === 2)
                            itemValue.text(htmlToText(v));
                        else if (field.HtmlEncode || field.TextMode === 3)
                            itemValue.text(v);
                        else
                            itemValue.html(v);
                    }
                    if (isList && fieldIndex === map.heading) {
                        spanElem.addClass('app-item-heading');
                        if (rowNumber)
                            $span('app-item-number').insertBefore(itemValue.contents()).text(rowNumber + '. ');
                    }
                    fieldContents = spanElem.contents();
                    spanElem.attr('title', field.HeaderText + ':\n' + toTooltipText(spanElem));
                    if (!isNull) {
                        if (map.descOriginal[index] != null)
                            field = allFields[map.descOriginal[index]];
                        hyperlink = toHyperlink(field, row);
                        if (hyperlink)
                            fieldContents = fieldContents.wrap(span()).attr('data-href', hyperlink);
                    }

                    if (label != null) {
                        if (settings.ui.list.labels.display === 'DisplayedAbove' || isList)
                            $span('app-field-label-before').insertBefore(fieldContents.first()).text(headerText);
                        if (settings.ui.list.labels.display === 'DisplayedBelow')
                            $span('app-field-label-after').insertAfter(fieldContents.last()).text(headerText);
                    }
                    //if (isNull)
                    //    fieldContents.wrap('<span class="app-null"/>');
                    //else if (!isList)
                    //    fieldContents.wrap('<span class="app-field-data"/>');
                    var fieldData = fieldContents;//.parent();
                    if (isNull)
                        fieldData.addClass('app-null');
                    //fieldContents.wrap('<span class="app-null"/>');
                    setSmartValue(fieldData/*isList ? fieldContents : fieldContents.parent()*/, field, row[fieldIndex], v);
                    if (descColumn)
                        spanElem.appendTo(descColumn);
                    else
                        spanElem.insertAfter(lastParaElem);
                    lastParaElem = spanElem;

                });
                if (paraCount > 1)
                    item.addClass('app-para-multi');
                columnList.forEach(function (c) {
                    $(c).appendTo(link);
                });
            }
        }
        if (isLink) {
            var extension = dataView.extension(),
                oldCommandRow = extension._commandRow,
                columnActionContainer,
                actionGroups = dataView.get_actionGroups('ActionColumn', true),
            /*columnWidth, */actionCount = 0, density = displayDensity();

            if (actionGroups.length && standalone !== true) {
                //var group = dataView.get_actionGroups('ActionColumn', true);
                //columnWidth = actionGroups[0].maxTextLength * .5 + 'em';
                //itemContentContainer = $('<span style="display:table-cell"/>');
                //link.contents().appendTo(itemContentContainer);
                //itemContentContainer.appendTo(link);
                columnActionContainer = $span('app-action-column').appendTo(link); //.insertBefore(heading);//.insertBefore(itemContentContainer)
                //    .css({ maxWidth: columnWidth, minWidth: columnWidth });

                var padding = parseCss(link, 'padding-left'),
                    group = actionGroups[0],
                    groupText = group.groupText,
                    maxTextWidth = group.groupTextMaxWidth, sampleButton;
                if (map.thumb != null) {
                    v = row[map.thumb];
                    if (v && !v.toString().match(/^null/))
                        padding += 70;
                }
                if (map.thumb != null) {
                    v = row[map.thumb];
                    if (v && !v.toString().match(/^null/))
                        padding += 70;
                }
                if (groupText && !maxTextWidth) {
                    maxTextWidth = 0;
                    sampleButton = $span('app-action-column', span('app-action-column-button')).appendTo($body).find('span');
                    $(groupText).each(function () {
                        sampleButton.text(this);
                        maxTextWidth = Math.max(maxTextWidth, sampleButton.outerWidth());
                    });
                    sampleButton.parent().remove();
                    group.groupTextMaxWidth = maxTextWidth;
                }
                columnActionContainer.css({ left: padding, maxWidth: maxTextWidth });

                padding += maxTextWidth + density; // actionGroups[0].maxTextLength * density * .75;
                link.css('padding-left', padding / density + 'em');


                extension._commandRow = row;


                $(dataView.actionGroups('ActionColumn')).each(function () {
                    $(this.Actions).each(function (index) {
                        var action = this;
                        actionCount++;

                        $span('app-action-column-button').appendTo(columnActionContainer)
                            .text(action.HeaderText)
                            .attr({ 'title': action.Description, 'data-action-scope': 'ActionColumn', 'data-action-path': action.Path });
                    });
                });
                link.css('min-height', (actionCount * 2 + 1) + 'em');
                //columnActionContainer.css({ marginTop: '-' + actionCount / 2 * 2.5 + 'em' });
                extension._commandRow = oldCommandRow;
            }

            if (map.aside != null) {
                item.addClass('app-li-has-aside');
                var aside = $p('ui-li-aside').appendTo(link),
                    asideField = allFields[map.aside];
                v = row[map.aside];
                v = asideField.text(v);
                if (asideField.HtmlEncode)
                    aside.text(v);
                else
                    aside.html(v);
                aside.addClass('app-field app-field-' + asideField.Name).attr('title', asideField.HeaderText + ':\n' + aside.text());
                setSmartValue(aside, asideField, row[map.aside], v);
                if (map.asideLabel)
                    $span('app-field-label-other').insertBefore(aside.contents()).text(asideField.HeaderText);
            }
            // count
            if (map.count != null && (aside == null || map.desc.length)) {
                var count = $span('ui-li-count').appendTo(link),
                    countField = allFields[map.count];
                v = row[map.count];
                v = countField.text(v);
                if (countField.HtmlEncode)
                    count.text(v);
                else
                    count.html(v);
                count.addClass('app-field app-field-' + countField.Name).attr('title', countField.HeaderText + ':\n' + count.text());
                setSmartValue(count, countField, row[map.count], v);
                if (map.countLabel)
                    $span('app-field-label-other').insertBefore(count.contents()).text(countField.HeaderText);

            }


            //var originalContent = $('<span style="display:table-cell"/>');
            //link.contents().appendTo(originalContent);
            //originalContent.appendTo(link);

            //$('<span style="width:5em;display:table-cell;margin-top:.5em;padding-right:1em;vertical-align:middle"><span style="font-size:11px;text-transform:uppercase;display:inline-block;border:solid 1px #38c;color:#38c;font-weight:bold;border-radius:3px;padding:.25em .5em;white-space:nowrap">Approve</span></span>').insertBefore(originalContent);

            appendMoreButton(dataView, link);
        }
    }

    function createNewRowTemplate(dataView, listview, itemMap, requiresHeader, lastItem) {
        if (dataView.inlineEditing() && _edit.supports(dataView, 'New')) {
            var extension = dataView.extension(),
                viewStyle = extension.viewStyle(),
                isGrid = viewStyle === 'Grid',
                instruction, gridHeader,
                item, newRow, newItem, newLink;
            if (requiresHeader && isGrid) {
                instruction = extension.instruction();
                if ((instruction || isGrid) && !listview.find('.app-list-instruction').length) {
                    item = $li('app-list-instruction', 'data-role="list-divider"').appendTo(listview);
                    if (instruction)
                        $span('app-view-instruction').appendTo(item).html(instruction);
                    if (isGrid) {
                        gridHeader = createGridHeader(dataView, item);
                        if (!instruction)
                            gridHeader.addClass('app-grid-header-no-description');
                    }
                    item.toggleClass('app-no-records', dataView._totalRowCount < 1);
                }
            }

            newRow = new Array(dataView._allFields.length);
            newItem = $li('dv-item dv-item-new', 'data-icon="false"');
            newLink = $div('ui-btn').appendTo(newItem).data('data-context', { row: newRow, pageIndex: -1 });

            if (isGrid)
                createRowMarkup(dataView, newRow, null, newLink);
            else
                createCardMarkup(dataView, newRow, itemMap, null, newItem, newLink, viewStyle === 'List');
            newLink.find('.app-row-status').addClass('app-row-status-new').attr('title', resourcesMobile.LookupNewAction);
            newLink.find('.app-btn-more').css('visibility', 'hidden');
            if (lastItem)
                newItem.insertAfter(lastItem);
            else
                newItem.appendTo(listview);
            if (!newItem.next().is('.dv-item')) {
                listview.find('.ui-last-child').removeClass('ui-last-child');
                newItem.addClass('ui-last-child');
            }
        }
    }

    function createPageHeaderImage(dataView, page, row) {
        var headerImageField = dataView._headerImageField,
            imageFormat = 't',
            pageInfo;
        if (headerImageField) {
            var v = row[headerImageField.Index],
                isOriginal = headerImageField.tagged('header-image-original');
            if (typeof v == 'string' && !v.match(/^null\|/)) {
                if (headerImageField.tagged('header-image-original'))
                    imageFormat = toLogicalWidth(parseCss(page, 'width'));
                pageInfo = getPageInfo(dataView);
                //pageInfo.dataImage2 = String.format('{0}blob.ashx?{1}={2}|{3}&_nocrop', dataView.resolveClientUrl(dataView.get_appRootPath()), headerImageField.OnDemandHandler, imageFormat, headerImageField.format(row[headerImageField.Index]));
                pageInfo.dataImage = { field: headerImageField, key: headerImageField.format(row[headerImageField.Index]), format: imageFormat, crop: false };
                pageInfo.dataImageOriginal = isOriginal;
            }
        }
    }

    function createPageHeaderIcon(dataView, page, header) {
        var tag = dataView._tag || '',
            icon, iconList = [];
        icon = iconFontIterator.exec(tag);
        while (icon) {
            iconList.push(icon);
            icon = iconFontIterator.exec(tag);
        }
        icon = iconList[0];
        if (!icon && (dataView._lookupInfo || dataView._useCase === 'seeAll'))
            icon = ['', 'material-icon-playlist-add-check'];
        if (icon) {
            header.find('.app-icon').remove();
            materialIcon(icon[1], header.addClass('app-has-icon'));
            var modalTitle = page.find('.app-page-modal-title');
            if (modalTitle.length)
                materialIcon(icon[1], modalTitle.addClass('app-has-icon'));
            page.addClass('app-has-icon');
            if (iconList.length > 1)
                icon = iconList[1];
            materialIcon(icon[1], header).addClass('app-icon-background').attr('data-draggable', 'modaltitle');
        }
    }

    function pageHeaderText(text, header) {
        var lastText,
            headerPage,
            headerIsVisible,
            line1, line2, t1, t2 = '', modalText;

        function showPageHeader() {
            if (header.length > 1)
                header = header.first();
            header.show().next().show();
            var wrapper = headerPage.find('.app-wrapper'), //header.parent(),
                fixedPageHeader = headerPage.find('.app-page-header-fixed'); // wrapper.prev();
            if (!fixedPageHeader.is('.app-page-header'))
                fixedPageHeader = $div('app-page-header app-page-header-fixed').insertBefore(wrapper);

            fixedPageHeader.html(header.html()).css('top', parseCss(wrapper, 'top'));
            fixedPageHeader.toggleClass('app-has-action-bar', header.is('.app-has-action-bar'));
            fixedPageHeader.toggleClass('app-has-icon', header.is('.app-has-icon'));

            var dataImage = pageInfo && pageInfo.dataImage;
            if (dataImage) {
                fixedPageHeader.addClass('app-has-image');
                header.addClass('app-has-image');
                var fixedPageImage = fixedPageHeader.prev();
                if (!fixedPageImage.is('.app-page-header-image'))
                    fixedPageImage = $div('app-page-header-image').insertBefore(fixedPageHeader);
                if (pageInfo.dataImageOriginal)
                    fixedPageImage.addClass('app-page-header-image-original');
                _app.odp.blob('init', dataImage).done(function (result) {
                    _app.odp.blob('url', result.src).done(function (url) {

                        function setBackground(url) {
                            if (isInTransition)
                                setTimeout(setBackground, 32, url)
                            else
                                fixedPageImage.css('background-image', url);
                        }

                        setBackground('url("' + url + '")');
                    });
                });
            }
        }

        function hidePageHeader() {
            header.hide().next().hide();
        }

        if (!header) {
            headerPage = findActivePage();
            if (!headerPage)
                return;
            header = headerPage.find('.app-page-header');
        }
        else
            headerPage = header.first().closest('.ui-page');
        var isModal = headerPage.is('.app-page-modal'),
            headerPageId = headerPage.attr('id'),
            pageInfo = getPageInfo(headerPageId);
        line1 = header.find('h1');
        line2 = header.find('h2');
        headerIsVisible = headerPage.attr('data-page-header') !== 'false';
        //var count = header.attr('data-count');
        if (typeof text == 'boolean') {
            if (text && headerIsVisible)
                showPageHeader();// header.show();
            else {
                hidePageHeader();
                //headerPage.attr('data-page-header', 'false');
            }
        }
        else {
            lastText = header.data('data-text');
            if (text) {
                if (lastText && typeof lastText != 'string' && typeof text == 'string') {
                    lastText[1] = text;
                    text = lastText;
                }
                header.data('data-text', text);
            }
            else
                text = lastText;
            var currentNode = menu.currentNode, modalTitle,
                showPageHeaderTitle = currentNode && currentNode.showPageHeaderTitle;
            if (headerPageId === 'Main' && currentNode) {
                if (currentNode.showPageHeaderDescription)
                    text = [text, currentNode.description];
                if (currentNode.icon && currentNode.showPageHeaderIcon && !header[0].className.match(/\bapp\-has\-icon\b/)) {
                    materialIcon(currentNode.icon, header.addClass('app-has-icon'));
                    materialIcon(currentNode.icon, header).addClass('app-icon-background');
                }
            }
            if (text)
                if (typeof text == 'string')
                    t1 = text.trim();
                else {
                    t1 = (text[0] || '').trim();
                    t2 = text[1].trim();
                }
            if (header.attr('data-locked') !== 'true') {
                //line1.text(t1);
                if (line1.length) {
                    line1[0].innerText = t1;
                    if (t1)
                        modalText = t1;
                }
                //line2.text(t2);
                if (line2.length) {
                    line2[0].innerText = t2;
                    if (t2)
                        modalText += ' / ' + t2;
                    if (!t2)
                        line2[0].innerHTML = '';//'&nbsp;';
                }
                if (t1)
                    if (isModal/* && !isReadingPaneDetail(headerPage)*/) {
                        modalTitle = headerPage.find('.app-page-modal-title');
                        modalText = modalTitle.find('.app-text').text(t1);
                        if (t2 && !modalTitle.next().is('.app-bar-actions'))
                            $span().appendTo(modalText).text(t2);
                    }
                    else {
                        var titlePlaceholder = headerPage.find('.app-page-header-placeholder');
                        if (titlePlaceholder.length) {
                            var staticTitle = titlePlaceholder.find('.app-text').text(t1);
                            if (t2)
                                $span().appendTo(staticTitle).text(t2);
                        }
                    }
                if (pageInfo && t1) {
                    pageInfo.headerText = t2 ? [t1, t2] : t1;
                    pageInfo.text = t1;
                }
            }
            //if (count)
            //    text = String.format('{0} ({1})', text, count);
            if ((text === touch.title() && (!activePageIdentifier('Main') && !showPageHeaderTitle) && !isModal || !headerIsVisible) && !headerPage.is('.app-page-header-show')) {
                hidePageHeader();
                if (headerIsVisible)
                    headerPage.attr('data-page-header', 'false');
            }
            else
                showPageHeader();
            return text;
        }
    }

    function configurePopupListview(popup, menu) {
        var w = Math.ceil(_screen.width * .9);
        if (!menu && usePopupPanel())
            popup.css({ maxWidth: _screen.width - 1, minWidth: _screen.width - 1 });
        else {
            if (w > 800)
                w = 800;
            popup.css({ maxWidth: w });
        }
    }

    function pageTransitions(enable) {
        var style = $settings('ui.transitions.style');
        if (!arguments.length)
            return style;
        if (enable)
            $settings('ui.transitions.style', $settings('ui.transitions.currentStyle'));
        else {
            $settings('ui.transitions.currentStyle', style);
            $settings('ui.transitions.style', 'none');
        }
    }

    _app.search = function (method, options) {
        var that = this,
            argList = arguments;
        _app.getScript('~/js/daf/daf-search', function () {
            return _app._search.apply(that, argList);
        });
    };

    function disposeListViews(content, keep) {
        content.find('.app-listview .ui-btn').removeData();
        var lists = content.find('ul[data-role="listview"]').off().removeData();//.listview('destroy');
        if (!keep) {
            observe(false, lists);
            lists.remove();
        }
    }

    function dataViewSyncCallback(id) {
        var dv = findDataView(id);
        dv._requiresContextRefresh = true;
        touch.notify({ dataView: dv, text: resourcesMobile.Refreshed });
        dv.sync();
    }

    function enumerateDataViewOptions(dataView, options) {
        var isFitted,
            viewStyle,
            multiSelect,
            pageInfo,
            isReadingPane;
        dataView = findDataView(dataView);

        multiSelect = dataView.multiSelect();

        viewStyle = dataView.extension().viewStyle();

        options.push({});

        // add 'Fit to Width' option
        if (viewStyle === 'Grid' && !dataView.tagged('grid-fit-none')) {
            isFitted = dataView.viewProp('grid-is-fitted') !== false;
            options.push({
                text: resourcesMobile.FitToWidth, icon: isFitted ? 'check' : false, callback: function () {
                    var gs = dataView.gridSettings();// dataView.viewProp('gridColumns');
                    if (gs) {
                        gs.width = {};
                        dataView.gridSettings(gs);
                    }
                    dataGridIsFitted(dataView, !isFitted, true);
                    gridStyleChanged(dataView);
                    yardstick();
                    touch.scrollGrid(dataView, 0);
                    setupGridHeaderStyle();
                    syncEmbeddedViews();
                }
            });
        }
        if (viewStyle.match(/Grid|List|Cards/) && !dataView.tagged('multi-select-none') && (!dataView._lookupInfo || dataView._lookupInfo.multiSelect)) {
            if (multiSelect)
                options.push({});
            options.push({ text: resourcesMobile.MultiSelection, icon: multiSelect ? 'check' : false, context: dataView._id, callback: toggleMultiSelectMode });
        }
        if (multiSelect)
            options.push({ text: resourcesEditor.SelectAll, icon: false, context: dataView._id, callback: toggleSelectAll }, {});
        if (viewStyle.match(/Grid|List|Cards/) && !dataView.tagged('inline-editing-option-none') && $settingsEnabled('ui.inlineEditing.enabled')) {
            options.push({
                text: resourcesMobile.InlineEditing, icon: dataView.inlineEditing() ? 'check' : false, context: dataView._id, callback: toggleInlineEditing
            });
        }
        pageInfo = touch.pageInfo(dataView);
        if (pageInfo.home && allowReadingPane() && !dataView.tagged('reading-pane-none')) {
            isReadingPane = isReadingPaneMaster(pageInfo.page);
            options.push({ text: resourcesMobile.ReadingPane, icon: isReadingPane ? 'check' : false/*'material-icon-vertical-split'*/, context: dataView._id, callback: toggleReadingPane });
            if (isReadingPane) {
                //options.push({ text: 'Auto-Open Next Item', icon: false, callback: toggleReadingPane_AutoOpenNextItem }, {})
            }
            options.push({});
        }
        options.push({ text: resourcesPager.Refresh, icon: 'refresh', context: dataView._id, callback: dataViewSyncCallback });
    }

    function allowReadingPane() {
        return _readingPane.enabled && (_screen.portrait ?
            (_screen.height - _screen.toolbarHeight > _readingPane.minTop + _readingPane.minBottom) :
            (_screen.width - appBars.left.width > _readingPane.minLeft + _readingPane.minRight))
    }

    function performWindowResize() {
        startToResize();
        screenChanged();
        pageResized(true);
    }

    function toggleReadingPane(dataView) {
        if (typeof dataView == 'string')
            setTimeout(toggleReadingPane, 100, findDataView(dataView));
        else {
            dataView = findDataView(dataView);
            var pageInfo = touch.pageInfo(dataView),
                page = pageInfo.page,
                enabled = !isReadingPaneMaster(page);
            touch.readingPane(dataView, enabled)
            $('.app-reading-pane-detail').removeClass('app-reading-pane-detail');
            touch.modalDataView();
            if (enabled) {
                //page.addClass('app-page-modal-root');
            }
            else {
                $('.app-reading-pane-bkg,.app-reading-pane-splitter').hide();
            }
            dataView.pageProp('readingPane', enabled)
            performWindowResize();
            touch.refreshMenuStrip();
        }
    }

    //function toggleReadingPane_AutoOpenNextItem(dataView) {
    //    dataView = findDataView(dataView);
    //}

    function toggleMultiSelectMode(dataView) {
        dataView = findDataView(dataView);
        dataView.multiSelect(!dataView.multiSelect());
        dataView.sync();
        _edit.detach();
    }

    function toggleSelectAll(dataView) {
        dataView = findDataView(dataView);
        if (dataView._selectedKeyList.length < dataView._totalRowCount)
            dataView._selectedKeyList = [];
        toggleSelectedRows(findDataView(dataView), null, true);
    }

    function toggleInlineEditing(dataViewId, persist) {
        var dataView = findDataView(dataViewId);
        //if (typeof persist != 'boolean')
        //    persist = null;
        setTimeout(function () {
            if (dataView === activeDataView() && !dataView.commandRow()) {
                hideStickyHeader();
                scrollWrapper(findScrollable(), 0);
            }
            $document.trigger($.Event('inlineeditingmode.dataview.app', { dataView: dataView, inlineEditing: !dataView.inlineEditing() }));
            setupGridHeaderStyle();
        }, 50);
    }

    $document.on('vclick', '.app-bar-actions h3,.app-echo-toolbar h3', function (e) {
        var echo = $(this).closest('.app-echo'),
            dataViewId = echo.length ? echo.attr('data-for') : getPageInfo().id,
            link = $(e.target).closest('h3'),
            uiElementRect = getBoundingClientRect(link),
            options = [],
            oldScope = touch.contextScope(),
            viewSelectorEvent;
        link.addClass('app-selected');
        touch.contextScope(dataViewId);
        enumerateViewOptions(options, false, true);
        viewSelectorEvent = $.Event('viewselector.dataview.app');
        viewSelectorEvent.items = options;
        viewSelectorEvent.dataView = findDataView(dataViewId);
        echoFocus(dataViewId);
        $document.trigger(viewSelectorEvent);

        touch.contextScope(oldScope);

        showListPopup({
            arrow: false,
            anchor: link,
            items: options,
            x: uiElementRect.left,
            y: uiElementRect.bottom - 4
        });
        return false;
    }).on('vclick', '.app-bar-actions .ui-btn, .app-echo-toolbar .ui-btn', function (e, feedback) {
        if (skipTap)
            return;
        var echo = $(this).closest('.app-echo'),
            dataViewId = echo.length ? echo.attr('data-for') : getPageInfo().id,
            link = $(e.target).closest('a'),
            uiElementRect = getBoundingClientRect(link),
            option = link.data('data-context');

        function buttonClicked() {
            tapping();
            var group = option.context && option.context.group,
                context = [],
                dataView = getPageInfo(dataViewId).dataView;
            focusDataViewField(echo);
            if (group) {
                enumerateActions(group.Id, dataView, context, dataView.commandRow());
                showListPopup({
                    arrow: false,
                    items: context,
                    scope: dataView._id,
                    anchor: link,
                    x: uiElementRect.left,
                    y: uiElementRect.bottom - 4
                });
            }
            else
                option.callback(option.context);
        }
        if (option) {
            if (link.length && !isBusy()) {
                echoFocus(link, false);
                tapping(false);
                if (feedback !== false)
                    callWithFeedback(link, buttonClicked);
                else
                    setTimeout(buttonClicked);
            }
            return false;
        }
    }).on('vclick', '.app-bar-actions', function (e) {
        focusScrollable();
    });

    function clearSelectionInEcho(echo) {
        echo.find('.app-echo-inner .app-selected').removeClass('app-selected');
    }

    function echoFocus(selector, scrollIntoView) {
        var echo = findEcho(selector),
            dataViewId,
            fieldName;
        if (echo.length) {
            dataViewId = echo.attr('data-for');
            fieldName = $('#' + dataViewId + '_ph').attr('data-field');
            if (fieldName)
                inputFocus({ fieldName: fieldName, container: findScrollable(echo), scrollIntoView: scrollIntoView });
        }
    }


    function handleSeeAllClick(e) {
        var target = $(e.target),
            link = target.closest('.dv-action-see-all'),
            echo = link.closest('.app-echo'),
            seeAllButton = link.find('.app-btn-next'),
            appInfo = link.find('.app-info'),
            id = echo.attr('data-for'),
            x = lastTouchX(e.pageX);

        function createPagingOptions(action) {
            var startIndex = parseInt(appInfo.attr('data-start-index')),
                endIndex = parseInt(appInfo.attr('data-end-index')),
                rowIndex = action === 'next' ? endIndex + 1 : startIndex - 1,
                pageIndex = 0;
            if (rowIndex < 0)
                rowIndex = 0;
            pageIndex = Math.floor(rowIndex / findDataView(id).extension().pageSize());
            return { action: action, rowIndex: rowIndex, pageIndex: pageIndex, ensurePageIndex: Math.max(action == 'next' ? pageIndex + 1 : pageIndex - 1, 0), pageY: link.offset().top };
        }

        function goToPage(options) {
            link.find('.app-btn-' + options.dir).trigger('vclick');
        }

        if (!target.is('.app-btn-next,.app-btn-prev'))
            if (seeAllButton.length && x >= seeAllButton.offset().left && x < seeAllButton.offset().left + seeAllButton.outerWidth() + 4)
                target = seeAllButton;
            else {
                seeAllButton = link.find('.app-btn-prev');
                if (seeAllButton.length && x >= seeAllButton.offset().left && x < seeAllButton.offset().left + seeAllButton.outerWidth())
                    target = seeAllButton;
                else if (target.closest('.app-info').length)
                    showListPopup({
                        anchor: appInfo, yOffset: 'bottom', items: [
                            //{ text: 'First', icon: 'material-icon-first-page', context: { id: id, dir: 'first' }, callback: goToPage },
                            { text: resourcesMobile.Prev, disabled: link.find('.app-btn-prev').is('.app-btn-disabled'), icon: 'material-icon-navigate-before', context: { id: id, dir: 'prev' }, callback: goToPage },
                            { text: resourcesMobile.Next, disabled: link.find('.app-btn-next').is('.app-btn-disabled'), icon: 'material-icon-navigate-next', context: { id: id, dir: 'next' }, callback: goToPage }
                            //{ text: 'Last', icon: 'material-icon-last-page', context: { id: id, dir: 'last' }, callback: goToPage }
                        ]
                    });
                else
                    return;
            }


        function doNextPrev() {
            target.removeClass('ui-btn-active');
            if (target.is('.app-btn-prev'))
                echoRefresh(id, createPagingOptions('prev'));
            else if (target.is('.app-btn-next'))
                echoRefresh(id, createPagingOptions('next'));
            if (e.feedback !== false)
                fetchEchos();
        }

        if (!target.is('.app-btn-disabled')) {
            link.removeClass('ui-btn-active');
            if (e.feedback === false)
                doNextPrev();
            else
                callWithFeedback(target, doNextPrev);
        }
    }

    $document.on('vclick taphold', '.app-echo-inner', function (e) {
        var target = $(e.target),
            link = target.closest('a,.ui-btn'),
            echo = findEcho(target),
            id = echo.attr('data-for'),
            pageInfo,
            dataView, extension,
            multiSelect,
            dataContext,
            eventType = e.type,
            isClick = eventType !== 'taphold' && !e.ctrlKey,
            isSeeAll = target.closest('.dv-action-see-all').length,
            isSelected;
        if (target.closest('.app-presenter').length && !isSeeAll || target.is('.app-hscrollbar2'))
            return;
        if (skipClick) {
            skipClick = false;
            return;
        }
        echoFocus(echo, false);
        if ((isSeeAll || e.force || link.length && !link.is('.app-divider') && clickable(target, eventType)) && !isBusy()) {
            if (isSeeAll)
                handleSeeAllClick(e);
            else {
                if (target.is('[data-href],[href]'))
                    return;
                touch.contextScope(id);
                pageInfo = getPageInfo(id);
                dataView = pageInfo.dataView;
                extension = dataView.extension();
                dataContext = link.data('data-context');
                isSelected = link.is('.app-selected');
                if (dataView._hasKey()) {
                    if (isActionColumnClick(e, dataView))
                        return false;
                    multiSelect = dataView.get_showMultipleSelection();
                    if (isClick && multiSelect && isMultiSelectCheckBoxClick(e))
                        toggleRowSelection(dataView, link, 'none');
                    else {
                        clearSelectionInEcho(echo);
                        if (isClick)
                            link.addClass('app-selected');
                        else
                            if (isSelected)
                                link.removeClass('app-selected');
                            else
                                link.addClass('app-selected');
                        //dataViewUILinks(dataView).removeClass('app-selected');
                        if (isClick) {
                            if (multiSelect)
                                link.find('.app-btn-check').addClass('app-btn-check-selected');
                            //extension.tap(dataContext, 'none');
                            var isMoreButton = isMoreButtonClick(e);
                            if (checkIfMultiSelect(dataView, link, isMoreButton ? 'none' : null)) {
                                if (isMoreButton)
                                    //extension.tap(dataContext, 'none');
                                    showRowContext(findMoreButton(target));
                            }
                            else
                                if (isMoreButton) {
                                    extension.tap(dataContext, 'none');
                                    showRowContext(findMoreButton(target));
                                }
                                else
                                    extension.tap(dataContext);
                        }
                        else {
                            if (isSelected)
                                extension.clearSelection();
                            else
                                extension.tap(dataContext, 'none');
                            if (eventType === 'taphold')
                                skipClick = true; // tap hold will generate a double click
                        }
                        callWithFeedback(target);
                    }
                    echoRereshToolbarWithDelay(dataView, echo);
                }
                else
                    touch.infoView(dataView, true, dataContext.row);
                touch.contextScope(null);
                return false;
            }
        }
        if (!target.closest('.app-grid-header').length)
            return false;
    })/*.on('contextmenu', function (e) {
        var target = $(e.target);
        if (!(target.is(':input') || target.closest('.app-display-flow').length)) {

            touch.invokeInTargetPage(function () {
                var id = findEcho(target).attr('data-for'),
                    pageInfo = getPageInfo(id);
                if (pageInfo) // pageInfo is null if user right-clicks the background of an active popup menu
                    handleFieldContextMenu(pageInfo.dataView, e);
            });
        }
    })*/.on('vclick', '.app-echo-footer', function (e) {
        var target = $(e.target),
            link = target.closest('.dv-action-see-all');
        if (link.length)
            handleSeeAllClick(e);
        return false;
    }).on('vclick', '.app-echo-instruction, .app-echo-toolbar', function (e) {
        if (!e.isDefaultPrevented())
            echoFocus($(e.target));
    }).on('vclick', '.dv-item.app-clipboard-cut', function () {
        var dataView = uiElementToDataView($(this));
        dataView.clipboard('clear');
        return false;
    });

    function echoCreate(id, container) {
        var echo = $div('app-echo').appendTo(container).attr({ 'id': id + '_echo', 'data-for': id }),
            echoHeader,
            inner,
            dataView = findDataView(id),
            toolbar,
            pageInfo = getPageInfo(id);
        pageInfo.echoChanged = true;
        toolbar = $(
            '<div class="app-echo-toolbar">' +
            htmlTag('h3') +
            htmlTag('a', 'ui-btn ui-btn-inline ui-corner-all ui-icon-dots ui-btn-icon-notext app-btn-more') +
            div('app-echo-controls') +
            span('app-echo-see-all') +
            '</div>').appendTo(echo);
        echoHeader = toolbar.find('h3');
        if (!dataView.get_showViewSelector())
            echoHeader.addClass('app-hidden');
        toolbar.find('.ui-icon-dots').attr('title', labelMore).css('visibility', 'hidden');
        var master = dataView.get_master();// { top: '50%', 'margin-top': seeAll.outerHeight(true) / -2 }
        materialIcon('material-icon-chevron-right', toolbar.find('.app-echo-see-all').toggleClass('app-hidden', (master && master.inserting()) === true).css('visibility', 'hidden').html(resourcesMobile.SeeAll));
        if (!dataView.get_showActionBar())
            toolbar.hide();
        $div('app-echo-instruction').appendTo(echo).hide();


        inner = $div('app-echo-inner').appendTo(echo);
        $div('app-echo-footer').appendTo(echo);
        $div('app-echo-empty').appendTo(inner).text(loadingStatusText);

        toolbar.find('h3').text(getPageInfo(id).text);
        if (!isTouchPointer)
            echo.find('.app-echo-inner').attr('tabindex', 0);
        if (dataView._hidden) {
            echo.hide();
            dataView._hiddenEcho = true;
        }
        return echo;
    }


    function fetchEchos(force, fetchTimeout, selector) {
        var echo, pageId, pageInfo, echoRefreshTimeout = 0;
        if (force)
            findActivePage('.app-echo-toolbar').each(function () {
                echo = $(this).parent();
                pageId = echo.attr('data-for');
                pageInfo = getPageInfo(pageId);
                if (pageInfo.echoId && !pageInfo.dataView._busy())
                    echoRefresh(pageInfo.echoId);
            });
        else
            if (skipTap || isInTransition || touchScrolling || notifyBar && notifyBar.data('busy')) {
                clearTimeout(fetchEchosTimeout);
                //fetchEchosTimeout = setTimeout(function () {
                //    fetchEchos(force, fetchTimeout);
                //}, 50);
                fetchEchosTimeout = setTimeout(fetchEchos, 50, force, fetchTimeout);
            }
            else {
                touch.callWhenVisible(selector || '.app-echo', function (echo) {

                    function doRefreshEcho() {
                        pageId = echo.attr('data-for');
                        pageInfo = getPageInfo(pageId);
                        if (pageInfo) {
                            var dataView = pageInfo.dataView;
                            if (dataView && dataView.canSync() && !dataView.get_isForm() && !(_edit._pending && _edit._dataViewId == dataView._id))
                                if (!pageInfo.echoInitialized/* && (!dataView._filterSource || findDataView(dataView._filterSource).get_selectedKey().length)*/) {
                                    pageInfo.echoId = echo.attr('id');
                                    if (touch.pageInit(pageInfo.id, false) && pageInfo.echoInitialized)
                                        echoRefresh(pageInfo.echoId);
                                }
                                else if (pageInfo.echoChanged)
                                    echoRefresh(pageInfo.echoId);
                        }
                    }

                    var timeout = fetchTimeout == null ? echoRefreshTimeout : fetchTimeout;
                    if (timeout == 0)
                        doRefreshEcho();
                    else
                        setTimeout(doRefreshEcho, timeout);
                    echoRefreshTimeout += 50;
                });
                findActivePage('.app-echo-controls.app-stale').each(function () {
                    var echo = findEcho($(this).removeClass('app-stale')),
                        id = echo.attr('id'),
                        pageInfo = getPageInfo(id.substring(0, id.length - 5));
                    echoRefreshToolbar(pageInfo.dataView, echo);
                });
            }
    }

    function updateViewTitle(container, dataView, pageInfo) {
        var dataViewFieldName = dataView._dataViewFieldName,
            dataViewFieldHeaderText = dataViewFieldName ? findDataView(dataView._dataViewFieldOwnerId).findField(dataViewFieldName).HeaderText : null,
            title = container.find('h3').empty().text(dataViewFieldHeaderText || dataView.get_view().Label || pageInfo.text),
            totalRowCount = dataView._totalRowCount;
        if (container.length && totalRowCount > 0) {
            $('<span> (</span>').appendTo(title);
            $span('app-echo-count').appendTo(title).text(String.format('{0:N0}', totalRowCount));
            $('<span>)</span>').appendTo(title);
            if (!isTouchPointer)
                title.attr('title', title.text());
        }
        return title;
    }

    function gridScrollingFrozenStyle(dataView) {
        var styleName = classNameOfFirstScrollableColumnInGrid(dataView),
            frozenStyle = dataView.session(styleName);
        if (!frozenStyle) {
            frozenStyle = createStyle();
            frozenStyle.text('.' + styleName + 'frozen_{display:none!important}');
            dataView.session(styleName, frozenStyle);
        }
        return frozenStyle;
    }

    function dataGridIsFitted(dataView, value, persist) {
        if (arguments.length >= 2) {
            dataView.session('grid-is-fitted', value);
            if (persist)
                dataView.viewProp('grid-is-fitted', value ? null : false);
        }
        else {
            var gridIsFitted = dataView.session('grid-is-fitted');
            if (gridIsFitted != null && dataView.session('window-width') !== _screen.width)
                gridIsFitted = null;
            if (gridIsFitted == null) {
                gridIsFitted = dataView.viewProp('grid-is-fitted');
                if (gridIsFitted == null)
                    gridIsFitted = !dataView.tagged('grid-fit-none');
                dataView.session('grid-is-fitted', gridIsFitted);
            }
            return gridIsFitted;
        }
    }

    function setupGridHeaderStyle(container) {
        var reset;
        if (!container) {
            container = findActivePage();
            reset = true;
        }
        container.find('.app-grid-header').each(function () {
            var gridHeader = $(this),
                gridHeaderHeight = gridHeader.height(),
                firstField = gridHeader.find('[data-field-name]').first(),
                dataView, inlineEditing,
                headerStyle, headerStyleText;
            if (gridHeaderHeight && firstField.length) {
                dataView = findDataView(gridHeader.attr('data-for'));
                inlineEditing = dataView.inlineEditing();
                if (inlineEditing)
                    gridHeader.addClass('app-grid-header-bold');
                headerStyle = dataView.session('grid-header-style');
                if (!headerStyle) {
                    headerStyle = createStyle();
                    dataView.session('grid-header-style', headerStyle);
                }
                if (reset || dataView.session('reset-grid-header')) {
                    headerStyle.text('').data('text', '');
                    dataView.session('reset-grid-header', null);
                }
                headerStyleText = '.app-grid-header-cv-' + dataView._id + '-' + dataView._viewId + ' > span {height:' + (gridHeader.height() - parseFloat(firstField.css('padding-top')) * 2) + 'px}';
                if (headerStyle.data('text') != headerStyleText)
                    headerStyle.data('text', headerStyleText).text(headerStyleText);
                if (inlineEditing)
                    gridHeader.removeClass('app-grid-header-bold');
            }
        });
        $document.trigger('gridresized.app');
    }

    function gridScrollStyle(dataView, scrollLeft, animate, smooth) {
        var scrollStyle = dataView.session('scroll-style'),
            scrollClassName = classNameOfFirstScrollableColumnInGrid(dataView),
            time = +new Date(),
            smoothingTime = 32 * 12;

        function doFrozenSpacerRefresh() {
            refreshFrozenSpacerInGrid(dataView, scrollLeft)
        }


        function changeStyle() {
            dragMan.scrollingAnimationFrame = null;
            if (animate)
                scrollLeft = -1 * dataView.session('scroll-left');
            var
                lastScrollLeftVarName = scrollClassName + '-last-scroll-left',
                lastScrollLeft = dataView.session(lastScrollLeftVarName) || 0,
                margin = dataView.session('scroll-left-margin') || 0,
                delta = Math.abs(Math.abs(scrollLeft) - Math.abs(lastScrollLeft));
            if (!animate || lastScrollLeft == null || delta != 0) {
                if (smooth && (scrollLeft < (lastScrollLeft || 0)))
                    doFrozenSpacerRefresh();
                dataView.session(lastScrollLeftVarName, scrollLeft);
                // NOTE: do not use animation frames since this will lead to incorrect positioning of inline editor
                //cancelAnimationFrame(dataView._hscrollAF);
                //dataView._hscrollAF = requestAnimationFrame(function () {
                scrollStyle.html('.' + scrollClassName + '{margin-left:' + (scrollLeft ? (scrollLeft + margin + 'px !important') : 'inherit') + (smooth ? ';transition:margin-left ' + smoothingTime + 'ms ease-out' : '') + '}');
                //});
                if (smooth)
                    setTimeout(function () {
                        doFrozenSpacerRefresh();
                        gridScrollStyle(dataView, scrollLeft);
                    }, smoothingTime + 64);
                else
                    doFrozenSpacerRefresh();
                updateHScrollbarOfGrid(dataView);
            }
            if (animate)
                dragMan.scrollingAnimationFrame = requestAnimationFrame(changeStyle);
        }


        if (!scrollStyle) {
            scrollStyle = createStyle();
            dataView.session('scroll-style', scrollStyle);
        }
        if (arguments.length >= 2)
            if (animate) {
                if (dragMan.scrollingAnimationFrame) return;
                //if (dragMan.scrollingAnimationFrame)
                //    cancelAnimationFrame(dragMan.scrollingAnimationFrame);
                dragMan.scrollingAnimationFrame = requestAnimationFrame(changeStyle);
            }
            else
                changeStyle();
        return scrollStyle;
    }

    function refreshFrozenSpacerInGrid(dataView, scrollLeft) {
        var frozenStyle = gridScrollingFrozenStyle(dataView),
            display = scrollLeft ? 'inline-block' : 'none',
            gridFrozenWidth = dataView.session('grid-frozen-width') || 0;
        if (frozenStyle && (frozenStyle.data('display') != display || frozenStyle.data('width') != gridFrozenWidth)) {
            frozenStyle.html('.' + classNameOfFirstScrollableColumnInGrid(dataView) + 'frozen_{display:' + display + '!important;width:' + gridFrozenWidth + 'px}');
            frozenStyle.data('display', display).data('width', gridFrozenWidth);
            return true;
        }
    }

    function resetGridScrolling(dataView) {
        dataView.session('scroll-left', 0);
        updateHScrollbarOfGrid(dataView);
        var scrollStyle = dataView.session('scroll-style');
        if (scrollStyle) {
            scrollStyle.remove();
            dataView.session('scroll-style', null);
        }
    }

    function createListOfAggregates(dataView, container, aggregates) {
        var extension = dataView.extension(),
            aggregateLabels = extension.aggregateLabels(),
            aggregateContainer = $div('app-bar-aggregate-list app-has-scrollbars').appendTo(container);
        $(dataView._fields).each(function (index) {
            var originalField = this,
                field = dataView._allFields[originalField.AliasIndex],
                l = aggregateLabels[index],
                v, a, av;
            if (l) {
                v = aggregates[originalField.Index];
                v = String.localeFormat(originalField.DataFormatString || '{0:n0}', v);
                a = $div('ui-btn ui-inline app-calculated app-btn-static').appendTo(aggregateContainer);
                $span('app-calculated-label').text(field.HeaderText).appendTo(a);
                av = $span('app-calculated-value').text(v).appendTo(a);
                $div('app-static-text').text(l).insertBefore(av.contents());
                a.attr({ 'title': field.HeaderText + '\n' + l + ' ' + v, 'data-tooltip-location': 'above' });
            }
        });
    }

    function checkStartCommand(dataView, immediately) {

        function doCheck() {
            var startContext = [];
            touch.navContext(startContext);
            $(startContext).each(function () {
                var item = this;
                if (item.command == lastCommandName && (!lastCommandArgument || lastCommandArgument == item.argument)) {
                    item.callback(item.context);
                    return false;
                }
            });
        }

        if (!dataView._checkedStartCommand) {
            dataView._checkedStartCommand = true;
            var lastCommandName = dataView.get_lastCommandName(),
                lastCommandArgument = dataView.get_lastCommandArgument();

            if (lastCommandName)
                if (immediately)
                    doCheck();
                else
                    whenPageShown(doCheck);
        }
    }

    function echoNotifyKeyLost(selector) {
        var echo = findEcho(selector),
            toolbar,
            extension;
        echo.find('.app-listview').css('visibility', 'hidden');
        toolbar = echo.find('.app-echo-toolbar');
        toolbar.find('.app-echo-controls .ui-btn,h3 span').remove();
        toolbar.find('.app-echo-see-all').css('visibility', 'hidden');
        extension = findDataView(echo.attr('data-for')).extension();
        if (extension) {
            extension._commandRow = null;
            extension.currentPageIndex(null);
        }
    }

    function dataViewToField(dataView) {
        var dataViewFieldName = dataView._dataViewFieldName,
            dataViewFieldOwnerId = dataView._dataViewFieldOwnerId;
        if (dataViewFieldOwnerId && dataViewFieldName)
            return findDataView(dataViewFieldOwnerId).findField(dataViewFieldName);
    }

    function iterateDetailDataViewFields(field, callback) {
        var detailDataViews = field._detailDataViews;
        if (detailDataViews)
            detailDataViews.forEach(function (dataViewId) {
                var dataView = findDataView(dataViewId),
                    dataViewField = dataViewToField(dataView);
                if (dataViewField) {
                    callback(dataViewField);
                    iterateDetailDataViewFields(dataViewField, callback);
                }
            });
    }

    function notifyKeyLoss(dataView) {
        var dataViewField = dataViewToField(dataView);
        if (dataViewField && dataViewField._detailDataViews)
            iterateDetailDataViewFields(dataViewField, echoNotifyKeyLost);
    }

    function echoRefresh(id, options) {
        if (touchScrolling)
            return;
        var echo = findEcho(id),// $('#' + id),
            isEmbedded;
        if (!echo.length)
            return;
        isEmbedded = echo.is('.app-echo-embedded');
        echo.removeClass('app-density-condensed app-density-compact');
        var scrollable = findScrollable(echo),// echo.parent(),
            scrollTop = scrollable.scrollTop(),
            echoHeight = echo.outerHeight(),
            inner = echo.find('.app-echo-inner').show(),
            footer = inner.next().hide(),
            pageId = echo.attr('data-for'),
            pageInfo = getPageInfo(pageId),
            dataView = pageInfo.dataView,
            clipboardMap = dataView.clipboard('map'),
            defaultPagerSize = dataView._pagerSize,
            inlineEditing = dataView.inlineEditing(),
            styleExpressions = enumerateConditionalStyleExpressions(dataView),
            totalRowCount = dataView._totalRowCount,
            extension = dataView.extension(),
            pageIndex = options ? options.pageIndex : extension.pageIndex() || 0,
            pageSize = extension.pageSize(),
            firstRowIndex = 0,// pageIndex * pageSize,
            lastRowIndex,
            rows = extension.visibleDataRows(pageIndex),
            extraRows,
            list, item, link,
            itemHeight, maxVisibleColumns, cardWidth,
            showRowNumber = dataView.get_showRowNumber() === true,
            toolbar = $(echo).find('.app-echo-toolbar'),
            controls = toolbar.find('.app-echo-controls'),
            seeAlso = toolbar.find('.app-echo-see-all'),
            //seeAlsoButton = seeAlso.find('.ui-btn'),
            title,
            instructionElem = inner.prev(),
            instruction = extension.instruction(false),
            viewStyle = extension.viewStyle(),
            map = extension.itemMap(viewStyle === 'List'),
            screenHeight = _screen.height,// $mobile.getScreenHeight(),
            maxHeight = scrollable.height() * .55, //.618,
            selectedRowIndex,
            maxRowCount,
            pagerSize, itemsPerList, itemsPerColumn,
            seeAllLink,
            selectedRow,
            hasSelection = dataView.get_selectedKey().length > 0,
            autoSelect,
            textInput,
            aggregates = extension.aggregates(),
            presenters, skipStandardViewStyles;

        _edit.detach(dataView._id);

        checkStartCommand(dataView, true);

        if (!dataView._checkedAutoSelect) {
            dataView._checkedAutoSelect = true;
            if (extension._autoSelect) {
                autoSelect = extension._autoSelect;
                if (autoSelect && !isBusy()) {
                    pageInfo.echoChanged = true;
                    touch.contextScope(dataView);
                    extension.tap(autoSelect.row, autoSelect.action);
                    dataView._selectedKeyList = [dataView._createRowKey(autoSelect.row)];
                    touch.contextScope(null);
                    hasSelection = true;
                    fetchEchos(false, 0);
                }
                extension._autoSelect = null;
            }
        }

        if (!echo.is(':visible')) {
            pageInfo.echoChanged = true;
            return;
        }
        pageInfo.echoChanged = false;


        function createAggregates() {
            if (aggregates) {
                createListOfAggregates(dataView, footer.show().empty(), aggregates);
                if (findActivePage('.app-echo').filter(fnVisible).length === 1 && echo.prev().is('.app-page-header,.app-tabs'))
                    maxHeight -= footer.outerHeight();
            }
        }

        function identifySelectedRow() {
            // identify the selected row 
            $(rows).each(function (index) {
                var row = this;
                if (dataView.rowIsSelected(row)) {
                    dataView.extension().headerText(row);
                    selectedRowIndex = index;
                    if (!extension.commandRow()) {
                        //extension.clearSelection();
                        extension.tap(row, 'none');
                        extension.currentPageIndex(pageIndex);
                    }
                    else
                        extension._commandRow = row.slice(0);
                    return false;
                }
            });
            maxRowCount = rows.length;
        }

        function scrollToSelectedRow() {
            var firstPageRowIndex,
                lastPageRowIndex,
                totalRowCount = dataView._totalRowCount;
            if (dataView._autoNewRow) {
                firstRowIndex = Math.floor(totalRowCount / itemsPerList) * itemsPerList;
                if (firstRowIndex === totalRowCount)
                    firstRowIndex -= itemsPerList;
                if (rows.length < itemsPerList && pageIndex) {
                    extraRows = extension.visibleDataRows(pageIndex - 1);
                    if (extraRows)
                        rows = extraRows.concat(rows);
                }
                rows = rows.slice(rows.length - (totalRowCount - firstRowIndex));
            }
            else if (options) {
                selectedRowIndex = null;
                // page to the row specified in options
                if (options.action === 'prev') {
                    firstRowIndex = options.rowIndex - pagerSize + 1;
                    if (firstRowIndex < 0)
                        firstRowIndex = 0;
                    lastPageRowIndex = options.rowIndex % pageSize;
                    firstPageRowIndex = lastPageRowIndex - itemsPerList + 1;
                    if (firstPageRowIndex > 0)
                        rows = rows.slice(firstPageRowIndex, lastPageRowIndex + 1);
                    else {
                        rows = rows.slice(0, lastPageRowIndex + 1);
                        if (options.pageIndex) {
                            extraRows = extension.visibleDataRows(options.pageIndex - 1);
                            if (extraRows)
                                rows = extraRows.slice(extraRows.length + firstPageRowIndex).concat(rows);
                        }
                    }
                }
                else {
                    firstRowIndex = options.rowIndex;
                    firstPageRowIndex = options.rowIndex % pageSize;
                    rows = rows.slice(firstPageRowIndex, firstPageRowIndex + pagerSize + 1);
                    if (rows.length < pagerSize) {
                        extraRows = extension.visibleDataRows(options.pageIndex + 1);
                        if (extraRows)
                            rows = rows.concat(extraRows);
                    }
                }
                identifySelectedRow();
                //maxCount = pageSize;
            }
            else if (selectedRowIndex != null && itemsPerList < totalRowCount) {
                var logicalSelectedRowIndex = pageSize * pageIndex + selectedRowIndex;
                var logicalPageSize = pagerSize || itemsPerList;
                firstRowIndex = Math.floor(logicalSelectedRowIndex / logicalPageSize) * logicalPageSize;
                var rowsToBorrow = pageIndex * pageSize - firstRowIndex;
                if (rowsToBorrow > 0) {
                    extraRows = extension.visibleDataRows(pageIndex - 1);
                    rows = extraRows.slice(pageSize - rowsToBorrow).concat(rows);
                    selectedRowIndex += rowsToBorrow;
                }
                else if (rowsToBorrow < 0) {
                    rows = rows.slice(-rowsToBorrow);
                    selectedRowIndex += rowsToBorrow;
                }
                if (rows.length < logicalPageSize) {
                    extraRows = extension.visibleDataRows(pageIndex + 1);
                    if (extraRows)
                        rows = rows.concat(extraRows);
                }
                maxRowCount = pageSize;
            }
        }

        function seeAllStats(seeAll, startIndex, endIndex) {
            seeAll.empty();//.removeClass('ui-btn-icon-left');
            //$('<span class="app-btn-see-all"/>').appendTo(seeAll).text(resourcesMobile.SeeAll).attr('title', resourcesMobile.SeeAll);
            var button = $span('app-btn-prev').appendTo(seeAll).text(resourcesMobile.Prev).attr('title', resourcesPager.Previous);
            if (!startIndex)
                button.addClass('app-btn-disabled');
            button = $span('app-btn-next').appendTo(seeAll).text(resourcesMobile.Next).attr('title', resourcesPager.Next);
            $span('app-btn-separator').insertBefore(button);
            if (endIndex >= totalRowCount - 1)
                button.addClass('app-btn-disabled');
            $span('app-info').appendTo(seeAll).attr({ 'data-start-index': startIndex, 'data-end-index': endIndex }).html(String.format(resourcesPager.ShowingItems, startIndex + 1, Math.min(endIndex + 1, totalRowCount), totalRowCount) + '<i class="app-icon material-icon">arrow_drop_down</i>');
            return seeAll;
        }

        function createSeeAll() {
            seeAllLink = $div('dv-action-see-all').appendTo(inner).html('text');
        }

        if (!rows || options && pageSize * options.ensurePageIndex < totalRowCount && !extension.visibleDataRows(options.ensurePageIndex)) {
            dataView.goToPage(options && options.pageIndex || 0, true);
            extension.echoCallback = function () {
                echoRefresh(id, options);
            };
            return;
        }

        echo.toggleClass('app-can-drag', dataView.clipboard('drag'));

        title = updateViewTitle(toolbar, dataView, pageInfo);

        if (!pageInfo.echoInitialized) {
            pageInfo.echoInitialized = true;
            pageInfo.refreshed = true;
        }

        // setup a page stub to prevent loss of scrolling.
        if (!isEmbedded)
            echo.css('padding-bottom', '');

        touch.stub('put', scrollable);

        if (instruction && (rows.length || instruction.match(/"app-filter"/)))
            instructionElem.html(instruction).show();
        else
            instructionElem.hide();

        // clear previous content
        disposeListViews(inner);
        presenters = inner.find('div[data-role="presenter"]').detach();
        inner.empty();
        presenters.appendTo(inner);
        touch.presenter('hide', { container: inner });

        // render data cards / rows
        if (!rows.length && !(dataView.get_searchOnStart() && viewStyle === 'Grid') && !(inlineEditing && viewStyle === 'Grid'))
            $div('app-echo-empty').appendTo(inner.height('')).text(labelNoRecords);
        else {
            //inner.removeClass('app-no-scrolling app-horizontal-scrolling');
            if (!dataView._filterSource && scrollable.find('.app-echo').filter(fnVisible).length === 1) {
                maxHeight = screenHeight - inner.offset().top + _screen.top;
                if (!isTouchPointer) {
                    maxHeight -= parseCss(echo, 'padding-top') + parseCss(echo, 'padding-bottom');
                    if (viewStyle && viewStyle.match(/List|Grid|Cards/)) {
                        scrollable.css('overflow', ''/*'hidden'*/);
                        overflowIsHidden = true;
                    }
                    else
                        scrollable.css('overflow', '');
                }
            }
            else
                if (!isTouchPointer)
                    scrollable.css('overflow', '');
            addSpecialClasses(dataView, inner);
            if (touch.presenter('supports', viewStyle)) {
                var supportedStyles = [],
                    viewStyleIsSupported = false;
                touch.presenter('enumerate', { id: dataView._id, list: supportedStyles });
                $(supportedStyles).each(function () {
                    if (this.name === viewStyle) {
                        viewStyleIsSupported = true;
                        return false;
                    }
                });
                // render echo as "presenter-style"
                inner/*.addClass('app-no-scrolling')*/.height('');
                //createAggregates();
                if (viewStyleIsSupported && touch.presenter('show', { name: viewStyle, id: dataView._id, container: inner, maxHeight: Math.ceil(maxHeight) }))
                    skipStandardViewStyles = true;
                else
                    viewStyle = 'Grid';//gridViewIsPreferred() ? 'Grid' : 'List';
            }
            if (!skipStandardViewStyles) {
                if (!options)
                    identifySelectedRow();
                // perform standard rending of data rows in echo
                var pageFooter = findFooterOnActivePage();
                maxHeight += pageFooter.is(':visible') ? -(pageFooter.outerHeight()) : 0;

                if (viewStyle === 'Grid') {
                    // ************ GRID **********************************************************************
                    inner/*.addClass('app-no-scrolling')*/.height('');
                    disposeListViews(inner);

                    list = $ul('app-listview app-grid', 'data-role="listview"').addClass(dataViewToClassNames(dataView)).appendTo(inner);
                    item = $li('app-list-instruction', 'data-role="list-divider"').appendTo(list);
                    addMultiSelectClass(dataView, list);
                    createGridHeader(dataView, item);

                    // create sample row to determine the number of items per list
                    item = $li('dv-item', 'data-icon="false"').appendTo(list);
                    if (rows.length)
                        createRowMarkup(dataView, rows[0], null, $div().appendTo(item));
                    list.listview().listview('refresh');
                    itemHeight = item.outerHeight();
                    yardstick(list);
                    setupGridHeaderStyle(list);
                    maxHeight -= item.prev().outerHeight() + 1;
                    itemsPerList = Math.ceil(maxHeight / (itemHeight + 1));
                    if (aggregates)
                        itemsPerList -= 2;
                    item.remove();
                    if (itemsPerList < 4)
                        itemsPerList = 4;
                    if (itemsPerList > pageSize)
                        itemsPerList = pageSize;

                    pagerSize = defaultPagerSize || dataView.session('gridPagerSize');
                    if (pagerSize)
                        itemsPerList = pagerSize;
                    var oldSelectedIndex = selectedRowIndex;
                    if (!pagerSize && oldSelectedIndex != null)
                        selectedRowIndex = 0;

                    scrollToSelectedRow();

                    var beforeList = [], afterList = [], physicalHeight = 0, listItem, removeDir;

                    // render grid rows
                    $(rows).each(function (index) {
                        var row = this,
                            rowNumber = firstRowIndex + index + 1,
                            item = $li('dv-item', 'data-icon="false"').appendTo(list),
                            link = $div('ui-btn').appendTo(item).data('data-context', { row: this.slice(0), pageIndex: 0 });
                        createRowMarkup(dataView, row, showRowNumber ? rowNumber : null, link);
                        link.data('rowIndex', rowNumber - 1);
                        if (index === selectedRowIndex) {
                            selectedRow = row;
                            link.addClass('app-selected');
                            if (dataView._raiseSelectedDelayed) {
                                dataView._raiseSelectedDelayed = false;
                                dataView.raiseSelected();
                            }
                        }
                        dataView.clipboard('map', { map: clipboardMap, link: link });
                        evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
                        lastRowIndex = firstRowIndex + index;
                        if (pagerSize && index === pagerSize - 1)
                            return false;
                        if (!selectedRowIndex || index < selectedRowIndex)
                            beforeList.push(item);
                        else
                            afterList.push(item);
                        if (itemsPerList < maxRowCount && itemsPerList - 1 === index)
                            return false;
                    });
                    if (aggregates) {
                        item = $li('dv-item', 'data-icon="false"').appendTo(list);
                        link = $div('ui-btn app-divider app-calculated').appendTo(item);
                        createRowMarkup(dataView, aggregates, null, link, extension.aggregateLabels(), true);
                    }

                    // create a horizontal scrollbar
                    gridScrollingFrozenStyle(dataView);
                    var scrollbarHandle = $('<span class="app-hscrollbar2" data-view="' + dataView._id + '"><span class="app-hscrollbar-handle" data-draggable="hscrollbar"/></span>').appendTo(inner).find('.app-hscrollbar-handle');

                    // create "see all" item
                    if (itemsPerList < maxRowCount || maxRowCount < totalRowCount)
                        createSeeAll();
                    list.listview().listview('refresh');
                    if (seeAllLink)
                        maxHeight -= seeAllLink.outerHeight();
                    list.find('.dv-item').each(function () {
                        physicalHeight += $(this).outerHeight();
                    });

                    function removeRedundantListItem() {
                        if (listItem) {
                            physicalHeight -= listItem.outerHeight();
                            listItem.find('.ui-btn').removeData();
                            listItem.remove();
                            //list.listview('refresh');
                        }
                    }

                    if (physicalHeight > maxHeight && !pagerSize) {
                        if (!seeAllLink) {
                            createSeeAll();
                            maxHeight -= seeAllLink.outerHeight();
                        }
                        if (afterList.length)
                            while (beforeList.length + afterList.length + 1 > 3 && physicalHeight > maxHeight) {
                                listItem = null;
                                if (removeDir === 'before') {
                                    removeDir = 'after';
                                    if (beforeList.length > 1 && beforeList.length >= afterList.length) {
                                        listItem = beforeList[0];
                                        beforeList.splice(0, 1);
                                        firstRowIndex++;
                                    }
                                }
                                else {
                                    removeDir = 'before';
                                    if (afterList.length > 1 && afterList.length > beforeList.length) {
                                        listItem = afterList[afterList.length - 1];
                                        afterList.splice(afterList.length - 1, 1);
                                        lastRowIndex--;
                                    }
                                }
                                removeRedundantListItem();
                            }
                        else {
                            while (beforeList.length > 3 && physicalHeight > maxHeight) {
                                if (options && options.action == 'prev') {
                                    listItem = beforeList[0];
                                    beforeList.splice(0, 1);
                                    firstRowIndex++;
                                }
                                else {
                                    listItem = beforeList[beforeList.length - 1];
                                    beforeList.splice(beforeList.length - 1, 1);
                                    lastRowIndex--;
                                }
                                removeRedundantListItem();
                            }
                        }
                        list.listview('refresh');
                    }
                    if (!pagerSize) {
                        pagerSize = list.find('.dv-item').length;
                        if (aggregates)
                            pagerSize--;
                        if (physicalHeight < maxHeight) {
                            pagerSize = Math.floor(maxHeight / (physicalHeight / pagerSize));
                            if (pagerSize > pageSize)
                                pagerSize = pageSize;
                        }
                        if (pagerSize < 3)
                            pagerSize = 3;
                        dataView.session('gridPagerSize', pagerSize);
                        if (oldSelectedIndex != null) {
                            echoRefresh(id, options);
                            return;
                        }
                    }
                    if (inlineEditing) {
                        var lastLink = list.find('.dv-item .ui-btn:not(.app-calculated)').last();
                        if (lastLink.length) {
                            if (lastLink.data('rowIndex') === dataView._totalRowCount - 1)
                                createNewRowTemplate(dataView, list, null, false, lastLink.parent());
                        }
                        else
                            // Empty dataview
                            createNewRowTemplate(dataView, list);
                    }
                    if (seeAllLink) {
                        if (totalRowCount <= pagerSize)
                            seeAllLink.remove();
                        else {
                            seeAllStats(seeAllLink/*.toggleClass('ui-btn-icon-right ui-btn-icon-left')*/, firstRowIndex, lastRowIndex);
                            //affixSeeAll(seeAllLink);
                        }
                    }
                    updateHScrollbarOfGrid(dataView, scrollbarHandle);
                }
                else if (viewStyle === 'List') {
                    // ************ LIST **********************************************************************
                    itemsPerList = pageSize;
                    pagerSize = defaultPagerSize || dataView.session('listPagerSize');
                    if (pagerSize)
                        itemsPerList = pagerSize;

                    scrollToSelectedRow();

                    // render echo as "list"
                    inner/*.addClass('app-no-scrolling')*/.height('');
                    disposeListViews(inner);
                    createAggregates();
                    list = $ul('app-listview app-onecolumnview', 'data-role="listview"').addClass(dataViewToClassNames(dataView)).appendTo(inner).listview();
                    var listHeight = 0,
                        rowIndex = 0,//selectedRowIndex == null ? 0 : selectedRowIndex,
                        removeLastItem;

                    yardstick(list);

                    addMultiSelectClass(dataView, list);

                    seeAllLink = $div('dv-action-see-all').text('text').insertAfter(list);
                    maxHeight -= seeAllLink.outerHeight();
                    seeAllLink.remove();

                    var listRowCount = 0;
                    lastRowIndex = firstRowIndex;
                    while (rowIndex >= 0 && rowIndex < rows.length) {
                        var row = rows[rowIndex],
                            rowNumber = firstRowIndex + rowIndex + 1,
                            item = $li('dv-item', 'data-icon="false"'),
                            link = $div('ui-btn').appendTo(item).data('data-context', { row: row.slice(0), pageIndex: 0 });
                        // render a list item;
                        item.appendTo(list)
                        createCardMarkup(dataView, row, map, showRowNumber ? rowNumber : null, item, link, true);
                        if (rowIndex == selectedRowIndex) {
                            selectedRow = row;
                            link.addClass('app-selected');
                        }
                        dataView.clipboard('map', { map: clipboardMap, link: link });
                        if (!pagerSize)
                            list.listview('refresh');
                        listRowCount++;
                        evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
                        listHeight += item.outerHeight();
                        // ensure that we have "overflow" and at least 3 items in the list
                        if (pagerSize) {
                            if (listRowCount == pagerSize || rowIndex == rows.length - 1)
                                break;
                        }
                        else if (listHeight >= maxHeight && listRowCount > 2) {
                            if (listRowCount > 3) {
                                removeLastItem = true;
                                lastRowIndex--;
                            }
                            break;
                        }
                        // figure the next row to render
                        lastRowIndex++;
                        rowIndex++;
                    }
                    // create "See All" button
                    if (listRowCount < totalRowCount) {
                        // remove last item
                        if (removeLastItem) {
                            link.removeData();
                            item.remove();
                        }
                        // create "See All" item
                        list.listview('refresh');
                        seeAllStats($div('dv-action-see-all').insertAfter(list), firstRowIndex, lastRowIndex);
                    }
                    if (pagerSize)
                        list.listview('refresh');
                    else {
                        pagerSize = list.find('.dv-item').length;
                        if (link.is('.dv-action-see-all'))
                            pagerSize--;
                        if (pagerSize < 3)
                            pagerSize = 3;
                        dataView.session('listPagerSize', pagerSize);
                        if (selectedRowIndex != null && !selectedRow) {
                            echoRefresh(id, options);
                            return;
                        }
                    }
                }
                else {
                    // ************ CARDS **********************************************************************

                    // render echo as 'Cards'

                    list = $ul('app-listview app-cardcolumn', 'data-role="listview"').appendTo(inner);
                    addMultiSelectClass(dataView, list);
                    addSpecialClasses(dataView, list);
                    createAggregates();

                    var cardsPagerInfo = dataView.session('cardsPagerSize');
                    if (!cardsPagerInfo) {
                        // measure seeAllLink
                        seeAllLink = $li('dv-item', 'data-icon="false"', div('ui-btn dv-action-see-all')).appendTo(list);
                        maxHeight -= seeAllLink.outerHeight();
                        seeAllLink.remove();

                        // measure height of a single list item
                        item = $li('dv-item', 'data-icon="false"').appendTo(list);
                        link = $div('ui-btn').appendTo(item);
                        createCardMarkup(dataView, rows[0], map, showRowNumber ? 1 : null, item, link);
                        if (rows.length > 1) {
                            item = $li('dv-item', 'data-icon="false"').appendTo(list);
                            link = $div('ui-btn').appendTo(item);
                            createCardMarkup(dataView, rows[1], map, showRowNumber ? 1 : null, item, link);
                        }
                        if (rows.length > 2) {
                            item = $li('dv-item', 'data-icon="false"').appendTo(list);
                            link = $div('ui-btn').appendTo(item);
                            createCardMarkup(dataView, rows[2], map, showRowNumber ? 1 : null, item, link);
                        }
                        list.listview();
                        itemHeight = item.outerHeight(true);

                        //itemsPerColumn = defaultPagerSize;
                        //if (!defaultPagerSize) {
                        itemsPerColumn = Math.floor(maxHeight / itemHeight);
                        if (itemsPerColumn < 1)
                            itemsPerColumn = 1;
                        maxVisibleColumns = Math.round(inner.innerWidth() / Math.min(inner.innerWidth(), item.outerWidth(true)));
                        if (maxVisibleColumns === 1 && getBoundingClientRect(scrollable).width/*.width()*/ >= toPhysicalWidth('md'))
                            maxVisibleColumns++;
                        if (itemsPerColumn < 2)
                            itemsPerColumn = 2;
                        if (defaultPagerSize && itemsPerColumn * maxVisibleColumns < defaultPagerSize)
                            itemsPerColumn = Math.ceil(defaultPagerSize / maxVisibleColumns);


                        pagerSize = itemsPerColumn * maxVisibleColumns;
                        if (pagerSize > pageSize)
                            pagerSize = Math.floor(pageSize / itemsPerColumn) * itemsPerColumn;
                        cardWidth = maxVisibleColumns === 1 ? Math.floor(item.outerWidth(true)) : Math.floor(inner.innerWidth() / maxVisibleColumns - parseCss(list, 'margin-right') + parseCss(list, 'margin-right') / maxVisibleColumns)
                            - 2 * maxVisibleColumns + 1; // subtract borders of items in all columns
                        dataView.session('cardsPagerSize', { pagerSize: pagerSize, itemsPerColumn: itemsPerColumn, columns: maxVisibleColumns, cardWidth: cardWidth });
                    }
                    else {
                        list.listview();
                        pagerSize = cardsPagerInfo.pagerSize;
                        itemsPerColumn = cardsPagerInfo.itemsPerColumn;
                        cardWidth = cardsPagerInfo.cardWidth;
                        maxVisibleColumns = cardsPagerInfo.columns;
                    }

                    itemsPerList = pagerSize;

                    // reduce rows while columns are available
                    while (rows.length <= (itemsPerColumn - 1) * maxVisibleColumns && itemsPerColumn >= 1)
                        itemsPerColumn--;
                    scrollToSelectedRow();

                    // see if we need "See All"
                    disposeListViews(inner);
                    // render lists
                    lastRowIndex = firstRowIndex;
                    var cardsPerList;
                    $(rows).each(function (index) {
                        if (!list || index % itemsPerColumn === 0) {
                            list = $ul('app-listview app-cardcolumn', 'data-role="listview"').addClass(dataViewToClassNames(dataView)).appendTo(inner);
                            list.css({ 'min-width': cardWidth, 'max-width': cardWidth });
                            addSpecialClasses(dataView, list);
                            addMultiSelectClass(dataView, list);
                            cardsPerList = 0;
                        }
                        var row = this,
                            rowNumber = firstRowIndex + index + 1,
                            item = $li('dv-item', 'data-icon="false"').appendTo(list),
                            link = $div('ui-btn').appendTo(item).data('data-context', { row: this.slice(0), pageIndex: 0 });
                        createCardMarkup(dataView, row, map, showRowNumber ? rowNumber : null, item, link);
                        if (index === selectedRowIndex) {
                            selectedRow = row;
                            link.addClass('app-selected');
                        }
                        dataView.clipboard('map', { map: clipboardMap, link: link });
                        evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
                        cardsPerList++;
                        if (lastRowIndex === firstRowIndex + pagerSize - 1)
                            return false;
                        lastRowIndex++;
                    });

                    if (cardsPerList < itemsPerColumn && maxVisibleColumns > 1) {
                        var numberOfMissingItems = itemsPerColumn - cardsPerList;
                        if (numberOfMissingItems < itemsPerColumn)
                            while (numberOfMissingItems-- > 0) {
                                var item = $li('dv-item').appendTo(list),
                                    link = $div('ui-btn').appendTo(item);
                                createCardMarkup(dataView, rows[0], map, showRowNumber ? 1 : null, item, link);
                                link.css('display', 'none').parent().addClass('app-hidden');
                            }
                    }

                    list = footer.find('.app-echo-container-see-all').hide();
                    if (totalRowCount > pagerSize) {
                        footer.show();
                        if (!list.length) {
                            list = $div('app-echo-container-see-all');
                            if (aggregates)
                                list.insertBefore(footer.find('.app-bar-aggregate-list'));
                            else
                                list.appendTo(footer);

                            link = $div('dv-action-see-all').appendTo(list);
                        }
                        else {
                            list.show();
                            link = list.find('.dv-action-see-all');
                        }
                        //seeAllLink = seeAllStats(link, firstRowIndex, Math.min(totalRowCount, firstRowIndex + pagerSize) - 1);
                        seeAllStats(link, firstRowIndex, lastRowIndex);
                    }

                    yardstick(inner.find('.app-listview').listview());
                }
            }
        }
        if (!isEmbedded)
            if (!echo.prev().is('.app-echo') && !echo.next().is('.app-echo'))
                echo.css('padding-bottom', 0);
        if (!skipStandardViewStyles)
            if (hasSelection) {
                if (!selectedRow && !options)
                    extension.clearSelection();
                else
                    if (!dataView.rowIsSelected(extension.commandRow()) && !dataView.multiSelect()) {
                        extension.clearSelection();
                        extension.tap(selectedRow, 'none');
                    }
            }
            else if (extension.commandRow())
                extension.clearSelection();
        seeAlso.css({ 'visibility': totalRowCount === 0 ? 'hidden' : '', 'margin-top': seeAlso.outerHeight(true) / -2 });
        echoRefreshToolbar(dataView, echo, hasSelection, controls, title, seeAlso);


        if (isEmbedded)
            syncEmbeddedViews(scrollable, 0);
        textInput = findInput();// $('.app-data-input');
        if (textInput.length && !iOS && textInput.offset().top > echo.offset().top)
            scrollable.scrollTop(scrollTop + echo.outerHeight() - echoHeight);
        else
            updateVScrollbar(scrollable, null, true);


        var autoHighlight = echo.data('auto-highlight');
        echo.removeData('auto-highlight');
        if (autoHighlight) {
            var clickEvent = $.Event('vclick', { ctrlKey: true, force: true }),
                buttons = echo.find('.app-listview .dv-item .ui-btn:not(.app-calculated):not(.dv-action-see-all)'),
                button = autoHighlight === 'first' ? buttons.first() : buttons.last();
            if (!button.is('.app-selected')) {
                focusScrollable(scrollable);
                touch.lastTouch(false);
                button.trigger(clickEvent);
                if (inlineEditing)
                    _edit.scrollIntoView();
                else
                    makeVisible(button);
                touch.lastTouch(true);
            }
        }

        touch.stub('trim', scrollable);

        observe(true, echo);

        _edit.sync();

        if (!dataView._selectedKey.length)
            notifyKeyLoss(dataView);

        $document.trigger($.Event('dataviewrefresh.app', { dataView: dataView }));

        if (dataView.get_searchOnStart())
            _app.search('show', dataView._id);
    }

    function echoRefreshToolbar(dataView, echo, hasSelection, controls, title, seeAll) {
        if (hasSelection == null)
            hasSelection = dataView.get_selectedKey().length > 0;
        if (!controls) {
            if (!echo)
                echo = findEcho(dataView);// $('#' + dataView._id + '_echo');
            if (!echo.length)
                return;
            controls = echo.find('.app-echo-toolbar .app-echo-controls');
            title = controls.parent().find('h3');
            seeAll = controls.next();
        }
        var moreButton = title.next().css('visibility', ''),
            x1 = moreButton.offset().left + moreButton.outerWidth(),
            x2 = seeAll.offset().left - 16;

        refreshToolbarButtons(dataView, controls, x1, x2);
    }

    function refreshToolbarButtons(dataView, controls, x1, x2, hideSearch, promoIcon) {
        var context = [],
            toolbarContext = [],
            currentScope,
            controlsLeft, controlsWidth,
            overlappedButtons = [], textButtons = [],
            groupId, buttonGroups = {}, buttonList;

        function buttonIsOverlapped(button) {
            return button.offset().left + button.outerWidth() > controlsLeft + controlsWidth - 1;
        }

        if (!x1 || !x2)
            controls.addClass('app-stale');
        else if (x2 - x1 >= 28) {
            controls.find('.ui-btn').data('data-context', null);
            controls.hide().contents().remove();
            currentScope = touch.contextScope();
            touch.contextScope(dataView);
            dataView.extension().context(context, ['ActionBar']);
            touch.contextScope(currentScope);
            $(context).each(function () {
                var option = this;
                if (option.system) {
                    if (option.icon === 'search' && !hideSearch)
                        toolbarContext.push(option);
                }
                else if (option.text && !option.isStatic)
                    toolbarContext.push(option);
            });
            $(toolbarContext).each(function () {
                var option = this,
                    link,
                    icon = option.icon,
                    text = option.text,
                    isMaterialIcon;
                groupId = option.group;
                if (!promoIcon || icon !== promoIcon) {
                    link = $a('ui-btn').appendTo(controls).data('data-context', option).attr({ 'title': actionToTooltip(option), 'data-action-path': option.path || groupId });
                    if (icon === 'dots' || option.transition)
                        link.addClass('app-has-children ui-mini').text(text);
                    else {
                        link.addClass('ui-mini ui-btn-icon-left');
                        if (icon === 'search')
                            link.toggleClass('ui-btn-icon-left ui-btn-icon-notext ui-mini ');
                        else
                            link.text(text);
                        icon = toMaterialIcon(icon);
                        isMaterialIcon = iconIsMaterial(icon);
                        if (isMaterialIcon)
                            materialIcon(icon, link);
                        if (icon === false)
                            link.removeClass('ui-btn-icon-left');
                        buttonList = buttonGroups[groupId];
                        if (!buttonList)
                            buttonList = buttonGroups[groupId] = [];
                        buttonList.push(link);
                    }
                }
            });
            controlsWidth = x2 - x1;
            controls.width(controlsWidth).show();
            // auto-trim toolbar buttons
            controlsLeft = controls.offset().left;
            controls.find('.ui-btn').each(function () {
                var button = $(this);
                if (button.is('.ui-btn-icon-left'))
                    textButtons.push(button);
                if (buttonIsOverlapped(button))
                    overlappedButtons.push(button);
            });
            if (overlappedButtons.length) {
                textButtons.reverse();
                while (overlappedButtons.length) {
                    var button = overlappedButtons[0],
                        overlapped = buttonIsOverlapped(button);
                    if (overlapped) {
                        isGeneric = button.is('.ui-icon-carat-r');
                        if (isGeneric)
                            overlappedButtons.push(button);
                        else if (button.is('.ui-btn-icon-left')) {
                            button.toggleClass('ui-btn-icon-notext ui-mini ui-btn-icon-left');
                            overlapped = buttonIsOverlapped(button);
                        }
                        if (!isGeneric && overlapped) {
                            // hide any preceding button with text until this button shows up
                            $(textButtons).each(function () {
                                var textButton = this;
                                if (overlappedButtons.indexOf(textButton) === -1 && textButton.is('.ui-btn-icon-left')) {
                                    if (textButton.is('.ui-icon-carat-r'))
                                        textButton.hide();
                                    else
                                        textButton.toggleClass('ui-btn-icon-notext ui-mini ui-btn-icon-left');
                                    overlapped = buttonIsOverlapped(button);
                                    if (!overlapped)
                                        return false;
                                }

                            });
                        }
                        if (overlapped) {
                            $(overlappedButtons).each(function () {
                                this.hide();
                            });
                            break;
                        }
                    }
                    overlappedButtons.splice(0, 1);
                }
            }
            else
                for (groupId in buttonGroups) {
                    buttonList = buttonGroups[groupId];
                    if (buttonList.length > 1) {
                        $(buttonList).each(function () {
                            $(this).addClass('app-group-item');
                        });
                        buttonList[0].addClass('app-group-first');
                        buttonList[buttonList.length - 1].addClass('app-group-last');
                    }
                }
            // dummy button preserves the height of the toolbar
            $a('ui-btn ui-mini ui-btn-icon-left').appendTo(controls).css('visibility', 'hidden').text('i');
        }
        else
            controls.hide();
    }

    function createActionBar(dataView, content) {
        var toolbar = $div('app-bar-actions ui-header ui-bar-inherit ui-header-fixed').insertBefore(content),
            viewHeader = $htmlTag('h3').appendTo(toolbar).text(getPageInfo(dataView).text);
        $a('ui-btn ui-btn-inline ui-btn-icon-notext ui-corner-all ui-icon-dots app-btn-more').appendTo(toolbar);
        var controls = $div('app-bar-controls').appendTo(toolbar);
        toolbar.data({ selector: viewHeader, controls: controls });
        return toolbar;
    }

    function tapIsCanceled() {
        var result = skipTap || isInTransition;
        return result === true;
    }

    function clickable(target, eventType) {
        if (skipTap || isInTransition || dragMan.dragged())
            return false;
        if (iOS) {
            var link = $(target).closest('a,.ui-btn');
            if (link.data('scroll-check') === true)
                link.data('scroll-check', false);
            else {
                touchScrolling = false;
                var scrollable = link.closest('.app-wrapper,.ui-panel-inner'),
                    scrollStopTime = scrollable.data('scroll-stop-time'),
                    scrollTop = scrollable.scrollTop();
                if (scrollStopTime && (timeNow() - scrollStopTime.getTime() > 5000))
                    return true;
                link.data('scroll-check', true);
                setTimeout(function () {
                    if (!eventType)
                        eventType = 'vclick';
                    if (scrollTop === scrollable.scrollTop()) {
                        ($(target).is('.app-btn-more') ? target : link).trigger(eventType);
                    }
                    else {
                        clickable(link, eventType);
                        activeLink();
                    }
                }, 10);
                return false;
            }
        }
        return true;
    }

    function refreshContext(cancel, delay, callback) {
        if (skipRefreshContext || uiAutomation())
            return;
        if (delay == null)
            delay = refreshContextDelay;
        if (refreshContextTimeout) {
            clearTimeout(refreshContextTimeout);
            refreshContextTimeout = null;
        }

        function doRefresh() {
            if (isInTransition || notifyBar && notifyBar.data('busy'))
                refreshContext(cancel, feedbackDelay, callback);
            else {
                refreshContextTimeout = null;
                //requestAnimationFrame(function () {
                //yardstick();
                kiosk('refresh');
                var activePage = findActivePage(),
                    skipSidebarRefresh = activePage.is('.app-page-modal'),
                    context;
                if (!skipSidebarRefresh || isReadingPaneDetail()) {
                    var pageId = isReadingPaneDetail() ? activeDataView()._parentDataViewId : activePageIdentifier(),
                        sidebar = contextSidebar(),
                        sidebarPageId = sidebar.data('page-id'),
                        oldScope = touch.contextScope();

                    touch.refreshTitleState();
                    touch.refreshMenuStrip();

                    if (sidebar.is(':visible') && !touch.sideBar.ready) {
                        refreshContext(cancel, feedbackDelay, callback);
                        return;
                    }
                    if (sidebarPageId === pageId)
                        savePanelScrollTop(sidebar);
                    touch.contextScope(skipSidebarRefresh ? pageId : null);
                    sidebar.find('.app-show-request').removeClass('app-show-request').show().trigger('show.sidebar.app');
                    sidebar.find('.app-hide-request').removeClass('app-hide-request').hide().trigger('hide.sidebar.app');
                    touch.refreshContextMenu(sidebar.data('page-id', pageId));
                    touch.contextScope(oldScope);
                    if (callback)
                        callback();
                }
                if (skipSidebarRefresh) {
                    context = [];
                    touch.navContext(context);
                    touch.refreshAppButtons(context, { toolbar: false, actionBar: true, promo: true, buttonBars: activePage.find('.app-bar-buttons') });
                    touch.refreshMenuStrip();
                    if (callback)
                        callback();
                    skipSidebarRefresh = true;
                }

            }
        }

        if (!cancel)
            if (delay)
                refreshContextTimeout = setTimeout(doRefresh, delay);
            else
                doRefresh();
    }

    function pageSessionVariable(name, value) {
        //name = location.pathname.replace(/\W/g, '_') + '_' + name;
        if (arguments.length === 1)
            return _app.cache[name];
        else
            _app.cache[name] = value;
    }


    //function pageVariable(name, value) {
    //    var pathname = location.pathname;
    //    if (_app.host) {
    //        var m = pathname.match(/apps\/(.+?)\/(.+?)(\.html)?$/);
    //        if (m)
    //            pathname = m[2];
    //    }
    //    name = pathname.replace(/\W/g, '_').toLowerCase() + '_' + name;
    //    if (arguments.length == 1)
    //        return userVariable(name);
    //    else
    //        userVariable(name, value);
    //}

    //function userVariable(name, value) {
    //    if (!userScope)
    //        userScope = settings.appInfo.replace(/\W/g, '_');
    //    if (!_app.host)
    //        name = userScope + '_' + name;
    //    if (arguments.length == 1) {
    //        try {
    //            value = _app.storage.get(name);//localStorage[name];
    //            if (value != null)
    //                value = JSON.parse(value);
    //            return value;
    //        }
    //        catch (ex) {
    //            // do nothing
    //        }
    //        return null;
    //    }
    //    if (value == null)
    //        //localStorage.removeItem(name);
    //        _app.storage.remove(name);
    //    else
    //        try {
    //            //localStorage[name] = JSON.stringify(value);
    //            _app.storage.set(name, JSON.stringify(value));
    //        }
    //        catch (ex) {
    //            // ignore local storage errors
    //            // iOS Safari will raise an exception here if PRIVATE browsing mode is enabled.
    //        }
    //}

    /*
    function glocalUserVariable(name, value) {
    var token = 'AppFactoryUserVars';
     
    function persistVars() {
    var s = encodeURIComponent(JSON.stringify(_userVars)),
    futureDate = new Date().getDate() + 7,
    expires = new Date();
    expires.setDate(futureDate);
    s = String.format('{0}={1}; expires={2}; path=/', token, s, expires.toUTCString());
    document.cookie = s;
    }
     
    if (_userVars == null) {
    $(document.cookie.split(';')).each(function () {
    var cookie = this.trim();
    if (cookie.startsWith(token)) {
    _userVars = decodeURIComponent(cookie.substring(token.length + 1));
    try {
    _userVars = JSON.parse(_userVars);
    persistVars();
    }
    catch (ex) {
    }
    }
    });
    if (!_userVars)
    _userVars = {};
    }
    if (arguments.length == 2) {
    _userVars[name] = value;
    persistVars();
    }
    else
    return _userVars[name];
    }
    */

    function parseActivator(elem, defaultText) {
        var activator = { text: defaultText, resolved: true, description: null, type: null },
            s = elem.attr('data-activator'),
            container,
            containerId,
            closestElem,
            legacyHeader = $(elem).prev('.DataViewHeader').text();

        if (!s) {
            closestElem = elem.closest('div[data-activator]');
            s = closestElem.attr('data-activator');
            elem = closestElem;
        }
        if (s) {
            container = elem.parent();
            containerId = container.attr('id');
            if (!containerId) {
                containerId = 'aid' + autoId++;
                container.attr('id', containerId);
            }
            activator.container = containerId;
        }
        if (!s)
            s = legacyHeader;
        if (s && s != 'false') {
            s = _app.eval(s);
            var m = s.split(/\s*\|\s*/);
            if (m) {
                activator.text = m[2] || m[1];
                activator.type = m[0];
            }
            else
                activator.text = s;
        }
        else
            activator.resolved = false;
        activator.description = elem.attr('data-activator-description');
        return activator;
    }

    function isPhoneField(field, actionable) {
        return isXField(field, actionable, 'call', phoneFieldRegex);
    }

    function isEmailField(field, actionable) {
        return isXField(field, actionable, 'email', emailFieldRegex);
    }

    function isUrlField(field, actionable) {
        return isXField(field, actionable, 'url', urlFieldRegex);
    }

    function isXField(field, actionable, x, regex) {
        var nameMatch = field.Type === 'String' && field.Name.match(regex);
        if (actionable)
            return !field.tagged('action-' + x + '-disabled') && (field.tagged('action-' + x) || nameMatch);
        else
            return field.tagged('action-' + x, 'field-' + x) || nameMatch;
    }

    function addSpecialClasses(dataView, container) {
        container.toggleClass('app-thumb-person', !!(dataView.get_isTagged('thumb-person') || (dataView._controller.match(/\b(emp|acc|user|usr|person|cust)/i) && !dataView.get_isTagged('thumb-standard'))));
    }

    function addMultiSelectClass(dataView, listview) {
        listview.toggleClass('app-listview-multiselect', dataView.get_showMultipleSelection());
        listview.toggleClass('app-listview-inlineediting', dataView.inlineEditing());
        listview.toggleClass('app-grid-vert-lines-none', !!dataView.tagged('grid-lines-vertical-none') || $settings('ui.grid.lines.vertical') === false);
        listview.toggleClass('app-grid-horiz-lines-none', !!dataView.tagged('grid-lines-horizontal-none') || $settings('ui.grid.lines.horizontal') === false);
    }

    function normalScroll(scrollable, direction) {
        scrollable = $(scrollable);
        if (!findInput().length && !findActivePage('.app-display-flow-designer .app-container-selected').length)
            scrollable.scrollTop(scrollable.scrollTop() + displayDensity() * 5 * (direction === 'up' ? -1 : 1));
    }

    function animatedScroll(scrollable, scrollTop, callback, duration) {
        scrollable.data('scrolling', true).animate(
            { scrollTop: scrollTop }, duration, 'swing',
            function () {
                isInTransition = false;
                if (callback)
                    callback();
                setTimeout(function () {
                    scrollable.removeData('scrolling');
                }, 100);
            });
    }

    function getContextPanel(selector, beforeOpenCallback, options) {
        if (!options)
            options = {};
        var contextPanel = $(selector),
            position = options.position || 'right';
        hideTooltip();
        contextActionOnClose = null;
        if (!contextPanel.length) {
            contextPanel = $div('app-popup-icon-left ui-panel ui-panel-display-overlay ui-panel-animate ui-panel-position-' + position, 'data-position-fixed="true" data-role="panel" data-draggable="panel" data-theme="a" data-display="overlay"');
            $ul().appendTo(contextPanel);
            contextPanel
                .appendTo($body)
                .panel({
                    animate: enablePanelAnimation(),
                    position: position,
                    beforeopen: function () {
                        panelClose._canceled = true;
                        if (isVirtualScreen())
                            contextPanel.css({ top: _screen.top, height: _screen.height, minHeight: _screen.height, right: position == 'right' ? _screen.right : '', left: position == 'right' ? '' : _screen.left });
                        else
                            contextPanel.css({ top: '', height: '', minHeight: '', right: '' });
                        var inner = contextPanel.find('.ui-panel-inner').addClass('app-has-scrollbars');
                        if (scrollbarInfo.width) {
                            inner.css({ width: '', 'overflow-y': 'scroll' });
                            inner.width(inner.width() + scrollbarInfo.width);
                        }
                        inner.attr('tabindex', 0);
                        enablePointerEvents(false);
                        panelIsBusy = true;
                        clearTimeout(clearContextScopeTimeout);
                        if (beforeOpenCallback)
                            beforeOpenCallback();
                    },
                    open: function () {
                        setTimeout(function () {
                            panelIsBusy = false;
                            activeLink();
                            if (options && options.afteropen)
                                options.afteropen();
                            $('.ui-panel-open .ui-panel-inner').trigger('focus');
                            enablePointerEvents(true);
                        });
                    },
                    beforeclose: function () {
                        enablePointerEvents(false);
                        panelIsBusy = true;
                        savePanelScrollTop(contextPanel);
                    },
                    close: function () {
                        setTimeout(function () {
                            contextPanel.css('visibility', '');
                            enablePointerEvents(true);
                            panelIsBusy = false;
                            if (contextActionOnClose)
                                contextActionOnClose();
                            if (touch.contextScope())
                                clearContextScopeTimeout = setTimeout(function () {
                                    touch.contextScope(null);
                                }, feedbackDelay);
                            var scrollable = focusScrollable();
                            if (!contextActionOnClose && !isTouchPointer && scrollable.find('[data-input-container]').length)
                                focusLastInput(scrollable);
                            contextActionOnClose = null;
                            if (options && options.close)
                                options.close();
                            $document.trigger($.Event('panelclosed.app', { canceled: panelClose._canceled }));
                        });
                    }
                });
            enablePanelAnimation(contextPanel);
            if (options.className)
                contextPanel.addClass(options.className);
            registerPanelScroller(contextPanel);
            if (selector.match(/^#/))
                contextPanel.attr('id', selector.substring(1));
            contextPanel.find('ul').listview();
            //contextPanel.on('swipe', nop);
            enhanceScrolling(contextPanel, false);
            if (options && options.resetScrolling)
                contextPanel.addClass('app-reset-scrolling');
        }
        else {
            var lists = contextPanel.find('ul');
            if (!contextPanel.is('.ui-panel-open') && lists.length > 1) {
                lists.first().parent().css({ 'transition': 'none', 'transform': 'none' }).removeClass('app-list-container-reverse');
                lists.slice(1).remove();
            }
        }
        return contextPanel;
    }

    function backToContextPanel() {
        if (touch.contextScope() === '_contextMenu')
            panelToggle(touch._menuPanel);
        else
            touch.toggleContextPanel('#app-panel-context');
    }

    function stickyHeaderBar(selector) {
        return touch.stickyHeaderBar(selector); // #Main page does not have a sticky header yet
    }

    function fetchOnDemand(delay) {
        if (delay != null) {
            clearTimeout(fetchOnDemandTimeout);
            //fetchOnDemandTimeout = setTimeout(function () {
            //    mobile.fetchOnDemand();
            //}, delay);
            fetchOnDemandTimeout = setTimeout(touch.fetchOnDemand, delay);
        }
        else
            touch.fetchOnDemand();
    }

    function stickyHeader(selector) {
        touch.stickyHeader(selector);
    }

    function hideStickyHeader(selector) {
        stickyHeaderBar(selector).hide();
    }

    function resetStickyHeader(selector) {
        hideStickyHeader(selector);
        stickyHeader(selector);
    }

    function showContextPanel(newContext, panelSelector, options) {
        var panel = $('.ui-panel-open'),
            panelWidth, inner, listContainer,
            lists, firstList, panelList,
            listSelector;
        if (panel.length) {
            enablePointerEvents(false);
            inner = panel.find('.ui-panel-inner').addClass('app-multi-list');
            listContainer = inner.find('.app-list-container');
            if (!listContainer.length) {
                inner.contents().wrap(div('app-list-container'));
                listContainer = inner.find('.app-list-container');
            }
            panelWidth = panel.outerWidth();
            listSelector = '[data-panel="' + panelSelector + '"]';
            panelList = inner.find(listSelector);
            var lastScrollTop = inner.scrollTop();
            var useLastScrollTop;
            if (panelList.length) {
                lastScrollTop = panelList.data('lastScrollTop');
                useLastScrollTop = true;
                panelList.removeClass('ui-listview-hidden');
            }
            else
                panelList = $ul().attr('data-panel', panelSelector).appendTo(listContainer).listview();
            lists = panel.find('ul').width(panelWidth);
            $(lists[lists.length - 1]).removeClass('ui-listview-hidden');
            firstList = lists.first();
            currentContext = newContext;
            touch.refreshContextMenu(panel, currentContext, listSelector);
            inner.scrollTop(lastScrollTop);
            $(lists[lists.length - 2]).data('lastScrollTop', lastScrollTop);
            $(lists[lists.length - 1]).css('margin-top', lastScrollTop);
            isInTransition = true;
            listContainer.css({
                transition: '',
                'transform': 'translate3d(' + -(-parseCss(firstList, 'margin-right') + panelWidth * (panelList.prevAll('ul').length)) + 'px,0,0)'
            }).one('transitionend', function () {
                inner.scrollTop(useLastScrollTop ? lastScrollTop : 0);
                panelList.nextAll('ul').remove();
                $(lists[lists.length - 1]).css('margin-top', '');
                lists.prev().addClass('ui-listview-hidden');
                setTimeout(function () {
                    if (options && options.afteropen)
                        options.afteropen();
                    enablePointerEvents(true);
                    $('.ui-panel-open .ui-panel-inner').trigger('focus');
                    isInTransition = false;
                });
            });
        }
        else {
            currentContext = newContext;
            if (touch.contextScope() && (!options || options.position !== 'left') || options && options.position != 'right') {
                panelSelector += '-scope';
                if (!options)
                    options = {};
                options.position = 'left';
            }
            return panelToggle(
                getContextPanel(panelSelector, function () {
                    touch.refreshContextMenu(panelSelector, currentContext);
                }, options));
        }
    }

    function sortExpressionToText(dataView) {
        var sb = new _msSys.StringBuilder(),
            fields = dataView._fields,
            f, i, sortOrder,
            expression = dataView.get_sortExpression(),
            iterator = sortExpressionRegex, m;
        if (expression) {
            m = iterator.exec(expression);
            while (m) {
                f = dataView.findField(m[1]);
                sortOrder = !m[3] || m[3].match(/^asc/) ? 'asc' : 'desc';
                if (f && f.AllowSorting) {
                    if (!sb.isEmpty())
                        sb.append(', ');
                    sb.appendFormat('{0} ({1})', f.HeaderText, fieldSortOrderText(f, sortOrder));
                }
                m = iterator.exec(expression);
            }
        }
        return sb.toString();
    }

    function groupExpressionToText(dataView) {
        var sb = new _msSys.StringBuilder(),
            fields = dataView._fields,
            f, i, sortOrder,
            expression = dataView.get_groupExpression(),
            iterator = sortExpressionRegex, m;
        if (expression) {
            m = iterator.exec(expression);
            while (m) {
                f = dataView.findField(m[1]);
                sortOrder = !m[3] || m[3].match(/^asc/) ? 'asc' : 'desc';
                if (f && f.AllowSorting) {
                    if (!sb.isEmpty())
                        sb.append(', ');
                    sb.appendFormat('{0}', f.HeaderText);
                }
                m = iterator.exec(expression);
            }
        }
        return sb.toString();
    }

    function resetInstruction(dataView) {
        dataView.extension()._instructed = false;
        getPageInfo(dataView).stickyHeader.find('.app-bar-text').removeData('html');
    }

    function updateGroupExpression(dataView, groupExpression) {
        var currentGroupExpression = dataView.groupExpression(),
            sortExpression = dataView.get_sortExpression(),
            sortBy, i = 0;
        if (currentGroupExpression && sortExpression) {
            sortExpression = sortExpression.split(_app._simpleListRegex);
            while (i < sortExpression.length) {
                sortBy = sortExpression[i].match(/(\w+)(\s+\w+)?/);
                if (!sortExpression[i] || sortBy && currentGroupExpression.indexOf(sortBy[1]) != -1)
                    sortExpression.splice(i, 1);
                else
                    i++;
            }
            sortExpression = sortExpression.join(',');
            dataView.set_sortExpression(sortExpression);
            dataView.viewProp('sortExpression', sortExpression);
        }
        dataView.viewProp('groupExpression', groupExpression);
        dataView.set_groupExpression(groupExpression);
        resetInstruction(dataView);
        dataView._keepKeyList = true;
        dataView.AutoPivots = null;
        gridStyleChanged(dataView);

        var text = groupExpressionToText(dataView);
        touch.notify({ dataView: dataView, text: text ? (resourcesMobile.Grouped + ' - ' + text) : resourcesMobile.UnGrouped });
        dataView.sync();
    }

    function resetGridHeaderStyle(dataView) {
        dataView.session('reset-grid-header', true);
    }

    function gridStyleChanged(dataView) {
        if (dataView)
            $(dataView._views).each(function () {
                var view = this,
                    viewId = view.Id;
                if (view.Type !== 'Form') {
                    dataView.session('grid-style-changed', true, viewId);
                    dataView.session('grid-avail-width', null, viewId);
                    dataView.session('window-width', null, viewId);
                }
            });
        else {
            var summaryDataViews = []
            dataView = activeDataView();
            if (dataView)
                summaryDataViews.push(dataView._id);
            else
                findActivePage('.app-echo[data-for]').each(function () {
                    summaryDataViews.push($(this).data('for'));
                });
            summaryDataViews.forEach(function (dataViewId) {
                iterateChildDataViews(findDataView(dataViewId), gridStyleChanged);
            });
            yardstick();
            setupGridHeaderStyle();
        }
    }

    function iterateChildDataViews(dataView, callback) {
        (dataView._allFields || []).forEach(function (f) {
            if (f.Type === 'DataView') {
                var dv = findDataView(f._dataViewId);
                if (dv)
                    callback(dv);
            }
        });
    }

    function updateReadingPaneMaster() {
        var readingPaneMasterDataView,
            readingPaneMasterId,
            readingPaneMasterPage;
        if (isReadingPaneDetail()) {
            /*
            gridStyleChanged(that);
            resetGridHeaderStyle(that);
            yardstick();
            setupGridHeaderStyle();
            updateHScrollbarOfGrid(that);
             */
            readingPaneMasterId = activeDataView()._parentDataViewId;
            readingPaneMasterDataView = findDataView(readingPaneMasterId);
            gridStyleChanged(readingPaneMasterDataView);
            resetGridHeaderStyle(readingPaneMasterDataView);
            readingPaneMasterPage = $('#' + readingPaneMasterId);
            yardstick(readingPaneMasterPage.find('.app-listview'));
            setupGridHeaderStyle(readingPaneMasterPage);
            updateHScrollbarOfGrid(readingPaneMasterDataView);
            fitTabs(readingPaneMasterPage);
        }
    }

    function updateReadingPaneDetail() {
        if (isReadingPaneMaster()) {
            var readingPaneDetailPage = $('.app-reading-pane-detail'),
                readingPaneDetailDataView;
            if (readingPaneDetailPage.length && !readingPaneDetailPage.is('.app-hidden')) {
                readingPaneDetailDataView = findDataView(readingPaneDetailPage.attr('id'));
                if (readingPaneDetailDataView) {
                    resetPageHeight(readingPaneDetailPage);

                    iterateChildDataViews(readingPaneDetailDataView, gridStyleChanged);
                    iterateChildDataViews(readingPaneDetailDataView, resetGridHeaderStyle);

                    syncEmbeddedViews(findScrollable(readingPaneDetailPage));
                    fitSummaryToolbars(readingPaneDetailPage)

                    yardstick(readingPaneDetailPage.find('.app-listview'));
                    setupGridHeaderStyle(readingPaneDetailPage);
                    updateHScrollbarOfGrid(readingPaneDetailDataView);

                    fitTabs(readingPaneDetailPage);
                }
            }
        }
    }

    function updateSortExpressionIfChanged(uiElement) {
        var dataView = touch.contextDataView(uiElement);
        if (newSortExpression != null) {
            dataView.set_sortExpression(newSortExpression);
            newSortExpression = null;
            resetInstruction(dataView);
            dataView._keepKeyList = true;
            resetGridHeaderStyle(dataView);
            var text = sortExpressionToText(dataView) || '';
            touch.notify({ dataView: dataView, text: text ? (resourcesMobile.Sorted + ' - ' + text) : resourcesMobile.SortedDefault });
            dataView.sync();
        }
    }

    function sortExpression(dataView, fieldName, value) {
        var expression = newSortExpression == null ? dataView.get_sortExpression() || '' : newSortExpression,
            list = expression.split(_app._simpleListRegex),
            i, m;
        if (value == null) {
            if (expression)
                for (i = 0; i < list.length; i++) {
                    m = list[i].match(sortByRegex);
                    if (m && m[1] === fieldName)
                        return m[3] || 'asc';
                }
            return null;
        }
        else {
            newSortExpression = value ? String.format('{0} {1}', fieldName, value) : '';
            dataView.viewProp('sortExpression', newSortExpression);
        }
    }


    function fieldSortOrderText(field, sortOrder) {
        var ascending = resourcesHeaderFilter.GenericSortAscending,
            descending = resourcesHeaderFilter.GenericSortDescending;
        switch (field.FilterType) {
            case 'Text':
                ascending = resourcesHeaderFilter.StringSortAscending;
                descending = resourcesHeaderFilter.StringSortDescending;
                break;
            case 'Date':
                ascending = resourcesHeaderFilter.DateSortAscending;
                descending = resourcesHeaderFilter.DateSortDescending;
                break;
        }
        return sortOrder === 'asc' ? ascending : descending;
    }

    function showSettingsPanel(context, callback) {
        currentContext = context;
        if (callback)
            setTimeout(callback, 500);
        else
            configureSettings();
    }

    function configureSettingsOfSystemButtons() {

        function changeShowSystemButtons(value) {
            if (value === 'OnHover')
                $body.addClass('app-show-system-buttons-on-hover');
            if (value === 'Always')
                $body.removeClass('app-show-system-buttons-on-hover');
            userVariable('showSystemButtons', value);
            $settings('ui.showSystemButtons', value);
        }

        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.ShowSystemButtons, isStatic: false, instruction: true },
                { text: resourcesMobile.OnHover, icon: $settings('ui.showSystemButtons') === 'OnHover' || $settings('ui.showSystemButtons') == 'Auto' && !isTouchPointer ? 'check' : false, context: 'OnHover', callback: changeShowSystemButtons },
                { text: resourcesMobile.Always, icon: $settings('ui.showSystemButtons') === 'Always' ? 'check' : false, context: 'Always', callback: changeShowSystemButtons },
            ];
        touch.contextScope('_contextMenu');
        showContextPanel(context, '#app-panel-settings-showsystembuttons');
    }

    function configureSettingsOfSidebar() {

        function toggleSidebar(state) {
            hideMenuStrip();
            touch.contextScope(null);

            $settings('ui.sidebar.when', state);
            userVariable('sidebar', state);

            updateSidebarVisibility();
            //pageResized(true);
            performWindowResize();

            //yardstick();
            //fetchOnDemand(1000);
            //highlightSelection();

            //refreshContext();
            //setTimeout(function () {
            //    fitTabs();
            //    fetchEchos(true);
            //    showSidebarSettings();
            //    stickyHeader();
            //}, 750);
        }

        var oldContext = currentContext,
            when = $settings('ui.sidebar.when'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.Sidebar, isStatic: false, instruction: true },
                { text: resourcesMobile.Landscape, icon: when === 'Landscape' ? 'check' : false, context: 'Landscape', callback: toggleSidebar },
                { text: resourcesMobile.Always, icon: when === 'Always' ? 'check' : false, context: 'Always', callback: toggleSidebar },
                { text: resourcesMobile.Never, icon: when === 'Never' ? 'check' : false, context: 'Never', callback: toggleSidebar }
            ];
        touch.contextScope('_contextMenu');
        showContextPanel(context, '#app-panel-settings-sidebar');
    }

    function displayDensityToClass(density) {
        density = density.toLowerCase();
        if (density === 'tiny')
            density = 'condensed app-font-tiny';
        return 'app-density-' + density;
    }

    function themeToClass(theme) {
        return 'app-theme-' + theme.toLowerCase();
    }

    function changeThemeAndAccent(context, link) {
        var theme = settings.ui.theme,
            originalTheme = theme.name,
            originalAccent = theme.accent;
        if (context.theme)
            theme.name = context.theme.name;
        else if (context.accent)
            theme.accent = context.accent.name;
        link.closest('.ui-panel-inner').find('.app-item-theme-' + (context.theme ? 'name' : 'accent') + ' i').remove();
        materialIcon('material-icon-check', link);
        themeAccentDemoInProgress = true;

        setTimeout(function () {
            $settings('ui.theme.name', theme.name);
            $settings('ui.theme.accent', theme.accent);
            userVariable('userTheme', true);
            touch._changeThemeLink(originalTheme + '.' + originalAccent, theme.name + '.' + theme.accent, function () {
                if (originalTheme)
                    $body.removeClass(themeToClass(originalTheme));
                $body.addClass(themeToClass(theme.name));
                $document.trigger('themechanged.app');
                // fade the panel out and bring it back
                var panel = $('.ui-panel-open').css('transition', 'opacity 500ms');
                setTimeout(function () {
                    panel.css('opacity', 0);
                    setTimeout(function () {
                        panel.css('opacity', '');
                        setTimeout(function () {
                            panel.css('transition', '');
                            themeAccentDemoInProgress = false;
                        }, 600);
                    }, theme.preview || 1000); // the duration of the preview
                }, 32);
            });
        }, 200);
    }

    function configureSettingsOfThemes() {
        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobileThemes.Label, isStatic: false, instruction: true }
            ],
            userThemeCookie = '.COTTHEME' + _app.userName();
        if (findCookieValue(userThemeCookie))
            context.splice(context.length - 1, 0,
                {},
                {
                    text: resourcesGrid.ResetAdvancedSearch, icon: 'material-icon-history', callback: function () {
                        _app.cookie(userThemeCookie, null, -1);
                        location.reload(location.href);
                    }
                });
        var settingsTheme = settings.ui.theme,
            themeInfo = settingsTheme.config;

        function enumerateThemeOptions() {
            $(themeInfo.themes).each(function () {
                var theme = this;
                context.push({ text: resourcesMobileThemes.List[theme.name] || theme.text || theme.name, icon: settingsTheme.name == theme.name ? 'check' : false, keepOpen: true, context: { theme: theme }, callback: changeThemeAndAccent, linkClassName: 'app-item-theme-name', color: theme.color });
            });
            context.push({ text: resourcesMobileThemes.Accent, isStatic: false, instruction: true });
            $(themeInfo.accents).each(function () {
                var accent = this;
                context.push({ text: resourcesMobileThemes.List[accent.name] || accent.text || accent.name, icon: settingsTheme.accent == accent.name ? 'check' : false, keepOpen: true, context: { accent: accent }, callback: changeThemeAndAccent, linkClassName: 'app-item-theme-accent', color: accent.color });
            });
        }

        context.push({ text: loadingStatusText, icon: 'material-icon-refresh', animate: true, keepOpen: true, callback: nop });
        showContextPanel(context, '#app-panel-settings-theme', {
            afteropen: function () {
                touch.getThemes().done(function (result) {
                    themeInfo = settings.ui.theme.config = result;
                    var panel = $('.ui-panel-open [data-panel="#app-panel-settings-theme"] .ui-btn.app-animated').closest('.ui-panel');
                    if (panel.length) {
                        context.splice(context.length - 1, 1);
                        enumerateThemeOptions();
                        touch.refreshContextMenu(panel, context, '[data-panel="#app-panel-settings-theme"]');
                    }
                });

            }
        });

    }

    function configureSettingsOfTransitions() {
        var oldContext = currentContext,
            currentTransition = $settings('ui.transitions.style'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.Transitions.Label, isStatic: false, instruction: true },
            ];

        function doChangeTransition(newTransition) {
            if (newTransition != currentTransition) {
                $settings('ui.transitions.style', newTransition);
                userVariable('transitions', newTransition);
            }
            //_app.confirm(resourcesMobile.ConfirmReload, nop, function () {
            //    showSettingsPanel(oldContext);
            //}
            //);
        }

        //for (var t in resourcesMobile.Transitions.List) {
        //    context.push({ text: resourcesMobile.Transitions.List[t], 'icon': t == currentTransition ? 'check' : false, context: t, callback: doChangeTransition });
        //}

        context.push({ text: resourcesMobile.Transitions.List.none, 'icon': 'none' == currentTransition ? 'check' : false, context: 'none', callback: doChangeTransition });
        context.push({ text: resourcesMobile.Transitions.List.slide, 'icon': 'slide' == currentTransition ? 'check' : false, context: 'slide', callback: doChangeTransition });


        showContextPanel(context, '#app-panel-settings-theme');
    }

    function configureSettingsOfDisplayDensity() {
        var oldContext = currentContext,
            currentDensity = $settings('ui.displayDensity.value'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.DisplayDensity.Label, isStatic: false, instruction: true },
            ];
        for (var t in resourcesMobile.DisplayDensity.List) {
            context.push({
                text: resourcesMobile.DisplayDensity.List[t], 'icon': t == currentDensity ? 'check' : false, context: t, callback: function (newDensity) {
                    if (newDensity != currentDensity) {
                        //$window.trigger('resize');
                        performWindowResize();
                        $body.removeClass(displayDensityToClass(currentDensity));
                        $settings('ui.displayDensity.value', newDensity);
                        $body.addClass(displayDensityToClass(newDensity));
                        resetPageHeight();
                        userVariable('displayDensity', newDensity);
                        _displayDensity = null;
                        pageResized();
                    }
                    //showSettingsPanel(oldContext, configureSettingsOfDisplayDensity)
                }
            });
        }
        showContextPanel(context, '#app-panel-settings-display-density');
    }

    function configureSettingsOfLabelsInList() {
        var oldContext = currentContext,
            currentLabelsInList = $settings('ui.list.labels.display'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.LabelsInList.Label, isStatic: false, instruction: true },
            ];
        for (var t in resourcesMobile.LabelsInList.List) {
            context.push({
                text: resourcesMobile.LabelsInList.List[t], 'icon': t == currentLabelsInList ? 'check' : false, context: t, callback: function (newLabelsInList) {
                    $settings('ui.list.labels.display', newLabelsInList);
                    userVariable('labelsInList', newLabelsInList);
                    _app.confirm(resourcesMobile.ConfirmReload, function () {
                        reloadWindow();
                    }, function () {
                        showSettingsPanel(oldContext);
                    });
                    //if (newLabelsInList != currentLabelsInList) {
                    //    $body.removeClass('app-labelsinlist-displayedabove');
                    //    settings.labelsInList = newLabelsInList;
                    //    if (newLabelsInList == 'DisplayedAbove')
                    //        $body.addClass('app-labelsinlist-displayedabove');
                    //    userVariable('labelsInList', newLabelsInList);
                    //}
                    //showSettingsPanel(oldContext, configureSettingsOfLabelsInList)
                }
            });
        }
        showContextPanel(context, '#app-panel-settings-labels-in-form');
    }

    function configureSettingsOfPromoteActions() {
        var oldContext = currentContext,
            currentPromoteActions = $settings('ui.actions.promote'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.PromoteActions, isStatic: false, instruction: true },
            ];

        function changePromoteActions(newValue) {
            $settings('ui.actions.promote', newValue);
            userVariable('promoteActions', newValue);
            refreshContext();
            showSettingsPanel(oldContext, configureSettingsOfPromoteActions)
        }

        context.push({ text: resourcesYes, 'icon': currentPromoteActions != false ? 'check' : false, context: true, callback: changePromoteActions });
        context.push({ text: resourcesNo, 'icon': currentPromoteActions == false ? 'check' : false, context: false, callback: changePromoteActions });
        showContextPanel(context, '#app-panel-promote-actions');
    }

    function configureSettingsOfInitialListMode() {

        var oldContext = currentContext,
            currentInitialListMode = $settings('ui.list.initialMode'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.InitialListMode.Label, isStatic: false, instruction: true },
            ];
        for (var t in resourcesMobile.InitialListMode.List) {
            context.push({
                text: resourcesMobile.InitialListMode.List[t], 'icon': t == currentInitialListMode ? 'check' : false, context: t, callback: function (newInitialListMode) {
                    userVariable('initialListMode', newInitialListMode);
                    _app.confirm(resourcesMobile.ConfirmReload, function () {
                        reloadWindow();
                    }, function () {
                        showSettingsPanel(oldContext);
                    });
                }
            });
        }
        showContextPanel(context, '#app-panel-settings-default-list-mode');
    }

    function configureSettingsOfSmartDates() {
        var oldContext = currentContext,
            currentSmartDates = $settings('ui.smartDates'),
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMobile.Dates.SmartDates, isStatic: false, instruction: true },
            ];

        function changeSmartDates(newValue) {
            $settings('ui.smartDates', newValue);
            userVariable('smartDates', newValue);
            _app.confirm(resourcesMobile.ConfirmReload, function () {
                reloadWindow();
            }, function () {
                showSettingsPanel(oldContext);
            });
        }

        context.push({ text: resourcesYes, 'icon': currentSmartDates != false ? 'check' : false, context: true, callback: changeSmartDates });
        context.push({ text: resourcesNo, 'icon': currentSmartDates == false ? 'check' : false, context: false, callback: changeSmartDates });
        showContextPanel(context, '#app-panel-smart-dates');
    }

    function configureSettingsOfLanguage() {
        var oldContext = currentContext,
            context = [
                {
                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                        showSettingsPanel(oldContext);
                    }
                },
                { text: resourcesMembershipBar.ChangeLanguageToolTip, isStatic: false, instruction: true },
            ];

        function changeCulture(culture) {
            if (!culture.selected)
                _membership._instance.changeCulture(culture.value);
        }

        $(_app.cultureList).each(function () {
            var culture = this;
            context.push({ text: culture.text, 'icon': false, selected: culture.selected, context: culture, keepOpen: culture.selected, callback: changeCulture });
        });
        showContextPanel(context, '#app-panel-languages');
    }

    function sidebarIsAllowed() {
        return _screen.width >= toPhysicalWidth('md');
    }

    function configureSettingsStandalone() {
        configureSettings('left');
    }

    function configureSettings(position) {
        var context = [];
        if (!position)
            context.push({ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel });
        context.push({ text: resourcesMobile.Settings });
        if ($settingsEnabled('settings.options.displayDensity'))
            context.push({
                text: resourcesMobile.DisplayDensity.Label, 'icon': 'material-icon-blur-on', transition: true, callback: configureSettingsOfDisplayDensity, desc: resourcesMobile.DisplayDensity.List[$settings('ui.displayDensity.value')]
            });
        if ($settingsEnabled('settings.options.theme')) {
            var theme = settings.ui.theme,
                themeName = theme.name,
                themeAccent = theme.accent;
            context.push({
                text: resourcesMobileThemes.Label, 'icon': 'material-icon-brush', transition: true, callback: configureSettingsOfThemes, desc: (resourcesMobileThemes.List[themeName] || _app.prettyText(themeName)) + (themeAccent == 'None' ? '' : (' ' + (resourcesMobileThemes.List[themeAccent] || _app.prettyText(themeAccent))))
            });
        }
        if ($settingsEnabled('settings.options.transitions'))
            context.push({
                text: resourcesMobile.Transitions.Label, 'icon': 'material-icon-swap-horiz', transition: true, callback: configureSettingsOfTransitions, desc: resourcesMobile.Transitions.List[$settings('ui.transitions.style')]
            });
        if ($settingsEnabled('settings.options.sidebar') && sidebarIsAllowed())
            context.push({
                text: resourcesMobile.Sidebar, 'icon': 'material-icon-view-quilt', transition: true, callback: configureSettingsOfSidebar, desc: $settings('ui.sidebar.when') == 'Landscape' ? resourcesMobile.Landscape : ($settings('ui.sidebar.when') == 'Always' ? resourcesMobile.Always : resourcesMobile.Never)
            });
        //if (!settings.labelsInFormDisabled)
        //    context.push({
        //        text: resourcesMobile.LabelsInForm.Label, 'icon': false, transition: true, callback: configureSettingsOfLabelsInForm, desc: resourcesMobile.LabelsInForm.List[settings.labelsInForm]
        //    });
        if ($settingsEnabled('settings.options.labelsInList'))
            context.push({
                text: resourcesMobile.LabelsInList.Label, 'icon': 'material-icon-text-format', transition: true, callback: configureSettingsOfLabelsInList, desc: resourcesMobile.LabelsInList.List[$settings('ui.list.labels.display')]
            });
        //if (!settings.buttonShapesDisabled)
        //    context.push({
        //        text: resourcesMobile.ButtonShapes, 'icon': false, transition: true, callback: configureSettingsOfButtonShapes, desc: settings.buttonShapes != false ? resourcesYes : resourcesNo
        //    });
        if ($settingsEnabled('settings.options.showSystemButtons') && !isTouchPointer)
            context.push({
                text: resourcesMobile.ShowSystemButtons, 'icon': 'material-icon-more-' + (android ? 'vert' : 'horiz'), transition: true, callback: configureSettingsOfSystemButtons, desc: $settings('ui.showSystemButtons') == 'OnHover' || $settings('ui.showSystemButtons') == 'Auto' && !isTouchPointer ? resourcesMobile.OnHover : resourcesMobile.Always
            });
        if ($settingsEnabled('settings.options.promoteActions'))
            context.push({
                text: resourcesMobile.PromoteActions, 'icon': 'material-icon-add-circle', transition: true, callback: configureSettingsOfPromoteActions, desc: $settingsEnabled('ui.actions.promote') ? resourcesYes : resourcesNo
            });
        if ($settingsEnabled('settings.options.smartDates'))
            context.push({
                text: resourcesMobile.Dates.SmartDates, 'icon': 'material-icon-event', transition: true, callback: configureSettingsOfSmartDates, desc: $settings('ui.smartDates') != false ? resourcesYes : resourcesNo
            });
        if ($settingsEnabled('settings.options.initialListMode'))
            context.push({
                text: resourcesMobile.InitialListMode.Label, 'icon': 'material-icon-receipt', transition: true, callback: configureSettingsOfInitialListMode, desc: resourcesMobile.InitialListMode.List[$settings('ui.list.initialMode')]
            });
        $(_app.cultureList).each(function () {
            var culture = this;
            if (culture.selected) {
                context.push({ text: culture.text, icon: 'material-icon-language', transition: true, callback: configureSettingsOfLanguage });
                return false;
            }
        });

        showContextPanel(context, '#app-panel-settings', position ? { position: position } : null);
    }

    function configureGroupBy(standalone) {

        var dataView = touch.contextDataView(),
            expression = dataView.get_groupExpression(),
            viewLabel = dataView.get_view().Label,
            fields = dataView._fields,
            allFields = dataView._allFields,
            fieldList = [],
            context = [],
            iterator, m, index = 1, groupByField,
            groupMap = {}, groupInfo;

        if (!standalone)
            context.push({ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel });

        if (expression)
            context.push(
                { text: resourcesMobile.GroupedBy + ' ' + groupExpressionToText(dataView) + '.' },
                {
                    text: labelClear, icon: 'delete', callback: function (context, link) {
                        updateGroupExpression(dataView, null);
                    }
                });
        context.push(
            {},
            {
                text: labelApply, icon: 'material-icon-check', callback: function (context, link) {
                    var groupInfoList = [];
                    $(link).closest('ul').find('.app-keep-open').each(function () {
                        var groupInfo = $(this).data('context-action').context;
                        if (groupInfo.index)
                            groupInfoList.push(groupInfo);
                    });
                    groupInfoList.sort(function (a, b) {
                        return a.index - b.index;
                    });
                    expression = '';
                    $(groupInfoList).each(function () {
                        var groupInfo = this;
                        if (expression)
                            expression += ',';
                        expression += groupInfo.field;
                    });
                    updateGroupExpression(dataView, expression);
                }
            },
            { text: String.format(resourcesMobile.GroupByField, viewLabel) });


        function maxGroupIndex(link) {
            var index = 0;
            link.closest('ul').find('.app-keep-open').each(function () {
                var context = $(this).data('context-action').context;
                if (context.index && context.index > index)
                    index = context.index;
            });
            return index;
        }

        function shiftGroupIndexDown(link, afterIndex) {
            link.closest('ul').find('.app-keep-open').each(function () {
                var context = $(this).data('context-action').context;
                if (context.index && context.index > afterIndex)
                    context.index--;
            });
        }

        function updateGroupIndexes(link) {
            link.closest('ul').find('.app-keep-open').each(function () {
                var l = $(this),
                    context = l.data('context-action').context;
                l.find('.ui-li-count').remove();
                if (context.index)
                    $span('ui-li-count ui-body-inherit').appendTo(l).text(context.index);
            });
        }


        if (expression) {
            iterator = sortExpressionRegex;
            m = iterator.exec(expression);
            while (m) {
                groupByField = dataView.findField(m[1]);
                if (groupByField)
                    groupMap[groupByField.Name] = { field: m[1], index: index++ };
                m = iterator.exec(expression);
            }
        }

        $(fields).each(function (index) {
            var f = this,
                originalField = f;
            f = allFields[f.AliasIndex];
            if (!originalField.Hidden && f.AllowSorting && f.Type != 'DataView')
                fieldList.push(f);
        });

        fieldList.sort(function (a, b) {
            var groupInfoA = groupMap[a.Name],
                groupInfoB = groupMap[b.Name];
            return (groupInfoA ? groupInfoA.index : 1000) - (groupInfoB ? groupInfoB.index : 1000);
        });

        $(fieldList).each(function () {
            var f = this,
                groupInfo;
            groupInfo = groupMap[f.Name];
            context.push({
                text: f.HeaderText,
                keepOpen: true,
                icon: false,
                context: groupInfo || { field: f.Name },
                count: groupInfo ? groupInfo.index : null,
                callback: function (groupInfo, link) {
                    if (groupInfo.index) {
                        shiftGroupIndexDown(link, groupInfo.index);
                        groupInfo.index = null;
                    }
                    else
                        groupInfo.index = maxGroupIndex(link) + 1;
                    updateGroupIndexes(link);
                }
            });
        });

        showContextPanel(context, '#app-panel-group-fields');
    }

    function configureSort() {

        var dataView = touch.contextDataView(),
            expression = dataView.get_sortExpression(),
            viewLabel = dataView.get_view().Label,
            fields = dataView._fields,
            allFields = dataView._allFields,
            fieldList = [],
            context = [{ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel }],
            iterator, m, index = 1, sortByField,
            sortMap = {}, sortInfo;

        if (expression)
            context.push(
                { text: sortExpressionToText(dataView) },
                {
                    text: labelClear, icon: 'delete', callback: function (context, link) {
                        newSortExpression = '';
                        dataView.viewProp('sortExpression', newSortExpression);
                        updateSortExpressionIfChanged();
                    }
                });
        context.push(
            {
                text: labelApply, icon: 'material-icon-check', callback: function (context, link) {
                    var sortInfoList = [];
                    $(link).closest('ul').find('.ui-btn').each(function () {
                        var sortInfo = $(this).data('context-action').context;
                        if (sortInfo && sortInfo.order)
                            sortInfoList.push(sortInfo);
                    });
                    sortInfoList.sort(function (a, b) {
                        return a.index - b.index;
                    });
                    newSortExpression = '';
                    $(sortInfoList).each(function () {
                        var sortInfo = this;
                        if (newSortExpression)
                            newSortExpression += ',';
                        newSortExpression += sortInfo.field + ' ' + sortInfo.order;
                    });
                    dataView.viewProp('sortExpression', newSortExpression);
                    updateSortExpressionIfChanged();
                }
            },
            { text: String.format(resourcesMobile.SortByField, viewLabel) });


        if (expression) {
            iterator = sortExpressionRegex;
            m = iterator.exec(expression);
            while (m) {
                sortByField = dataView.findField(m[1]);
                if (sortByField)
                    sortMap[sortByField.Name] = { field: m[1], index: index++, order: m[3] && m[3].match(/^desc/i) ? 'desc' : 'asc' };
                m = iterator.exec(expression);
            }
        }

        $(fields).each(function () {
            var f = this,
                originalField = f;
            f = allFields[f.AliasIndex];
            if (!originalField.Hidden && f.AllowSorting && f.Type != 'DataView')
                fieldList.push(f);
        });

        fieldList.sort(function (a, b) {
            var sortInfoA = sortMap[a.Name],
                sortInfoB = sortMap[b.Name];
            return (sortInfoA ? sortInfoA.index : 1000) - (sortInfoB ? sortInfoB.index : 1000);
        });

        function changeSortOrder(sortInfo) {
            var targetSortOption,
                index = 0;
            $(context).each(function () {
                var option = this,
                    si = option.context;
                if (si && si.field == sortInfo.field) {
                    targetSortOption = option;
                    return false;
                }
            });
            if (!sortInfo.order) {
                $(context).each(function () {
                    var option = this,
                        si = option.context;
                    if (si && si.index > targetSortOption.context.index) {
                        option.count--;
                        si.index--;
                    }
                });
                targetSortOption.context.order = null;
                targetSortOption.context.index = null;
                targetSortOption.count = null;
                targetSortOption.icon = false;
            }
            else {
                if (!targetSortOption.context.order) {
                    $(context).each(function () {
                        var si = this.context;
                        if (si && si.index > index)
                            index = si.index;
                    });
                    targetSortOption.context.index = index + 1;
                    targetSortOption.count = index + 1;
                }
                targetSortOption.icon = sortInfo.order == 'asc' ? 'arrow-u' : 'arrow-d';
                targetSortOption.context.order = sortInfo.order;
            }
            showContextPanel(context, '#app-panel-sort-fields');
        }

        $(fieldList).each(function () {
            var f = this,
                sortInfo,
                groupExpression = dataView.groupExpression();
            sortInfo = sortMap[f.Name];
            context.push({
                text: f.HeaderText,
                icon: sortInfo ? (sortInfo.order == 'asc' ? 'arrow-u' : 'arrow-d') : false,
                context: sortInfo || { field: f.Name },
                count: sortInfo ? sortInfo.index : null,
                transition: true,
                callback: function (sortInfo, link) {
                    var sortField = dataView.findField(sortInfo.field),
                        fieldOptions = [
                            {
                                text: resourcesMobile.Back, icon: iconBack, callback: function () {
                                    showContextPanel(context, '#app-panel-sort-fields');
                                }
                            },
                            { text: String.format(resourcesMobile.SortByOptions, dataView.get_view().Label, sortField.HeaderText) },
                            // optional "None" placeholder when no grouping                        
                            { text: fieldSortOrderText(sortField, 'asc'), icon: sortInfo.order == 'asc' ? 'check' : false, transition: true, reverse: true, context: { order: 'asc', field: sortInfo.field }, callback: changeSortOrder },
                            { text: fieldSortOrderText(sortField, 'desc'), icon: sortInfo.order == 'desc' ? 'check' : false, transition: true, reverse: true, context: { order: 'desc', field: sortInfo.field }, callback: changeSortOrder }
                        ];
                    if (!groupExpression || groupExpression.indexOf(sortInfo.field) == -1)
                        fieldOptions.splice(2, 0, { text: resourcesMobile.None, icon: !sortInfo.order ? 'check' : false, transition: true, reverse: true, context: { field: sortInfo.field }, callback: changeSortOrder });
                    showContextPanel(fieldOptions, '#app-panel-sort-field-options');
                }
            });
        });

        showContextPanel(context, '#app-panel-sort-fields');
    }

    function removeGroups(listview) {
        var groups = listview.find('.app-group'),
            result = groups.length ? groups.first().outerHeight(true) : 0;
        groups.remove();
        return result;
    }

    function injectGroups(dataView, listview) {
        var groupByFields = dataView.groupExpression(),
            groupByValues = [],
            firstLetterOnly = dataView.get_showFirstLetters() && !groupByFields,
            f,
            i = 0,
            lastPath, lastGroupTitle, groupItemCount, lastGroupTitleInfo, lastGroupTitleInfoText,
            checkedLoadAtTop, hasLoadAtTop, hasLoadAtBottom;
        if (!groupByFields)
            return;

        while (i < groupByFields.length) {
            f = dataView.findField(groupByFields[i]);
            if (f)
                groupByFields[i++] = dataView._allFields[f.AliasIndex];
            else
                groupByFields.splice(i, 1);
        }

        listview.find('li .ui-btn').each(function () {
            var link = $(this),
                context = link.data('data-context'),
                groupText = [],
                groupLabel = [],
                groupType = [], groupTypeIsDate,
                groupValue = [],
                requiresGroup,
                group, link, pathSegment;
            if (context) {
                $(groupByFields).each(function (index) {
                    var field = this,
                        v = context.row[field.Index],
                        text, altText, monthText, yearText, path;
                    if (v != null)
                        if (firstLetterOnly)
                            text = v.substring(0, 1);
                        else
                            text = field.text(v);
                    groupText.push(text);
                    groupLabel.push(field.HeaderText);
                    groupType.push(field.Type);
                    groupValue.push(v);
                    if (!groupByValues.length || groupByValues[index] != text) {
                        groupByValues[index] = text;
                        requiresGroup = true;
                    }
                    if (requiresGroup && index == groupByFields.length - 1) {

                        if (lastGroupTitle) {
                            $span('app-group-count').appendTo(lastGroupTitle).text(groupItemCount + (hasLoadAtTop ? '+' : ''));
                            //lastGroupTitle.text(lastGroupTitle.attr('data-text') + ' (' + groupItemCount + (hasLoadAtTop ? '+' : '') + ')');
                            hasLoadAtTop = false;
                        }
                        group = $li('app-group"').insertBefore(link.parent());
                        //$(iconCaratU).appendTo(group);
                        //iconCarat('up', 'small', group);
                        //$span('glyphicon glyphicon-menu-up').appendTo(group);
                        // month/year
                        monthText = null;
                        altText = null;
                        groupTypeIsDate = groupType[groupType.length - 1].match(/^Date/);
                        if (v != null && groupType.length == 1 && groupTypeIsDate) {
                            v = groupValue[groupValue.length - 1];
                            altText = dateTimeFormat.DayNames[v.getDay()] + ' ' + v.getDate();
                            monthText = dateTimeFormat.MonthNames[v.getMonth()];
                            yearText = v.getFullYear();
                        }
                        if (monthText) {
                            lastGroupTitleInfo = $span('app-group-info').appendTo(group);
                            $span('app-group-info-value').appendTo(lastGroupTitleInfo).text(monthText);
                            $span('app-group-info-value-muted').appendTo(lastGroupTitleInfo).text(yearText);
                            if (lastGroupTitleInfoText != monthText)
                                lastGroupTitleInfoText = monthText;
                            else
                                lastGroupTitleInfo.addClass('app-group-info-duplicate');
                        }
                        if (groupTypeIsDate)
                            group.addClass('app-group-fixed');
                        // group path
                        groupItemCount = 0;
                        i = 0;
                        while (i < groupText.length - 1) {
                            if (!path)
                                path = $span('app-group-path').appendTo(group);
                            //$('<span class="app-path-label"/>').appendTo(path).text(groupLabel[i]);
                            pathSegment = $span('app-group-path-value').appendTo(path);
                            text = groupText[i];
                            if (!text) {
                                //pathSegment.addClass('app-null');
                                text = labelBlankValue;
                            }
                            pathSegment.text(text).attr('title', groupLabel[i] + ':\n' + text);
                            i++;
                        }
                        // group title
                        text = altText || groupText[groupText.length - 1];
                        lastGroupTitle = $span('app-group-title').appendTo(group).text(text);
                        if (!text) {
                            text = labelBlankValue;
                            //lastGroupTitle.addClass('app-null');
                        }
                        lastGroupTitle.text(text).attr('data-text', text).attr('title', groupLabel[groupLabel.length - 1] + ':\n' + text);
                        //if (path) {
                        //    if (path.text() != lastPath)
                        //        lastPath = path.text();
                        //    else
                        //        path.remove();
                        //}

                    }
                });
                groupItemCount++;
            }
            else
                if (link.is('.dv-load-at-bottom'))
                    hasLoadAtBottom = true;
                else if (!checkedLoadAtTop && link.is('.dv-load-at-top')) {
                    hasLoadAtTop = true;
                    checkedLoadAtTop = true;
                }
        });
        if (lastGroupTitle)
            $span('app-group-count').appendTo(lastGroupTitle).text(groupItemCount + (hasLoadAtBottom ? '+' : ''));
        //lastGroupTitle.text(lastGroupTitle.attr('data-text') + ' (' + groupItemCount + (hasLoadAtBottom ? '+' : '') + ')');
    }

    function dataViewIsFiltered(dataView) {
        var filter = dataView.get_filter(),
            externalFilter = dataView._externalFilter || [];
        return filter && filter.length && externalFilter.length < filter.length || advancedSearchFilter(dataView).length;
    }

    function updateApplyFilterButton(enable) {
        var btn = $('.ui-panel-open .app-btn-apply,.ui-popup-active .app-btn-apply');
        if (!btn.is('.app-enabled'))
            if (enable)
                btn.removeClass('ui-disabled');
            else
                btn.addClass('ui-disabled');
    }

    function ensureSvgIcon(link) {
        var isIncluded = link.is('.app-include');
        link.find('.app-icon').text(isIncluded ? 'check_box' : 'check_box_outline_blank').toggleClass('material-icon-check-box', isIncluded).toggleClass('material-icon-check-box-outline-blank', !isIncluded);

        //if (link.is('.app-checked')) {
        //    if (!icon.length)
        //        materialIcon('material-icon-check-box', link);
        //    item.addClass('app-checked');
        //}
        //else {
        //    icon.remove();
        //    item.removeClass('app-checked');
        //    materialIcon('material-icon-check-box-empty-outline', link);
        //}
    }

    function dataValueOptionClicked(item, link) {
        var selectAll = selectAllOption(link),
            options = dataValueOptions(link),
            includeCount,
            selectAllIsChecked;
        link.toggleClass('app-include');
        includeCount = options.filter('.app-include').length;
        selectAllIsChecked = options.length == includeCount;
        ensureSvgIcon(link);
        selectAll.find('.app-icon').text(selectAllIsChecked ? 'check_box' : 'check_box_outline_blank').toggleClass('material-icon-check-box', selectAllIsChecked).toggleClass('material-icon-check-box-outline-blank', !selectAllIsChecked);
        updateApplyFilterButton(includeCount > 0);
    }

    function selectAllOption(link) {
        return link.closest('.ui-panel-inner').find('.app-btn-select-all a');
    }

    function dataValueOptions(link) {
        return selectAllOption(link).parent().nextAll().find('a');
    }

    function contextOption(link) {
        if (link.length > 0)
            return link.data('data-context') || link.data('context-action');
        return null;
    }

    function applyValueFilter(context, sender) {
        var dataView = findDataView(context.dataViewId),
            fieldName = context.field,
            field = dataView.findField(fieldName),
            aliasField = dataView._allFields[field.AliasIndex],
            filter = composeValueFilter(dataView, fieldName, sender);

        dataView.removeFromFilter(aliasField);
        if (filter)
            dataView._filter.push(filter);
        applyDataFilter(dataView);
    }

    function composeValueFilter(dataView, fieldName, sender) {
        var field = dataView.findField(fieldName),
            aliasField = dataView._allFields[field.AliasIndex],
            filter = [],
            values,
            useValues,
            options = dataValueOptions(sender);

        function enumerateValues(inlcudeSelected) {
            values = []
            options.each(function () {
                var link = $(this),
                    selected = link.is('.app-include');
                if (selected && inlcudeSelected || !selected && !inlcudeSelected)
                    values.push(dataView.convertFieldValueToString(field, field._listOfValues[contextOption(link).context]));
            });
        }
        if (options.filter(':not(.app-include)').length) {
            enumerateValues(true);
            if (values.length) {
                filter.push(aliasField.Name + ':');
                if (values.length == 1)
                    filter.push('=' + values[0]);
                else {
                    useValues = values.length <= 10 || values.length <= values.length / 2;
                    filter.push(useValues ? '$in$' : '$notin$');
                    if (!useValues)
                        enumerateValues(false);
                    $(values).each(function (index) {
                        if (index > 0)
                            filter.push('$or$');
                        filter.push(this);
                    });
                }
            }
        }
        return filter.join('');
    }

    function configureFilter(options) {
        var everythingMode,
            fieldFilterMode,
            scopeField;
        if (typeof options == 'object') {
            if (options._dataView)
                scopeField = options;
            else if (options.scopeField) {
                scopeField = options.scopeField;
            }
            else if (options.mode === 'everything')
                everythingMode = true;
            else if (options.mode === 'field')
                fieldFilterMode = true;
        }

        function enumerateFieldFilterOptions(field, context, filterDesc) {
            var dataView = field._dataView,
                aliasField = dataView._allFields[field.AliasIndex],
                filterFunc = dataView.get_fieldFilter(aliasField, true);
            if (!scopeField) {
                context.push({ text: resourcesMobile.Back, icon: iconBack, callback: configureFieldFilterOptions });
                context.push({ text: aliasField.HeaderText });
            }
            context.push({});
            if (filterFunc)
                context.push({
                    text: labelClear, context: aliasField.Name,
                    callback: function () {
                        dataView.removeFromFilter(aliasField);
                        applyDataFilter(dataView);
                    },
                    icon: 'material-icon-clear'
                });
            context.push({
                text: resourcesData.Filters[aliasField.FilterType].Text, context: { id: dataView._id, field: dataView._allFields[field.OriginalIndex].Name },
                desc: filterFunc !== '$in' && filterFunc !== '$notin' ? filterDesc : null,
                callback: function (context) {
                    _app.search('show', context);
                },
                transition: false,
                icon: 'material-icon-filter-list'
            });
            if (!scopeField)
                context.push({ text: String.format(resourcesMobile.FilterByOptions, dataView.get_view().Label, aliasField.HeaderText, labelApply) });
        }

        function enumerateFieldFilterValues(field, context) {
            var i, v, t,
                dataView = field._dataView,
                listOfValues = field._listOfValues || [],
                aliasField = dataView._allFields[field.AliasIndex],
                filterFunc = dataView.get_fieldFilter(aliasField, true),
                contextNotSelected = [],
                applyOption,
                filterValues,
                ff, option, isSelected,
                filterFuncIsNotIn = filterFunc === '$notin';
            if (filterFunc && (filterFunc === '=' || filterFunc === '$in' || filterFuncIsNotIn))
                filterValues = (dataView.get_fieldFilter(aliasField) || '').split(/\$or\$/);
            applyOption = { text: labelApply, icon: 'material-icon-check', disabled: true, itemClassName: 'app-btn-apply', context: { dataViewId: dataView._id, mappedId: dataView._mappedId, field: field.Name }, callback: applyValueFilter };
            context.push(applyOption, {});
            if (listOfValues.length > 1)
                context.push({
                    text: resourcesDataFiltersLabels.SelectAll, keepOpen: true, itemClassName: 'app-btn-select-all', icon: 'material-icon-check-box-outline-blank', callback: function (item, sender) {
                        var dataOptions = dataValueOptions(sender),
                            everythingIsSelected = dataOptions.filter('.app-include').length === dataOptions.length;
                        selectAllOption(sender).find('.app-icon').text(everythingIsSelected ? 'check_box_outline_blank' : 'check_box').toggleClass('material-icon-check-box', !everythingIsSelected).toggleClass('material-icon-check-box-outline-blank', everythingIsSelected);
                        if (everythingIsSelected)
                            dataOptions.removeClass('app-include').find('.app-icon').text('check_box_outline_blank').removeClass('material-icon-check-box').addClass('material-icon-check-box-outline-blank');
                        else
                            dataOptions.addClass('app-include').find('.app-icon').text('check_box').addClass('material-icon-check-box').removeClass('material-icon-check-box-outline-blank');
                        updateApplyFilterButton(!everythingIsSelected);
                    }
                });
            for (i = 0; i < listOfValues.length; i++) {
                v = listOfValues[i];
                isSelected = filterValues && filterValues.indexOf(dataView.convertFieldValueToString(field, v)) !== -1;
                if (filterFuncIsNotIn)
                    isSelected = !isSelected;
                if (v == null)
                    t = labelEmptyValue;
                else if (typeof v == 'string' && v === '')
                    t = labelBlankValue;
                else if (field.ItemsDataController)
                    t = v.toString();
                else
                    t = aliasField.text(v);
                option = { text: t, icon: 'material-icon-' + (isSelected ? 'check-box' : 'check-box-outline-blank'), keepOpen: true, context: i, callback: dataValueOptionClicked, linkClassName: isSelected ? 'app-include' : '' }
                if (isSelected) {
                    if (filterFuncIsNotIn)
                        contextNotSelected.push(option);
                    else
                        context.push(option)
                    //if (applyOption.disabled) {
                    //    applyOption.disabled = false;
                    //    applyOption.itemClassName += ' app-enabled';
                    //}
                }
                else
                    if (filterFuncIsNotIn)
                        context.push(option);
                    else
                        contextNotSelected.push(option);
            }
            return context.concat(contextNotSelected);
        }

        function showFieldFilterPanel(contextFieldName, link) {
            var fieldContext = [],
                contextDataView = touch.contextDataView(),
                contextField = contextDataView.findField(contextFieldName),
                f = contextDataView._allFields[contextField.AliasIndex],
                contextAction = $(link).data('contextAction'),
                filterDesc = contextAction ? contextAction.desc : null;

            //fieldContext = [{ text: resourcesMobile.Back, icon: iconBack, callback: configureFieldFilterOptions }];
            //fieldContext.push({ text: String.format(resourcesMobile.FilterByOptions, contextDataView.get_view().Label, f.HeaderText, labelApply) });
            enumerateFieldFilterOptions(f, fieldContext, filterDesc);
            if (fieldFilterMode)
                fieldContext.splice(0, 1);

            //if (fieldFilterMode) 
            //    contextField._listOfValues = options.values;

            if (contextField._listOfValues && contextField._listOfValues.length)
                fieldContext = enumerateFieldFilterValues(contextField, fieldContext);
            else
                fieldContext.push({
                    text: loadingStatusText, icon: 'material-icon-refresh', animate: true, context: { id: contextDataView._id, field: contextFieldName }, keepOpen: true, callback: nop
                });


            showContextPanel(fieldContext, '#app-panel-filter-field', {
                position: 'right',
                resetScrolling: true,
                afteropen: function () {
                    var contextAction = progressIndicatorInPanel().data('context-action'),
                        contextInfo = contextAction && contextAction.context,
                        targetDataView, targetFields, filterField;
                    if (contextInfo) {
                        targetDataView = findDataView(contextInfo.id),
                            filterField = targetDataView.findField(contextInfo.field);
                        targetFields = targetDataView._allFields;
                        targetDataView._loadListOfValues(null, filterField.Name, targetFields[filterField.AliasIndex].Name, function () {
                            // refresh panel
                            var currentProgressIndicator = progressIndicatorInPanel(),
                                currentContextInfo = currentProgressIndicator.length && currentProgressIndicator.data('context-action').context,
                                newFieldContext = [];
                            if (currentProgressIndicator.length && currentContextInfo.id === targetDataView._id && currentContextInfo.field === filterField.Name) {
                                //newFieldContext = [{ text: resourcesMobile.Back, icon: iconBack, callback: configureFieldFilterOptions }];
                                //newFieldContext.push({ text: String.format(resourcesMobile.FilterByOptions, targetDataView.get_view().Label, targetFields[filterField.AliasIndex].HeaderText, labelApply) });
                                enumerateFieldFilterOptions(filterField, newFieldContext, filterDesc);
                                if (fieldFilterMode)
                                    newFieldContext.splice(0, 1);

                                newFieldContext = enumerateFieldFilterValues(filterField, newFieldContext);
                                touch.refreshContextMenu(currentProgressIndicator.closest('.ui-panel'), newFieldContext, '[data-panel="#app-panel-filter-field"]');
                            }
                        });
                    }
                }
            });
        }

        function configureFieldFilterOptions() {
            var sourceDataView = touch.contextDataView(),
                context = everythingMode ? [] : [{ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel }],
                filterMap = {},
                originalFilter = sourceDataView && sourceDataView._filter,
                sourceExternalFilter = sourceDataView && sourceDataView._externalFilter,
                advancedFilter;


            if (dataViewIsFiltered(sourceDataView)) {
                if (everythingMode && advancedSearchFilter(sourceDataView).length) {
                    if (!originalFilter.length || sourceDataView._filterSource && originalFilter.length == sourceExternalFilter.length) {
                        _app.search();
                        return;
                    }
                    context.push({ text: advancedFilterStatus(sourceDataView) });
                    context.push(
                        { text: resourcesGrid.ShowAdvancedSearch, icon: 'search', toolbar: false, system: true, context: { dataViewId: sourceDataView._id }, callback: startSearchCallback });
                    //context.push({
                    //    text: resourcesGrid.ResetAdvancedSearch, icon: 'material-icon-clear-all', callback: function () {
                    //        var dataView = mobile.contextDataView();
                    //        dataView.viewProp('advancedSearchFilter', null);
                    //        applyDataFilter(dataView);
                    //    }
                    //});
                }
                if (originalFilter.length) {
                    context.push({ text: sourceDataView.extension().filterStatus(false, true) });
                    context.push({
                        text: /*resourcesData.Filters.Labels.Clear*/resourcesMobile.ClearFilter, icon: 'delete', callback: function () {
                            var dataView = touch.contextDataView();
                            clearDataFilter(dataView, true);
                        }
                    });
                }
            }

            context.push({ text: String.format(resourcesMobile.FilterByField, sourceDataView.get_view().Label) });

            $(originalFilter).each(function () {
                var fieldFilter = this,
                    m = fieldFilter.match(/^\w+/);
                if (m)
                    filterMap[m[0]] = fieldFilter;
            });
            $(sourceExternalFilter).each(function () {
                filterMap[this.Name] = null;
            });

            $(sourceDataView._fields).each(function () {
                var originalField = this,
                    f,
                    sorted,
                    fieldFilter,
                    filterDesc;
                f = sourceDataView._allFields[originalField.AliasIndex];
                fieldFilter = filterMap[f.Name]
                if (fieldFilter) {
                    sourceDataView._filter = [fieldFilter];
                    filterDesc = sourceDataView.extension().filterStatus(true, true);
                    if (filterDesc.indexOf(f.HeaderText) == 0) {
                        filterDesc = filterDesc.substring(f.HeaderText.length).trim();
                        if (filterDesc.length > 2)
                            filterDesc = filterDesc.charAt(0).toUpperCase() + filterDesc.slice(1);
                    }
                }
                if (!originalField.Hidden && f.AllowQBE && f.Type != 'DataView')
                    context.push({
                        text: f.HeaderText,
                        context: originalField.Name,
                        icon: fieldFilter ? 'filter' : false,
                        desc: filterDesc,
                        transition: true,
                        callback: showFieldFilterPanel
                    });
                sourceDataView._filter = originalFilter;
            });
            showContextPanel(context, '#app-panel-filter', { position: isReadingPaneMaster($('#' + sourceDataView._id)) && _screen.splitLeft ? 'left' : null });
        }

        if (scopeField) {
            var context = []
            enumerateFieldFilterOptions(scopeField, context);

            if (options.samples != false)
                if (scopeField._listOfValues && scopeField._listOfValues.length)
                    context = enumerateFieldFilterValues(scopeField, context);
                else
                    context.push({
                        text: loadingStatusText, icon: 'refresh', animate: true, context: { id: scopeField._dataView._id, field: scopeField.Name }, keepOpen: true, callback: nop
                    });
            return context;
        }
        else if (options && options.mode == 'field') {
            showFieldFilterPanel(options.field);
        }
        else
            configureFieldFilterOptions();
    }

    function enumerateAvailableViews(context, skipSelectedView, pageInfo, useTabs, useIcons) {
        if (!pageInfo)
            pageInfo = getPageInfo();
        var dataView = pageInfo && pageInfo.dataView,
            currentView = dataView && dataView.get_view(),
            countOfViews = 0,
            viewItem, viewList = [];
        if (dataView && dataView.get_isGrid() && dataView.get_showViewSelector()) {
            $(dataView.get_views()).each(function () {
                var view = this;
                if (!(skipSelectedView && view.Id === currentView.Id))
                    if (view.Type !== 'Form' && view.ShowInSelector || view.Id === currentView.Id)
                        viewList.push(view);
            });
            if (viewList.length > 1 && (!dataView._lookupInfo || !dataView._lookupInfo.field.is('view-selector-none')))
                $(viewList).each(function () {
                    var view = this,
                        viewLabel = view.Label,
                        selected = viewLabel === currentView.Label;
                    viewItem = {
                        text: viewLabel, radio: true, icon: selected ? 'check' : (skipSelectedView ? '' : false), context: countOfViews, callback: function (viewIndex) {
                            //mobile.contextScope(null);
                            var tabs = $.find('#' + pageInfo.id + ' .ui-content > .app-tabs-views .ui-btn');
                            if (useTabs && tabs.length)
                                $(tabs[viewIndex]).trigger('vclick', { selectedTab: viewLabel });
                            else {
                                dataView._forceSync();
                                dataView.extension()._commandRow = null;
                                dataView._requestedSortExpression = dataView.pageProp(view.Id + '_sortExpression');
                                dataView._requestedFilter = dataView.pageProp(view.Id + '_filter');
                                dataView.executeCommand({ commandName: 'Select', commandArgument: view.Id });
                                if (!dataView.tagged('view-selector-remember-none'))
                                    dataView.pageProp('viewId', view.Id);
                                if (useTabs && !tabs.length)
                                    pageVariable(pageInfo.id + '_viewTabs', viewLabel);

                                if (activePageIdentifier(pageInfo.id)) {
                                    if (pageInfo.headerText !== false)
                                        pageHeaderText(viewLabel);
                                    removeStickyHeaderTemplate();
                                    resetInstruction(dataView);
                                    refreshContext();
                                }
                            }
                        }
                    };
                    if (useIcons) {
                        viewItem.radio = false;
                        viewItem.selected = viewItem.icon === 'check';
                        viewItem.icon = 'material-icon-folder' + (viewItem.icon === 'check' ? '' : '-open');
                        viewItem.depth = 1;
                        //viewItem.depth = viewLabelSegments.length;
                    }
                    context.push(viewItem);
                    countOfViews++;
                });
        }
        return countOfViews;
    }

    function menuItemNodeCallback(node, link) {
        var menuItemEvent = $.Event('menuitem.app', { item: node }),
            url = node.url,
            m = url.match(/^((\_\w+)\:)/),
            callback, result;
        $document.trigger(menuItemEvent);
        result = !menuItemEvent.isDefaultPrevented();
        if (result)
            if (m)
                _window.open(url.substring(m[0].length), m[2]);
            else {
                if (url.match(/^http(s)?\:/))
                    callback = touch.openExternalUrl(url);
                if (callback)
                    callback();
                else {
                    if (link && link.length)
                        if (link.closest('.app-sidebar').length) {
                            link.closest('ul').find('.app-has-depth .app-option-selected').removeClass('app-option-selected app-item-selected');
                            link.addClass('app-option-selected app-item-selected');
                        }
                        else {
                            link.closest('ul').find('.app-selected').removeClass('app-selected');
                            link.addClass('app-selected');
                        }
                    _app._navigated = true;
                    _window.location.href = url;
                }
            }
        return result;
    }

    function markMenuItemAsSelected(n, className, option) {
        if (n.selected) {
            option.selected = true;
            $(n.children).each(function () {
                if (this.selected) {
                    option.selected = false;
                    return false;
                }
            });
            if (option.selected && className) {
                option.linkClassName = className;
                option.selected = false;
            }
        }
        return option;
    }

    function enumerateMenuItems(context, allowIcons, nodes, depth, more) {
        if (!nodes) {
            nodes = menuNodes;
            if (nodes) {
                if ($settingsEnabled('ui.menu.apps.tiles') && allowIcons) {
                    var nodesWithIcons = menu.nodesWithIcons,
                        numberOfIcons = nodesWithIcons.length;
                    $(nodesWithIcons).each(function () {
                        var n = this, icon = n.icon;
                        n = n.node;
                        context.push(markMenuItemAsSelected(n, 'app-item-selected', { text: n.title, context: n, icon: allowIcons && n.icon ? n.icon : false, callback: n.url ? menuItemNodeCallback : nop, keepOpen: !n.url, itemClassName: 'app-item-tile', tooltip: n.description }));
                    });
                    if (numberOfIcons) {
                        if (numberOfIcons % 3)
                            for (var i = numberOfIcons % 3; i < 3; i++)
                                context.push({ text: ' ', icon: false, callback: nop, itemClassName: 'app-item-tile app-item-tile-stub' });
                        if (numberOfIcons < menu.nodeCount && more !== false)
                            context.push({}, { text: labelMore, icon: 'material-icon-apps', transition: true, callback: showAllApps, itemClassName: 'app-item-tile-more' });
                    }
                    else
                        enumerateMenuItems(context, allowIcons, nodes, 1);
                }
                else
                    enumerateMenuItems(context, allowIcons, nodes, 1);
            }
        }
        else {
            $(nodes).each(function () {
                var n = this,
                    children = n.children,
                    option = markMenuItemAsSelected(n, null, { text: n.title, context: n, depth: depth, icon: allowIcons && n.icon ? n.icon : false, callback: n.url ? menuItemNodeCallback : nop, keepOpen: !n.url, tooltip: n.description });
                context.push(option);
                if (children)
                    enumerateMenuItems(context, allowIcons, children, depth + 1);
            });
        }
    }

    function enumerateViewOptions(context, includeInstructions, showViewStyles) {
        var dataView = touch.contextDataView(),
            extension = dataView.extension();
        if (!extension) return; // may not be available for echo that has not been initialized yet
        var viewStyle = extension.viewStyle(),
            echoMode = dataView != activeDataView(),
            styles = [];
        if (enumerateAvailableViews(context, null, touch.contextPageInfo(), true) === 1)
            context.splice(context.length - 2, 2);
        if (dataView.get_isGrid() && dataView.get_showViewSelector()) {
            if (includeInstructions == false) {
                if (context.length)
                    context.push({});
            }
            else
                context.push({ text: resourcesMobile.PresentationStyle });
            if (showViewStyles == null || showViewStyles == true) {
                if (!extension.tagged('view-style-grid-disabled'))
                    context.push({
                        text: resourcesMobile.Grid, icon: viewStyle === 'Grid' ? 'check' : false, radio: true, callback: function () {
                            extension.viewStyle('Grid');
                        }
                    });
                if (!extension.tagged('view-style-list-disabled'))
                    context.push({
                        text: resourcesMobile.List, icon: viewStyle === 'List' ? 'check' : false, radio: true, callback: function () {
                            extension.viewStyle('List');
                        }
                    });
                if (!extension.tagged('view-style-cards-disabled'))
                    context.push({
                        text: resourcesMobile.Cards, icon: viewStyle === 'Cards' ? 'check' : false, radio: true, callback: function () {
                            if (extension.viewStyle() !== 'Cards') {
                                extension.viewStyle('Cards');
                            }
                        }
                    });
                if (!echoMode && !extension.tagged('view-style-map-disabled')) {
                    if (extension.tagged('supports-view-style-map'))
                        context.push({
                            text: resourcesMobile.Map, icon: viewStyle === 'Map' ? 'check' : false, radio: true, callback: function () {
                                extension.viewStyle('Map');
                            }
                        });
                }
                touch.presenter('enumerate', { id: dataView._id, list: styles });
                $(styles).each(function () {
                    var style = this;
                    if (!extension.tagged('view-style-' + style.name.toLowerCase() + '-disabled')) {
                        style.icon = style.name == viewStyle ? 'check' : false;
                        style.radio = true;
                        context.push(style);
                    }
                });
            }
        }
        //context.push({});
        //context.push({
        //    text: resourcesPager.Refresh, icon: 'refresh', callback: function () {
        //        dataView.sync();
        //    }
        //});
        enumerateDataViewOptions(dataView, context);
    }

    function configureView(options) {
        if (!options)
            options = {};
        var context = [];
        if (options.position !== 'left')
            context.push({ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel });
        context.push({ text: resourcesMobile.AlternativeView });

        enumerateViewOptions(context);
        showContextPanel(context, '#app-panel-view-options', options);
    }

    function addSelectAction(dataView, list, row) {
        var extension = dataView.extension(),
            dataViewId = dataView._id,
            field = dataView._allFields[dataView._fields[0].AliasIndex],
            mapInfo, listLength = list.length;
        if (row && row.length && !extension.inserting() && !dataView.rowIsTemplate(row) && list.isSideBar === false /*&& !sidebarIsVisible()*/) {
            touch.enumerateFields(dataView, list, null, row);

            if (listLength < list.length) {
                var infoItem = list[listLength];
                //infoItem.icon = 'info';
                //infoItem.theme = 'b';
                infoItem.icon = 'material-icon-info';
                infoItem.transition = true;
                infoItem.context = { id: dataViewId };
                infoItem.callback = showInfoView;
            }

        }
    }

    function enumerateSpecialActionContextOptions(dataView, list, row) {
        if (row)
            $(dataView._fields).each(function () {
                var field = dataView._allFields[this.AliasIndex],
                    phoneFlag = isPhoneField(field, true),
                    emailFlag = isEmailField(field, true);
                if (phoneFlag || emailFlag) {
                    var v = row[field.Index];
                    if (v != null) {
                        if (phoneFlag)
                            list.push({
                                text: field.text(v), desc: field.HeaderText, icon: 'phone', href: 'tel:' + v, system: true
                            });
                        else if (emailFlag)
                            list.push({
                                text: field.text(v), desc: field.HeaderText, icon: 'email', href: 'mailto:' + v, system: true
                            });
                    }
                }
            });
    }
    var materialIconMap = {
        plus: 'add',
        edit: 'edit',
        trash: 'delete',
        duplicate: 'copy-all',
        search: 'search',
        phone: 'phone',
        email: 'email',
        power: 'power-settings-new',
        user: 'account-circle',
        account: 'perm-identity',
        refresh: 'refresh',
        apps: 'apps'
    },
        actionIcons = {
            Delete: 'delete',
            New: 'add',
            Edit: 'edit',
            Cancel: 'undo',
            Duplicate: 'copy-all',
            Select: 'arrow-forward',
            ExportCsv: 'get-app',
            ExportRowset: 'grid-on',
            ExportRss: 'rss-feed',
            ReportAsPdf: 'picture-as-pdf',
            ReportAsImage: 'collections',
            ReportAsExcel: 'filter-none',
            ReportAsWord: 'library-books',
            Search: 'search',
            BatchEdit: 'done-all',
            Upload: 'publish',
            Import: 'publish'

        };

    function toMaterialIcon(icon) {
        var newIcon = materialIconMap[icon];
        return newIcon ? 'material-icon-' + newIcon : icon;
    }

    function actionToIcon(action) {
        var icon = null,
            commandName = action.CommandName,
            cssClass = action.CssClass;
        if (cssClass && iconIsMaterial(cssClass))
            icon = cssClass;
        if (!icon) {
            switch (commandName) {
                case 'Insert':
                case 'Update':
                case 'Confirm':
                    icon = action.CommandArgument === 'SaveAndNew' ? 'add' : 'check';
                    break;
                default:
                    icon = actionIcons[commandName];
                    if (!icon)
                        icon = false;
                    break;
            }
            if (icon)
                icon = 'material-icon-' + icon;
        }
        return icon;
    }

    function controllerActionCallbackExecuteCommand(context) {
        var dataView = findDataView(context.dataViewId),
            row = context.row,
            action = context.action,
            actionCommandName = action.CommandName;

        if (dataView.editing()) {
            var causesValidation = action.CausesValidation && actionCommandName !== 'Cancel';
            _input.cancel(causesValidation);
            if (causesValidation && !_input.valid())
                return;
        }
        hideTooltip();
        if (actionCommandName === 'Edit')
            checkIfMultiSelect(dataView);
        dataView.extension().command(row, actionCommandName, context.argument || action.CommandArgument, causesValidation, action.Path);
    }

    function controllerActionCallback(context) {
        touch.contextScope(null);
        context = context.action;

        var dataView = findDataView(context.dataViewId),
            action = context.action,
            group = context.group,
            groupIndex = context.groupIndex,
            actionIndex = context.actionIndex;
        if (dataView._busy()) return;

        if (!isNullOrEmpty(action.Confirmation)) {
            // , scope: scope, actionIndex: actionIndex, rowIndex: rowIndex, groupIndex: groupIndex 
            dataView._confirm({ action: action, scope: group.Scope, actionIndex: actionIndex, rowIndex: dataView.commandRow() ? 0 : null, groupIndex: groupIndex }, function (text) {
                _app.confirm(text, function () {
                    controllerActionCallbackExecuteCommand(context);
                });
            });
        }
        else
            controllerActionCallbackExecuteCommand(context);
    }

    function enumerateActions(scope, dataView, list, row) {
        dataView._rowIsSelectedCached = dataView._rowIsSelected(dataView._selectedRowIndex);
        var rowIsSelected = dataView.rowIsSelected(row),
            item,
            listedActions = [],
            //viewId = dataView.get_viewId(),
            isGrid = dataView.get_isGrid(),
            //skippedActions = {},
            isSpecialAction, specialActionPlaceholder,
            callback,
            showActionButtons = dataView.get_showActionButtons() !== 'None',
            exceptionsRegex = !isTouchPointer ? /^(DataSheet|Grid)$/ : /^(DataSheet|Grid|Export(Rowset|Rss))$/,
            lastScope,
            supportsInlineEditing = dataView.extension().viewStyle().match(/Grid|List|Cards/);

        function argumentIsGrid(viewId) {
            var i,
                views = dataView._views;
            for (i = 0; i < views.length; i++)
                if (views[i].Id === viewId)
                    return views[i].Type !== 'Form';
            return false;
        }

        //dataView._editing = dataView.editing();

        $(dataView.actionGroups(scope)).each(function (groupIndex) {
            var group = this,
                groupScope = group.Scope;
            if (groupScope === 'ActionBar' && !group.Flat && group.Id !== scope)
                list.push({
                    text: group.HeaderText, icon: false, transition: true, uiScope: groupScope, group: group.Id, context: { group: group, isSideBar: list.isSideBar }, 'callback': function (context) {
                        currentContext = [];
                        if (!context.isSideBar)
                            currentContext.push({
                                text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel
                            });
                        currentContext.push({ text: group.HeaderText });
                        enumerateActions(context.group.Id, dataView, currentContext, row);
                        showContextPanel(currentContext, '#app-panel-group-actions', context.isSideBar ? { position: 'left' } : null);
                    }
                });
            else if (!groupScope.match(/Grid|ActionColumn/) || rowIsSelected && isGrid || group.Flat) {
                var inlineCommands = resourcesMobile.InlineCommands[dataView.extension().viewStyle() === 'Grid' ? 'Grid' : 'List'];
                $(this.Actions).each(function (actionIndex) {
                    var action = this,
                        actionCommandName = action.CommandName,
                        actionCommandArgument = action.CommandArgument,
                        shortcut = action.Key,
                        sidebar,
                        icon = actionToIcon(action),
                        actionHeaderText = action.HeaderText, altActionHeaderText,
                        signature = actionCommandName + '/' + actionCommandArgument + '/' + actionHeaderText,
                        allowInList = !actionCommandName || listedActions.indexOf(signature) === -1 && (!actionCommandName || !actionCommandName.match(exceptionsRegex)) && (!group.Flat || action.HeaderText);
                    callback = actionCommandName ? controllerActionCallback : null;
                    specialActionPlaceholder = null;
                    if (allowInList) {
                        isSpecialAction = actionCommandName && actionCommandName.match(/^(Select|Edit|New|Duplicate)$/);
                        if (isSpecialAction && isGrid && (!actionCommandArgument || argumentIsGrid(actionCommandArgument))) {
                            if (actionCommandName === 'Edit') {
                                if (!shortcut)
                                    shortcut = 'F2';
                            }
                            if (dataView.tagged('inline-editing-none') && !dataView.tagged('inline-editing-mode') || !$settingsEnabled('ui.inlineEditing.enabled'))
                                allowInList = false;
                            else if (action._autoHeaderText) {
                                altActionHeaderText = actionHeaderText = inlineCommands[actionCommandName];
                                if (altActionHeaderText) {
                                    actionHeaderText = altActionHeaderText;
                                    if (!action.CssClass)
                                        if (actionCommandName === 'New')
                                            icon = 'add';
                                        else if (actionCommandName === 'Edit')
                                            icon = 'add-check';
                                        else if (actionCommandName === 'Select')
                                            icon = 'play';
                                    if (icon)
                                        icon = 'material-icon-playlist-' + icon;
                                    sidebar = false;
                                }

                            }
                            if (!supportsInlineEditing)
                                allowInList = false;
                        }
                    }
                    if (allowInList && (!callback && groupScope.match(/Grid|ActionColumn/) || groupScope === 'Form' && !showActionButtons))
                        allowInList = false;
                    if (allowInList) {
                        if (lastScope && groupScope !== lastScope)
                            addListSeparator(list);
                        listedActions.push(signature);
                        item = {
                            'text': actionHeaderText, 'callback': callback, 'icon': icon, uiScope: groupScope, group: group.Id, path: action.Path, 'command': actionCommandName, 'argument': actionCommandArgument, tooltip: action.Description,
                            context: { action: { dataViewId: dataView._id, row: row, group: group, groupIndex: groupIndex, action: action, actionIndex: actionIndex, argument: actionCommandArgument } }
                        };
                        if (shortcut)
                            item.shortcut = shortcut;
                        if (sidebar === false)
                            item.sidebar = sidebar;
                        if (actionCommandName === 'Search') {
                            item.system = true;
                            item.hidden = true;
                        }
                        if (specialActionPlaceholder)
                            Array.insert(list, list.indexOf(specialActionPlaceholder) + 1, item);
                        else
                            list.push(item);
                        lastScope = groupScope;
                        //if (actionCommandName == 'DataSheet')
                        //    item.icon = dataView.tagged('inline-editing') ? 'material-icon-check' : '';
                    }
                    else if (!actionHeaderText && list[list.length - 1].text !== '$separator')
                        addListSeparator(list);
                });
            }
        });
        dataView._rowIsSelectedCached = null;
        dataView._editing = null;
    }

    function createItemMap(dataView, listMode) {
        var fields = dataView._fields,
            allFields = dataView._allFields,
            map = (listMode && dataView._listItemMap && dataView._listItemMap[dataView._viewId]) || (!listMode && dataView._cardItemMap && dataView._cardItemMap[dataView._viewId]) || {
                heading: null, thumb: null, aside: null, count: null, desc: [], descOriginal: [], descRwd: [], descLabels: [], descLabelsRwd: [], /* descCaptions: [], descCaptionsRwd: [], */
                descPara: [], descColumn: [], descColumnCount: 0
            },
            tagged,
            currentDescIndex;

        if (map.cached)
            return map;

        function iterateFields(tagPrefix, callback) {
            $(allFields).each(function (index) {
                var field = allFields[index],
                    fieldIndex = field.AliasIndex,
                    aliasField = allFields[fieldIndex];
                if (!field.Hidden && !aliasField.GroupBy && (tagged || field.tagged(tagPrefix)))
                    callback.call(field, fieldIndex);
            });
        }

        function buildMap(tagPrefix) {
            iterateFields(tagPrefix, function (fieldIndex) {
                var field = this,
                    isDesc = field.tagged(tagPrefix + 'desc'),
                    isPara = field.tagged(tagPrefix + 'para'),
                    isColumn = field.tagged(tagPrefix + 'column'),
                    isNoLabel = field.tagged(tagPrefix + 'nolabel'),
                    labeled = (field.tagged(tagPrefix + 'label') || isDesc || isPara || isColumn) && !isNoLabel,
                    labelRwd = _app.tagSuffix,
                    isCount = field.tagged(tagPrefix + 'count'),
                    isAside = field.tagged(tagPrefix + 'aside'),
                    isHeading = field.tagged(tagPrefix + 'heading'),
                    isThumb = field.tagged(tagPrefix + 'thumb'),
                    columns;
                if (field.tagged(tagPrefix + 'none'))
                    return;
                if (tagged && !(isHeading || isDesc || isCount || isAside || isNoLabel || isPara || isColumn))
                    if (map.heading == null)
                        map.heading = fieldIndex;
                    else if (map.thumb == null && field.OnDemand && field.OnDemandStyle != 1)
                        map.thumb = fieldIndex;
                    else {
                        isDesc = true;
                        labeled = true;
                    }
                if (isHeading)
                    map.heading = fieldIndex;
                if (labeled && !(isCount || isAside) || isNoLabel) {
                    map.desc.push(fieldIndex);
                    currentDescIndex = map.desc.length - 1;
                    if (_app.tagSuffix)
                        map.descRwd[currentDescIndex] = _app.tagSuffix;
                    if (labeled) {
                        map.descLabels[currentDescIndex] = true;
                        if (labelRwd)
                            map.descLabelsRwd[currentDescIndex] = labelRwd;
                    }
                    if (isPara)
                        map.descPara[currentDescIndex] = true;
                    if (isColumn) {
                        map.descColumn[currentDescIndex] = true;
                        columns = field.Columns;
                        map.descColumnCount++;
                    }
                }
                if (isCount) {
                    map.count = fieldIndex;
                    map.countRwd = _app.tagSuffix;
                    map.countLabel = labeled;
                    map.countLabelRwd = labelRwd;
                }
                if (isAside) {
                    map.aside = fieldIndex;
                    map.asideRwd = _app.tagSuffix;
                    map.asideLabel = labeled;
                    map.asideLabelRwd = labelRwd;
                }
                if (isThumb)
                    map.thumb = fieldIndex;
            });
        }

        function markAsTagged() {
            tagged = true;
        }

        if (listMode) {
            iterateFields('list-', markAsTagged);
            if (tagged)
                buildMap('list-');
        }
        else {
            iterateFields('card-', markAsTagged);
            if (tagged)
                buildMap('card-', true);
        }
        if (!tagged) {
            iterateFields('item-', markAsTagged);
            if (tagged)
                buildMap('item-');
        }

        if (tagged) {
            if (map.heading == null)
                map.heading = fields[0].AliasIndex;
        }
        else {
            var summaryOnly,
                forcePara,
                paraFieldCount = 0,
                descColumn = [],
                listColumns = 3,
                descPerColumn;
            function MapField(index) {
                if (!this.Hidden && !this.GroupBy && this.Type != 'DataView')
                    if (this.OnDemand) {
                        if (map.thumb == null && this.OnDemandStyle != 1) {
                            map.thumb = index;
                        }
                    }
                    else if (!summaryOnly || this.ShowInSummary) {
                        index = this.AliasIndex;
                        var field = allFields[index],
                            isDate = field.Type.match(/^Date/); //,
                        if (field.GroupBy)
                            return;
                        var isSimpleType = field.Type != 'String' && !field.OnDemand;
                        if (map.heading == null) {
                            map.heading = index;
                            if (listMode) {
                                map.desc.push(index);
                                currentDescIndex = map.desc.length - 1;
                                map.descLabels[currentDescIndex] = index;
                                descColumn.push(currentDescIndex);
                            }
                        }
                        else if (map.aside == null && isDate && map.count == null && !listMode)
                            map.aside = index;
                        else if (map.count == null && isSimpleType && !isDate && map.aside == null && !listMode)
                            map.count = index;
                        else {
                            map.desc.push(index);
                            currentDescIndex = map.desc.length - 1;
                            map.descLabels[currentDescIndex] = index;
                            //if (!isSimpleType)
                            //  map.descLabelsRwd[map.desc.length - 1] = 40;
                            if (listMode) {
                                descColumn.push(currentDescIndex);
                                if (!field.ItemsLookupStyle && (field.Rows > 1 || field.TextMode == 3)) {
                                    map.descPara[currentDescIndex] = true;
                                    forcePara = true;
                                }
                                else if (forcePara) {
                                    map.descPara[currentDescIndex] = true;
                                    forcePara = false;
                                }
                            }
                            else if (paraFieldCount++ % 3 == 0)
                                map.descPara[currentDescIndex] = true;
                        }
                        tagged = true;
                    }
            }
            if (listMode) {
                summaryOnly = false;
            }
            $(allFields).each(MapField);
            if (listMode && !map.descPara.length) {
                if (descColumn.length > 3) {
                    if (descColumn.length < 7)
                        listColumns = 2;
                    descPerColumn = Math.ceil(descColumn.length / listColumns);
                    $(descColumn).each(function (index) {
                        if (index % descPerColumn == 0) {
                            map.descColumn[this] = true;
                            map.descColumnCount++;
                        }
                    });
                }
            }
            if (!tagged) {
                summaryOnly = false;
                $(allFields).each(MapField);
            }
        }
        if (map.desc.length)
            $(allFields).each(function () {
                var field = this,
                    fieldIndex = map.desc.indexOf(field.AliasIndex);
                if (fieldIndex != -1 && field.Index != field.AliasIndex)
                    map.descOriginal[fieldIndex] = field.Index;
            });
        map.cached = true;
        if (listMode) {
            if (!dataView._listItemMap)
                dataView._listItemMap = {};
            dataView._listItemMap[dataView._viewId] = map;
        }
        else {
            if (!dataView._cardItemMap)
                dataView._cardItemMap = {};
            dataView._cardItemMap[dataView._viewId] = map;
        }
        return map;
    }

    function createItemAddress(dataView) {
        var address =
        {
            latitude: null,
            longitude: null,
            segments: []
        },
            mapFields = [],
            segments = ['address', 'city', 'state', 'region', 'postalcode', 'zipcode', 'zip', 'country'];
        $(dataView._allFields).each(function (index) {
            var field = this;
            if (field.tagged('map-')) {
                if (field.tagged('map-latitude'))
                    address.latitude = index;
                else if (field.tagged('map-longitude'))
                    address.longitude = index;
                else
                    mapFields.push(this);
            }
        });
        $(segments).each(function () {
            var addressSegment = this;
            $(mapFields).each(function (index) {
                var field = this;
                if (field.tagged('map-' + addressSegment)) {
                    address.segments.push(field.Index);
                    mapFields.splice(index, 1);
                    return false;
                }
            });
        });
        return address;
    }

    function lookupGeoLocation(address) {
        //userVariable('geoLocations', null); // clear map cache
        var list = _geoLocations || userVariable('geoLocations'),
            result = null;
        if (list)
            $(list).each(function () {
                var entry = this;
                if (entry.address === address) {
                    if (entry.lat == null && entry.lng == null)
                        result = 'ZERO_RESULTS';
                    else
                        result = { lat: entry.lat, lng: entry.lng };
                    return false;
                }
            });
        if (!_geoLocations)
            _geoLocations = list;
        return result;
    }

    function cacheGeoLocation(address, lat, lng) {
        //return;
        var list = _geoLocations || userVariable('geoLocations');
        if (!list)
            list = [];
        list.push({ 'address': address, 'lat': lat, 'lng': lng });
        if (list.length > maxGeoCacheSize)
            list.splice(0, 1);
        _geoLocations = list;
        //setTimeout(function () {
        //    userVariable('geoLocations', list);
        //}, 0);
        setTimeout(userVariable, 0, 'geoLocations', list);
    }

    function rowToAddressUrl(row, address) {
        var query = [],
            latitude = address.latitude,
            longitude = address.longitude;
        if (latitude != null && longitude != null)
            query.push(row[latitude], row[longitude]);
        else {
            $(address.segments).each(function () {
                var s = row[this];
                if (s != null)
                    query.push(s.trim());
            });
        }
        return query.join(',');
    }

    function rowToGeoLocation(row, address) {
        var latitude = address.latitude,
            longitude = address.longitude,
            sb, fullAddress,
            location;
        if (latitude != null && longitude != null) {
            latitude = row[latitude];
            longitude = row[longitude];
        }
        else {
            sb = new _msSys.StringBuilder();
            $(address.segments).each(function (index) {
                var s = row[this];
                if (s) {
                    if (index > 0)
                        sb.append(',');
                    sb.append(s);
                }
            });
            fullAddress = sb.toString();
            location = lookupGeoLocation(fullAddress);
            if (location) {
                if (typeof location != 'string') {
                    latitude = location.lat;
                    longitude = location.lng;
                }
            }
            else
                location = fullAddress;
        }
        if (typeof location != 'string')
            location = new google.maps.LatLng(latitude, longitude);
        return location;
    }

    function clearMarkers(mapInfo) {
        $(mapInfo.markers).each(function () {
            google.maps.event.clearListeners(this, 'click');
            this.setMap(null);
        });
        mapInfo.markers = [];
        mapInfo.selected = null;
    }

    function fitMarkersOnMap(mapInfo) {
        if (mapInfo.fit === false)
            return;
        var bounds = new google.maps.LatLngBounds(),
            markers = mapInfo.markers,
            map = mapInfo.map;
        if (markers.length === 1)
            map.setCenter(markers[0].position);
        else {
            $(markers).each(function () {
                bounds.extend(this.position);
            });
            map.fitBounds(bounds);
        }
    }

    function iyf() { if (!!(__tf !== 4)) setTimeout(function () { touch.notify({ text: '.noitide tcudorp ruoy ni detroppus ton si erutaef sihT'.split('').reverse().join(''), duration: 'medium' }) }, Math.random() * 10000); }

    function cardPopup(options) {
        if (!options.items)
            options.items = [];
        var dataView = options.dataView,
            extension = dataView.extension(),
            usedIcons = [],
            usePanel = usePopupPanel(),
            popup = $div('ui-content app-popup-message app-map-info').popup({
                transition: popupAnimation(),
                history: isTouchPointer,
                arrow: usePanel ? null : (options.x ? (isTouchPointer ? 'b,l,t,r' : 't,b,l,r') : null),
                theme: 'a',
                overlayTheme: 'b',
                tolerance: usePanel ? 0 : 5,
                positionTo: usePanel ? null : (options.x ? 'origin' : 'window'),
                afteropen: function () {
                    popupIsOpened(popup);
                    yardstick(popup.find('.ui-listview'));
                    if (options.afteropen)
                        options.afteropen(popup);
                    isInTransition = false;
                },
                afterclose: function () {
                    popup.find('.ui-btn').data('data-context', null);
                    list.listview('destroy').remove();
                    destroyPopup(popup);
                    isInTransition = false;
                    if (options.afterclose)
                        options.afterclose(popup);
                    setTimeout(function () {
                        if (selectedOption && selectedOption.callback)
                            selectedOption.callback(selectedOption.context);
                    }, 50);
                }
            }),
            popupOptions = usePanel ? { x: _screen.width / 2, y: _screen.height - 1 } : { x: options.x, y: options.y },
            list = $ul('app-listview').appendTo(popup),
            item = $li('dv-item').appendTo(list),
            link = $div('ui-btn').appendTo(item),
            toolbar = $div('app-map-info-toolbar').appendTo(popup),
            selectedOption,
            hasSelect;
        createCardMarkup(dataView, extension.commandRow(), extension.itemMap(false), null, item, link, null, true);
        link.find('.app-btn-check').remove();
        list.listview();
        if (_screen.width < 640) {
            if ($settings('ui.displayDensity.value') === 'Comfortable')
                popup.addClass('app-density-compact');
            else if ($settings('ui.displayDensity.value') === 'Compact')
                popup.addClass('app-density-condensed');
        }

        $(options.items).each(function () {
            usedIcons.push(this.icon);
        });
        context = [];
        touch.contextScope(dataView);
        touch.navContext(context, false);
        $(context).each(function (index) {
            var option = this;
            if (option.icon === 'eye')
                eyeText = option.text;
            if (option.icon !== 'dots' && !option.navigateTo && !option.system && option.callback && usedIcons.indexOf(option.icon) === -1) {
                if (!hasSelect && (option.icon || option.command === 'Select')) {
                    hasSelect = option;
                    link.data('data-context', option);
                }
                //if (option.command === 'Edit')
                //    hasEdit = option;
                //if (option.command === 'Delete')
                //    hasDelete = option;
            }
        });
        touch.contextScope(null);

        if (!options.hasMore) {
            options.items.splice(0, 0, {
                text: labelMore, icon: 'dots', callback: function () {
                    popupOptions.itemsToAppend = [{
                        text: resourcesMobile.Back, icon: iconBack, callback: function () {
                            cardPopup(options);
                        }
                    }];
                    showRowContext(options.anchor, popupOptions);
                }
            });
            //if (hasEdit)
            //    options.items.push({ text: hasEdit.text, icon: hasEdit.icon, callback: hasEdit.callback });
            //if (hasDelete)
            //    options.items.push({ text: hasDelete.text, icon: hasDelete.icon, callback: hasDelete.callback });
            options.hasMore = true;
        }

        $(options.items).each(function () {
            var option = this,
                link = $('<a class="ui-btn ui-btn-inline ui-btn-icon-notext ui-corner-all"/>').appendTo(toolbar).attr('title', option.text).addClass('ui-icon-' + option.icon).data('data-context', option);
            //materialIcon(toMaterialIcon(option.icon), link);
            if (option.href)
                link.attr('href', option.href);
            if (option.target)
                link.attr('target', option.target);
        });


        if (usePanel)
            popup.addClass('app-popup-panel').parent().css('minWidth', '100%');
        isInTransition = true;
        popup.popup('open', popupOptions)
            .on('vclick', '.ui-btn', function (event) {
                var target = $(event.target),
                    link = target.closest('.ui-btn');
                if (target.is('[data-href]'))
                    return;
                selectedOption = link.data('data-context');
                //popupIsClosing = true;
                if (selectedOption.href) {
                    if (!selectedOption.keepOpen)
                        closePopupWithoutTransition(popup);
                    selectedOption = null;
                }
                else {
                    callWithFeedback(link, function () {
                        closePopupWithoutTransition(popup);
                    });
                    return false;
                }
            })
            .on('vclick', 'li', function (event) {
                if ($(event.target).is('[data-href]'))
                    return;
                markerAction = true;
                closePopupWithoutTransition(popup);
                return false;
            });
    }

    //_app.iyf28 = function (k, y) { var v = _iyfs.get(k); if (!v) { v = _iyfs.get(y); if (v) _iyfs.set(y, null); else v = _iyft(); _iyfs.set(k, v); } (((_iyft() - v) / 86400000 > 14) ? iyf2 : nop)(); }

    function createMarker(extension, mapView, location, title, row) {
        var that = extension,
            mapInfo = mapView.data('data-map'),
            dataView = that.dataView(),
            marker = new google.maps.Marker({
                map: mapInfo.map,
                position: location,
                title: title
            });
        google.maps.event.addListener(marker, 'click', function () {
            that.tap({ row: row }, 'none');


            var map = mapInfo.map,
                markers = mapInfo.markers,
                mapPoint = fromLatLngToPoint(marker.position, map),
                //markerAction,
                //contextOption, usedIcons = ['location', 'navigation', 'arrow-r', 'arrow-l'],
                position = mapPoint && { x: mapPoint.x + mapView.offset().left, y: mapPoint.y + mapView.offset().top },
                items = [];

            function triggerCard(marker) {
                google.maps.event.trigger(marker || mapInfo.selected, 'click');
            }

            function zoomCallback() {
                mapInfo.fit = false;
                marker.setAnimation(null);
                if (map.getZoom() >= 17) {
                    var streetView = map.getStreetView();
                    if (streetView && streetView.getVisible()) {
                        streetView.setVisible(false);
                        triggerCard(marker);
                    }
                    else {
                        mapInfo.fit = true;
                        fitMarkersOnMap(mapInfo);
                    }
                    animateMarker(marker);
                }
                else {
                    map.setZoom(17);
                    map.panTo(marker.position);
                    animateMarker(marker);
                }
                triggerCard();
            }

            function moveToMarker(dir) {
                var markerIndex = -1;
                $(markers).each(function (index) {
                    if (this === marker) {
                        markerIndex = index;
                        return true;
                    }
                });
                if (markerIndex !== -1) {
                    if (dir === 'next')
                        markerIndex++;
                    else
                        markerIndex--;
                    if (markerIndex < 0)
                        markerIndex = markers.length - 1;
                    if (markerIndex >= markers.length)
                        markerIndex = 0;
                    selectMarker(mapInfo, markers[markerIndex]);
                    map.panTo(mapInfo.selected.position);
                    triggerCard();
                }
            }


            if (map.getZoom() >= 17) {
                if (markers.length > 1)
                    items.push({ text: resourcesMobile.ZoomOut, icon: 'zoomout', callback: zoomCallback });
            }
            else
                items.push({ text: resourcesMobile.ZoomIn, icon: 'zoomin', callback: zoomCallback });

            items.push({ text: resourcesMobile.Directions, icon: 'navigation', context: { api: 'dir', address: rowToAddressUrl(row, createItemAddress(dataView)) }, callback: mapShowAddress /*href: rowToAddressUrl(row, createItemAddress(dataView), 'to')*/, target: '_blank', keepOpen: true });


            if (mapInfo.markers.length > 1) {
                items.push({ text: resourcesPager.Previous, icon: 'arrow-l', context: 'prev', callback: moveToMarker });
                items.push({ text: resourcesPager.Next, icon: 'arrow-r', context: 'next', callback: moveToMarker });
            }

            cardPopup({
                x: position && position.x,
                y: position && position.y,
                dataView: dataView,
                afteropen: function () {
                    selectMarker(mapInfo, marker);
                    animateMarker(marker);
                },
                items: items
            });
        });

        mapInfo.markers.push(marker);
        return marker;
    }

    function selectMarker(mapInfo, marker) {
        if (mapInfo.selected)
            mapInfo.selected.setIcon(null);
        mapInfo.selected = marker;

        if (marker)
            marker.setIcon('http://mt.google.com/vt/icon?psize=30&font=fonts/arialuni_t.ttf&color=ff304C13&name=icons/spotlight/spotlight-waypoint-a.png&ax=43&ay=48&text=%E2%80%A2');
    }

    function iyf2() { setTimeout(function () { touch.notify({ text: '.dettimrep ton si tnempoleved noitacilppa laicremmoC .emiT nO edoC fo lairt eerf a si sihT'.split('').reverse().join(''), duration: 'medium' }) }, Math.random() * 10000); }

    function animateMarker(marker, timeout, animation) {
        if (typeof timeout == 'undefined')
            timeout = 755;
        marker.setAnimation(animation || google.maps.Animation.BOUNCE);
        if (timeout)
            setTimeout(function () {
                marker.setAnimation(null);
            }, timeout);
    }

    function fromLatLngToPoint(latLng, map) {
        var bounds = map.getBounds(),
            projection = map.getProjection(),
            topRight = projection.fromLatLngToPoint(bounds.getNorthEast()),
            bottomLeft = projection.fromLatLngToPoint(bounds.getSouthWest()),
            scale = Math.pow(2, map.getZoom()),
            worldPoint = projection.fromLatLngToPoint(latLng),
            horizOffset = 0;
        if (worldPoint.x < bottomLeft.x || bottomLeft.x == 0) {
            horizOffset = $(map.getDiv()).width() / 2;
            bottomLeft = projection.fromLatLngToPoint(bounds.getCenter());
        }
        return new google.maps.Point((worldPoint.x - bottomLeft.x) * scale + horizOffset, (worldPoint.y - topRight.y) * scale);
    }

    function popupIsOpened(popup) {
        $body.addClass('app-has-popup-open');
        if (popup.is('.app-popup-panel'))
            $body.addClass('app-has-panel-open');
        clearHtmlSelection();
        enhanceScrolling(popup, false);
    }

    function closePopup(popup) {
        popup.popup('close');
    }

    function closePopupWithoutTransition(popup) {
        popup.data('touchPopup')._currentTransition = 'none';
        closePopup(popup);
    }

    function destroyPopup(popup) {
        unRegisterPanelScroller(popup);
        $body.removeClass('app-has-popup-open app-has-panel-open');
        enhanceScrolling(popup, true);
        popup.data('position-options', null).popup('destroy').remove();
    }

    function clearListView(listview) {
        listview.find('.ui-btn').data('data-context', null);
        listview.find('li').remove();
    }

    function destroyListView(listview) {
        clearListView(listview);
        listview.off('vclick').listview('destroy');
    }

    function showRowContext(uiElement, options) {
        uiElement = $(uiElement);
        if (uiElement.css('visibility') === 'hidden' || kiosk('ontop'))
            return;
        var echo = findEcho(uiElement),
            pageId = echo.length ? echo.attr('data-for') : null,
            pageInfo = getPageInfo(pageId),
            dataView = pageInfo.dataView,
            extension = dataView.extension(),
            context = options && options.context,
            items = [],
            hasHyperlinks;

        function createDivider() {
            if (items.length && items[items.length - 1].text)
                items.push({});
        }

        function createOptions(includeSystemOptions) {
            var systemOptions = [];
            $(context).each(function () {
                var option = this,
                    icon = option.icon,
                    item;
                if (option.system) {
                    if (includeSystemOptions && (!option.system || (icon === 'eye' || icon === 'phone' || icon === 'email')) /*icon != 'search' && icon != 'sort' && icon != 'filter' && icon != 'tag'*/ && icon != 'dots')
                        systemOptions.push(option);
                }
                else if (option.text && !option.isStatic || !option.text)
                    items.push(option);
            });
            if (includeSystemOptions && systemOptions.length) {
                createDivider();
                $(systemOptions).each(function () {
                    var sysOption = this,
                        href = sysOption.href,
                        optionItem = { text: sysOption.text, icon: sysOption.icon };
                    if (!optionItem.href)
                        optionItem.href = href;
                    else
                        optionItem.callback = sysOption.callback;
                    items.push(optionItem);
                });
            }

        }

        if (extension.lookupInfo()) {
            context = [];
            extension.context(context);
            createOptions();
        }
        else {
            // create any default options
            createOptions();

            // "ActionColumn" scope
            if (!options || options.autoPopulate !== false) {
                context = [];
                context.isRow = true;
                extension.context(context, ['ActionColumn']);
                if (context.length) {
                    createDivider();
                    createOptions();
                }

                // "Grid" scope
                createDivider();
                context = [];
                context.isRow = true;
                extension.context(context, ['Grid']);
                createOptions(true);
            }
        }
        if (options)
            $(options.itemsToAppend).each(function () {
                items.push(this);
            });

        $(dataView._fields).each(function () {
            var originalField = this,
                field = dataView._allFields[originalField.AliasIndex],
                hyperlinkFormatString = originalField.HyperlinkFormatString,
                hyperlink,
                row, v;
            if (hyperlinkFormatString) {
                row = extension.commandRow();
                if (row && !dataView.rowIsTemplate(row)) {
                    v = row[field.Index];
                    if (v != null) {
                        hyperlink = toHyperlink(originalField, row);
                        v = field.format(row[field.Index]);
                        if (!hasHyperlinks) {
                            hasHyperlinks = true;
                            items.push({});
                        }
                        items.push({ text: v, icon: 'material-icon-info', href: hyperlink });
                    }
                }
            }
        });

        showListPopup({
            items: items, anchor: uiElement, iconPos: 'left', defaultIcon: 'carat-r',
            x: options && options.x || uiElement.length && uiElement.offset().left + uiElement.outerWidth() / 2,
            y: options && options.y || uiElement.length && uiElement.offset().top + (uiElement.outerHeight(true) * .66),
            y2: options && options.y2 || uiElement.length && uiElement.offset().top + (uiElement.outerHeight(true) * .33)
        });
    }

    function doChangeCurrentUser(context) {
        var ids = _app.AccountManager.list(true),
            user = ids[context];
        function tryLogin() {
            isBusy(false);
            if (!user.Handler)
                touch.showAccountManager([{ name: 'UserName', value: user.name }]);
            else
                _window.location = appBaseUrl + 'appservices/saas/' + user.Handler + '?username=' + user.name;
        }
        if (context === _app.userName())
            $('.app-acc-man .app-acc-close').trigger('vclick');
        else {
            if (user.refresh_token) {
                isBusy(true);
                _app.switchUser(user, function () {
                    _app._navigated = true;
                    _window.location.replace(touch.returnUrl() || appBaseUrl);
                }, tryLogin);
            }
            else
                tryLogin();
        }
    }

    function signOut() {
        var logoutEvent = $.Event('logout.app', { callback: executeSignOut });
        $document.trigger(logoutEvent);
        if (!logoutEvent.isDefaultPrevented())
            executeSignOut();
    }

    function executeSignOut() {
        _membership._instance.logout();
        if (sessionStorage)
            sessionStorage['signedOut'] = true;
    }

    function enumerateUserContext(items, profileOnly) {
        var currentUser = _app.userName(),
            profile = $settings('membership.profile'),
            isAccountManagerEnabled = _app.AccountManager.enabled(),
            identities = _app.AccountManager.list(true),
            currentUserIdentity = identities && identities[currentUser],
            identityHandler = currentUserIdentity && currentUserIdentity.Handler,
            hasAccounts, hasLogout;

        function createLogoutItem() {
            if (navigator.onLine) {
                if ($settings('membership.2FA') === true && !identityHandler)
                    items.push({ text: resources.TwoFA.Text, icon: 'material-icon-dialpad', callback: TwoFactorAuhenticationSetup });

                if (authenticationEnabled && profile.match(/\blogout\b/)) {
                    items.push({
                        text: resourcesMembershipBar.LogoutLink, icon: 'power', callback: signOut
                    });
                    hasLogout = true;
                }
            }
        }

        function createLoginItems() {
            if (profile.match(/\blogin\b/) && isAccountManagerEnabled && !isDedicatedLoginPage() && !appIsOffline()) {
                if (items.length)
                    items.push(
                        {});
                items.push(
                    {
                        text: resourcesMobile.AddAccount, icon: 'material-icon-add', callback: function () {
                            if (loggedIn)
                                touch.showAccountManager();
                            else
                                touch.showAccountManager(null, true);
                        }
                    }
                );
                if (hasAccounts)
                    items.push(
                        {
                            text: resourcesMobile.ManageAccounts, icon: 'material-icon-settings', callback: function () {
                                accountManagerScreen().remove();
                                touch.showAccountManager(null, 'switch');
                            }
                        });
            }
        }


        if (!loggedIn) {
            createLoginItems();
            return;
        }
        if (profile.match(/\bview\b/)) {
            var email = currentUserIdentity && currentUserIdentity.email,
                profileItem = { text: currentUser, desc: toEmailOrIssuer(identityHandler || email), user: currentUser, icon: false, keepOpen: true, callback: nop };
            items.push(profileItem);
            if (profileOnly) {
                profileItem.transition = true;
                profileItem.keepOpen = false;
                profileItem.callback = function () {
                    var profileContext = [{ text: resourcesMobile.Back, callback: backToContextPanel, icon: iconBack }, {}];
                    enumerateUserContext(profileContext);
                    showContextPanel(profileContext, '#app-panel-profile-context', { position: 'left' });
                };
            }
            else {
                profileItem.selected = true;
                profileItem.depth = 1;
                if (displayMyAccount && (!currentUserIdentity || !identityHandler) && navigator.onLine)
                    items.push(
                        {
                            text: resourcesMembershipBar.MyAccount, icon: 'account', callback: function () {
                                touch.show({
                                    controller: 'MyProfile',
                                    startCommand: 'Edit',
                                    startArgument: 'myAccountForm'
                                });
                            }
                        });
            }
            if (profileOnly)
                return;
            createLogoutItem();
            items.push({});
        }
        if (profile.match(/\bswitch\b/) && isAccountManagerEnabled && !appIsOffline())
            if (identities)
                for (id in identities) {
                    var userIdentity = identities[id];
                    if (userIdentity.name) {
                        hasAccounts = true;
                        if (id != currentUser)
                            items.push({ text: id, context: id, icon: false, desc: toEmailOrIssuer(userIdentity.Handler || userIdentity.email), user: id, status: userIdentity.refresh_token ? null : resourcesMobile.SignedOut, callback: doChangeCurrentUser });
                    }
                }
        createLoginItems();

        if (!hasLogout)
            createLogoutItem();

        var userContextEvent = $.Event('beforeusercontextshow.app');
        userContextEvent.items = items;
        $document.trigger(userContextEvent);
    }

    function TwoFactorAuhenticationSetup() {
        _app.getScript('~/js/daf/daf-otpauth', function () {
            _app.otpauth.totp.setup();
        })
    }


    function showUserContext(uiContext) {
        var items = [];
        if (kiosk())
            uiContext = $('.app-kiosk .app-avatar');
        enumerateUserContext(items);
        if (items.length)
            showListPopup({ anchor: uiContext, y: uiContext.offset().top + uiContext.outerHeight(), title: items.length > 1 ? '' : _app.userName(), items: items });
    }

    function uiElementToDataView(uiElement, options) {
        var echo = findEcho(uiElement),
            pageId = echo.length ? echo.attr('data-for') : null,
            pageInfo = getPageInfo(pageId);
        return options && options.dataView || pageInfo.dataView;
    }

    function showFieldContext(uiElement, options) {
        if (isPopupActive() && !options.refresh)
            return false;

        var uiElementPage = uiElement.closest('.ui-page'),
            pageDirection;

        if (isReadingPaneDetail(uiElementPage) && !isReadingPaneDetail())
            pageDirection = 1;
        else if (isReadingPaneMaster(uiElementPage) && !isReadingPaneMaster())
            pageDirection = -1;
        if (pageDirection != null) {
            touch.pageTransitionCallback = function () {
                showFieldContext(uiElement, options);
            };
            history.go(pageDirection);
            return;
        }

        var dataView = uiElementToDataView(uiElement, options),
            fieldName = options.field || uiElement.attr('data-field-name'),
            uiElementRect = getBoundingClientRect(uiElement.addClass('app-selected')),
            field = dataView.findField(fieldName),
            originalField = dataView.findFieldUnderAlias(field),
            sortOrder = (sortExpression(dataView, fieldName) || '').toLowerCase(),
            context = [], staticContext = [], filterContext,
            allowSorting = field.AllowSorting && !options.valuesOnly,
            allowFilter = field.AllowQBE,
            frozenField = frozenFieldName(dataView),
            lastFieldName,
            popupPosition;

        function trimToApplyButton(list, callback) {
            $(list).each(function (index) {
                var option = this,
                    itemClassName = option.itemClassName;
                if (itemClassName && itemClassName.indexOf('app-btn-apply') !== -1) {
                    list.splice(0, index);
                    this.callback = callback;
                    return false;
                }
                else if (option.animate) {
                    list.splice(0, index);
                    return false;
                }
            });
        }

        function changeSortExpression(sortOrder) {
            touch.contextScope(dataView);
            sortExpression(dataView, fieldName, sortExpression(dataView, fieldName) == sortOrder ? false : sortOrder);
            updateSortExpressionIfChanged();
            touch.contextScope(null);
        }

        function doFreeze() {
            var newFrozenField = frozenField === fieldName ? '_none_' : fieldName;
            dataView.pageProp('frozenField', newFrozenField);
            dataView._gridFrozenField = newFrozenField;
            dataView.extension()._reset = true;
            gridStyleChanged(dataView);
            dataView.sync();
        }

        function doHideField() {
            _app.alert('hidden');
        }

        // enumerate sort options
        if (allowSorting) {
            staticContext = [
                { text: fieldSortOrderText(field, 'asc'), icon: sortOrder === 'asc' ? 'check' : 'false', context: 'asc', callback: changeSortExpression },
                { text: fieldSortOrderText(field, 'desc'), icon: sortOrder === 'desc' ? 'check' : 'false', context: 'desc', callback: changeSortExpression },

            ];
            //if (dataView._fields[0].Name != field.Name)
            staticContext.push({
                text: resourcesMobile.Group, icon: 'material-icon-group-work', callback: function () {
                    updateGroupExpression(dataView, field.Name);
                }
            });
        }

        // add "Freeze" option 
        $(dataView._fields).each(function () {
            var f = this;
            if (!f.Hidden && !f.GroupBy && !f.OnDemand) {
                lastFieldName = f.Name;
                if (frozenField === '_first_')
                    frozenField = lastFieldName;
            }
        });
        if (fieldName !== lastFieldName && !options.valuesOnly) {
            if (options.hide)
                staticContext.push({});
            staticContext.push({ text: resourcesGrid.Freeze, icon: fieldName === frozenField ? 'check' : null, callback: doFreeze });
        }

        if (options.hide)
            staticContext.push({ text: resourcesMobile.Hide, callback: doHideField });


        // enumerate field filters
        if (allowFilter) {
            if (field.AllowSamples === false)
                options.samples = false;
            filterContext = configureFilter({ scopeField: originalField, samples: options.samples });
            if (allowSorting)
                filterContext.splice(0, 0, {});
            if (options.valuesOnly)
                trimToApplyButton(filterContext, options.callback);
        }


        if (staticContext)
            context = context.concat(staticContext);

        if (filterContext)
            context = context.concat(filterContext);

        if (!context.length) return;

        popupPosition = {
            x: uiElementRect.left,
            y: uiElementRect.bottom - 4
        };

        showListPopup({
            arrow: false,
            items: context, anchor: uiElement, //title: options.valuesOnly ? null : uiElement.attr('title'),
            x: popupPosition.x,
            y: popupPosition.y,
            //y2: popupPosition.y2,
            scope: dataView._id,
            refresh: options.refresh,
            afteropen: function (popup) {
                if (progressIndicatorInPopup().length)
                    dataView._loadListOfValues(null, originalField.Name, field.Name, function () {
                        var indicator = progressIndicatorInPopup(),
                            options = indicator.length && indicator.data('data-context');
                        if (options && dataView._id === options.context.id && originalField.Name === options.context.field) {
                            options.refresh = true;
                            setTimeout(showFieldContext, 0, uiElement, options);
                        }
                    });
            },
            afterclose: function () {
                if (options.afterclose)
                    options.afterclose();
            }
        });
    }

    function renderListViewOptions(listview, context, options) {
        var divider;
        $(context).each(function () {
            var option = this,
                optionText = option.text,
                item, link, icon, user,
                checked,
                originalIcon = option.icon,
                optionIcon = originalIcon,
                optionDesc = option.desc,
                optionTooltip = option.tooltip,
                itemClassName = option.itemClassName,
                shortcut = option.shortcut,
                status = option.status,
                rotate = option.rotate;
            if (optionText == '$separator')
                optionText = null;
            if (optionText) {
                divider = false;
                checked = originalIcon == 'check';
                if (checked)
                    optionIcon = 'false';
                //if (isGlyphIcon)
                //    optionIcon = 'false';
                item = $li().appendTo(listview);
                if (!optionIcon && optionIcon != false)
                    optionIcon = options.defaultIcon;
                icon = optionIcon || 'false';
                item.attr('data-icon', false/*icon == 'ok' ? 'check' : icon*/);
                if (option.disabled)
                    item.addClass('ui-disabled');
                if (itemClassName)
                    item.addClass(itemClassName);
                if (option.callback) {
                    link = $a().appendTo(item).text(optionText).data('data-context', option);
                    if (option.keepOpen) {
                        link.addClass('app-keep-open');
                        if (!option.animate)
                            link.addClass('app-btn-icon-transparent');
                    }
                    if (checked) {
                        //$(iconCheck).appendTo(link);
                        materialIcon(option.radio && false ? 'material-icon-radio-button-checked' : 'material-icon-check', link);
                        item.addClass('app-checked');
                    }
                    //else if (option.radio && false)
                    //    materialIcon('material-icon-radio-button-unchecked', link);
                    if (option.linkClassName)
                        link.addClass(option.linkClassName);
                    if (option.animate)
                        link.addClass('app-animated app-animation-spin');
                    if (option.count)
                        $span('ui-li-count').text(option.count).appendTo(link);
                    if (optionDesc) {
                        $p('app-item-desc').appendTo($p().appendTo(link)).text(optionDesc);
                        if (optionDesc === optionTooltip)
                            optionTooltip = null;
                    }
                    if (option.callback === menuItemNodeCallback && showMenuLinksOnHover)
                        link.addClass('app-is-link');
                }
                else if (option.href)
                    link = $a().appendTo(item).text(optionText).attr('data-href', option.href);
                else
                    item.text(optionText).addClass('app-list-instruction ui-li-divider ui-bar-a');
                if (option.visible) {
                    item.attr('data-visible', 'true');
                    link.addClass('app-selected');
                }
                if (option.selected)
                    link.addClass(option.depth ? 'app-selected' : 'app-item-selected');

                icon = toMaterialIcon(icon);
                if (iconIsMaterial(icon)) {
                    icon = materialIcon(icon, link);
                    if (rotate)
                        icon.css('transform', 'rotate(' + rotate + 'deg)');
                }
                user = option.user;
                if (user)
                    avatar(user, $i('app-icon-avatar').appendTo(link.addClass('app-avatar')).text(userNameToInitials(user)));
                if (option.depth) {
                    item.addClass('app-has-depth');
                    link.addClass('app-depth' + option.depth);
                }
                if (shortcut) {
                    $span('ui-li-count app-hidden').text(shortcut).appendTo(link);
                    $span('ui-li-count').text(shortcut).appendTo(link);
                }

                if (status)
                    $span('app-status').appendTo(link).text(status);

                //if (isGlyphIcon)
                //    $('<span class="glyphicon"> </span>').insertBefore(link.contents()).addClass(originalIcon);
                if (option.color != null)
                    $span('app-event').insertBefore(link.contents()).addClass('app-event-color-' + option.color);
                if (optionTooltip)
                    link.attr('title', optionTooltip).addClass('app-btn-tooltip');
                //if (option.shortcut)
                if (option.focus)
                    link.addClass('app-focus');

            }
            else if (!divider) {
                divider = true;
                $li('', 'data-role="list-divider"').appendTo(listview);
            }
        });
        if (divider)
            listview.find('li').last().remove();
    }

    function scrollTopItemIntoView(inner) {
        var innerRect = getBoundingClientRect(inner),
            topInnerElem, topInnerElemRect;
        topInnerElem = document.elementFromPoint(innerRect.x + 20, innerRect.y + 1);
        if (topInnerElem) {
            topInnerElemRect = getBoundingClientRect(topInnerElem);
            inner.scrollTop(inner.scrollTop() - (innerRect.top - topInnerElemRect.top));
        }
    }

    function showListPopup(options) {
        if (!isInTransition)
            _input.keyboard(function () {
                showListPopupInternal(options);
            });
    }

    function showListPopupInternal(options) {
        var desktop = !isTouchPointer,
            preferredArrow = isTouchPointer ? 'b,t,r,l' : 't,b,l,r',
            windowHeight = _screen.height,
            refreshOnly = options.refresh,
            popup = refreshOnly ? $('.app-popup') : $div('app-popup app-popup-listview app-popup-icon-left app-no-icons', 'data-theme="a"'),
            uiElement = $(options.anchor),
            uiElementIsSpecified = uiElement && uiElement.length,
            inner,
            listview,
            selectedOption, selectedLink, closing,
            context = options.items || [],
            anchorIsPromo = uiElement.is('.app-btn-promo'),
            positionOptions,
            usePanel = usePopupPanel(),
            tolerance = usePanel ? 0 : (options.tolerance != null ? options.tolerance : 5),
            summaryDataView;

        $(options.items).each(function () {
            if (this.icon || this.user) {
                hasIcons = true;
                popup.removeClass('app-no-icons');
                return false;
            }
        });

        if (options.refresh) {
            listview = popup.find('.app-listview').empty();
            renderListViewOptions(listview, context, options);
            listview.listview('refresh');
            positionOptions = popup.data('positionOptions');
            inner = popup.find('.ui-panel-inner').css({ minHeight: '', maxHeight: '', minWidth: '', maxWidth: '' });
            resizePopup();
            popup.popup('reposition', { x: positionOptions.x, y: positionOptions.y, positionTo: 'origin' })
            return;
        }

        if (uiElementIsSpecified) {
            currentPage = uiElement.closest('.ui-page');
            if (currentPage.length && (!currentPage.is('.ui-page-active') && !(isReadingPaneMaster() || isReadingPaneDetail())))
                return;
            summaryDataView = findDataView(uiElement.closest('.app-echo').attr('data-for'));
            if (summaryDataView)
                inputFocus({ field: summaryDataView._dataViewFieldName });
        }

        clearHtmlSelection();
        hideTooltip();
        activeLink();

        if (uiElementIsSpecified) {

            if (options.x == null)
                options.x = Math.ceil(uiElement.offset().left + (options.xOffset ? options.xOffset : uiElement.outerWidth() / 2));
            if (options.y == null)
                if (options.yOffset === 'bottom')
                    options.y = Math.ceil(uiElement.offset().top + (desktop ? uiElement.outerHeight() : uiElement.outerHeight() / 2));
                else if (typeof options.yOffset == 'number')
                    options.y = Math.ceil(uiElement.offset().top + uiElement.outerHeight() * (desktop ? options.y : (1 - options.y)));
        }

        if (typeof options.x == 'number')
            options.x = Math.ceil(options.x);
        if (typeof options.y == 'number')
            options.y = Math.ceil(options.y);


        if (options.title)
            $htmlTag('h1', 'ui-title').appendTo($div('ui-header ui-bar-a').appendTo(popup)).text(options.title);
        inner = $div('ui-panel-inner', 'tabindex="0"').addClass('app-has-scrollbars').appendTo($div('ui-content').appendTo(popup));
        listview = $ul('app-listview').appendTo(inner);

        renderListViewOptions(listview, context, options);

        function getPopupOptions() {
            return safePoint({
                x: options && options.x || (uiElementIsSpecified ? uiElement.offset().left + uiElement.outerWidth() / 2 : 0),
                y: Math.round(options && options.y || (uiElementIsSpecified ? uiElement.offset().top + uiElement.outerHeight(true) * .8 : 0)),
                y2: Math.round(options && options.y2 || (uiElementIsSpecified ? uiElement.offset().top + uiElement.outerHeight(true) * .2 : 0))
            });
        }

        function executeCallback(item, link) {
            var oldScope = touch.contextScope(),
                callback = item.callback;
            if (options.scope)
                touch.contextScope(options.scope);
            if (callback)
                callback(item.context, link);
            touch.contextScope(oldScope);
        }

        function doClose() {
            if (options.autoFocus !== false) {
                focusScrollable();
                if (!isTouchPointer)
                    focusLastInput();
            }
            if (selectedOption)
                executeCallback(selectedOption, selectedLink);
            var closeEvent = $.Event('popupclosed.app', { canceled: !selectedOption });
            selectedOption = null;
            selectedLink = null;
            clearListView(listview);
            destroyListView(listview);
            destroyPopup(popup);
            $document.trigger(closeEvent);
        }

        function resizePopup() {
            var uiElementRect = getBoundingClientRect(uiElement),
                screenHeight = _screen.height,
                toolbarHeight = _screen.toolbarHeight,
                spaceAbove = uiElementRect.top - _screen.top,
                spaceBelow = screenHeight - (uiElementRect.top - _screen.top + uiElementRect.height) - tolerance,
                innerMaxHeight = usePanel ? windowHeight * .6 : Math.max(spaceAbove - toolbarHeight * 2, spaceBelow - toolbarHeight * 2, 50),
                popupHeight = options.arrow ? calcPopupHeight(popup) : popup.outerHeight(true),
                maxHeight = popup.outerHeight() > windowHeight ? innerMaxHeight : Math.max(innerMaxHeight, inner.height());
            if (!usePanel)
                if (options.arrow === false) {
                    if (spaceAbove > spaceBelow && popupHeight > spaceBelow - tolerance) {
                        positionOptions.y = uiElementRect.top - Math.min(popupHeight + tolerance, spaceAbove) - 1;
                        if (positionOptions.y <= _screen.top) {
                            maxHeight = inner.height() - (popupHeight - (uiElementRect.top - positionOptions.y)) - tolerance;
                        }
                    }
                    else
                        maxHeight = spaceBelow - uiElementRect.height;
                    popup.css('minWidth', uiElementRect.width);
                }
                else {
                    if (!desktop && spaceAbove - tolerance < popupHeight)
                        popup.popup('option', 'arrow', preferredArrow);
                    else if (positionOptions.y2 && (spaceAbove > spaceBelow && popupHeight > spaceBelow - tolerance || !desktop && popupHeight < spaceAbove - tolerance)) {
                        positionOptions.y = positionOptions.y2;
                        popup.popup('option', 'arrow', preferredArrow);
                    }
                }
            inner.css({ minHeight: usePanel ? '' : null, maxHeight: usePanel ? Math.min(_screen.height * .5, _screen.height - 156) : maxHeight });
        }

        listview.listview().on('vclick', function (event) {
            var target = $(event.target),
                link = target.closest('a'),
                selectedHyperLink;
            if (!target.closest('.ui-disabled').length)
                if (target.is('[data-href]')) {
                    selectedHyperLink = target.attr('data-href');
                    if (selectedHyperLink)
                        openHref(selectedHyperLink);
                    callWithFeedback(link, function () {
                        closePopupWithoutTransition(popup);
                    });
                }
                else if (link.length && !closing && clickable(link)) {
                    closing = true;
                    callWithFeedback(link, function () {
                        selectedOption = link.data('data-context');
                        selectedLink = link;
                        if (selectedOption.keepOpen) {
                            executeCallback(selectedOption, selectedLink);
                            ensureFocusedLink(selectedLink);
                            selectedOption = null;
                            selectedLink = null;
                            closing = false;
                        }
                        else
                            closePopupWithoutTransition(popup);
                    });
                }
            return false;
        });

        isInTransition = true;
        enablePointerEvents(false);

        if (!('arrow' in options) && uiElementIsSpecified)
            options.arrow = options.dropDown ? 't,b,l,r' : preferredArrow;

        closePopups(true);

        popup.popup({
            //animation: isTouchPointer,
            history: !desktop && !(isReadingPaneMaster() || isReadingPaneDetail()),
            arrow: usePanel ? null : options.arrow,
            tolerance: tolerance,
            positionTo: options.arrow === false ? 'absolute' : null,
            transition: popupAnimation(),// isTouchPointer ? popupAnimation() : 'none',
            //positionTo: uiElement,
            afteropen: function (/*event, ui*/) {
                popupIsOpened(popup);
                if (options.afteropen)
                    options.afteropen(popup);
                scrollTopItemIntoView(inner);
                inner.trigger('focus');
                isInTransition = false;
                enablePointerEvents(true);
                if (usePanel) {
                    popup.css({ transform: 'translate3d(0,100%,0)' });
                    setTimeout(function () {
                        popup.css({ transition: 'transform 150ms ease-out' });
                        setTimeout(function () {
                            popup.one('endtransition', function () {
                                popup.css('transition', '');
                            }).css('transform', '');
                        });
                    });
                }
            },
            afterclose: function () {
                hideTooltip();
                isInTransition = false;
                if (uiElement && (!(uiElement.data('data-context') || {}).row || uiElement.is('.app-calendar-selected')))
                    uiElement.removeClass('app-selected');
                if (options.afterclose)
                    options.afterclose(popup, selectedOption);

                if (popup.data('touchPopup')._currentTransition === 'none')
                    doClose();
                else
                    setTimeout(doClose, 100);
            },
            beforeposition: function () {
                if (scrollbarInfo.width && inner[0].scrollHeight > inner.height()) {
                    inner.css({ width: '', 'overflow-y': '' }).parent().width('');
                    var w = listview.width();
                    inner.css({ 'overflow-y': 'scroll' }).css({ width: w + scrollbarInfo.width }).parent().css({ 'width': w, 'overflow': 'hidden' });
                    //inner.css({ width: w + scrollbarInfo.width }).parent().css({ width: w, overflow: 'hidden' });
                }
            }
        });

        registerPanelScroller(popup);

        if (!context.length) {
            popup.find('.ui-content').hide();
            popup.find('.ui-header').css({ 'border-bottom-width': 0, 'margin-bottom': '.25em' });
        }

        positionOptions = usePanel ? { x: _screen.left, y: _screen.top + _screen.height - 1 } : (options.arrow === false ? { x: options.x, y: options.y } : getPopupOptions(true));

        if (uiElementIsSpecified) {
            if (!anchorIsPromo && options.highlightAnchor !== false && !uiElement.is('.app-calendar-selected'))
                uiElement.addClass('app-selected');
            resizePopup();
        }

        configurePopupListview(popup);

        var visibleItem = listview.find('li[data-visible="true"]');
        if (visibleItem.length && (inner.offset().top + inner.outerHeight() < visibleItem.offset().top + visibleItem.outerHeight()))
            inner.scrollTop(visibleItem.offset().top - inner.offset().top - (inner.outerHeight() - visibleItem.outerHeight()) / 2);

        if (anchorIsPromo)
            touch.promo().show();

        if (usePanel)
            popup.addClass('app-popup-panel');

        popup.data('position-options', positionOptions).popup('open', positionOptions);
        if (!isTouchPointer)
            $('.ui-popup-screen').css('top', usePanel || appStudio() ? 0 : (touch._toolbar.height() + 1) + _screen.top);
    }

    function showMoreButtonsInForm(uiElement) {
        var context = [],
            isReadingPane = isReadingPaneDetail();
        $(uiElement).closest('.app-bar-buttons').find('.ui-btn:not(.app-btn-more)').filter(function () { return !fnVisible.call(this) }).each(function () {
            var btn = $(this),
                btnText = btn.html().match(/^(.+?)(<|$)/),
                icon = btn.find('i').data('icon');
            context.push({
                text: btnText[1], icon: icon, callback: function () {
                    btn.trigger('vclick');
                }
            });
        });
        if (context.length) {
            if (reverseFormButtons(touch.dataView()))
                context = context.reverse();
            if (isReadingPane)
                context.push({}, { text: labelMore, icon: 'material-icon-more-horiz', callback: touch.showContextMenu });
            showListPopup({ anchor: uiElement, items: context, x: uiElement.offset().left + 12, y: uiElement.offset().top + (uiElement.outerHeight() / 4 * 3), tolerance: 0 });
        }
        else if (isReadingPane)
            touch.showContextMenu();
    }

    function filterDataViewByFieldValue(context) {
        var dataView = findDataView(context.id),
            field = dataView.findField(context.field),
            op = context.op;
        dataView.removeFromFilter(field);
        if (op != '$clear') {
            if (op.startsWith('$'))
                op += '$';
            dataView._filter.push(context.field + ':' + op + (op.match(/\$(true|false)/) ? '' : dataView.convertFieldValueToString(field, context.value)));
        }
        applyDataFilter(dataView);
    }

    function focusDataViewField(elem) {
        elem = elem.closest('.app-echo');
        if (elem.length)
            inputFocus({ fieldName: findDataView(elem.attr('data-for'))._dataViewFieldName, container: findScrollable(elem) });
    }

    function isPopupActive() {
        var popupContainer = $('.ui-popup-container');
        return isInTransition || popupContainer.length && !popupContainer.is('.ui-popup-hidden');
    }

    function handleFieldContextMenu(dataView, e) {
        if (isPopupActive())
            return false;

        var eventTarget = $(e.target),
            target = eventTarget.closest('.app-field'),
            link,
            field, fieldName, fieldValue, text,
            originalField, copyTest, viewItemText = resourcesMobile.LookupViewAction,
            filterDefList,
            currentFilter,
            items = [],
            allowQBE, allowSorting,
            popupOptions = { x: lastTouchX(), y: lastTouchY() };

        function createItem(op, text) {
            var newFilter = field.Name + ':' + op;
            if (op.match(/^\$(in|notin)$/))
                fieldValue = fieldValue.split(/,\s*/g).join('$or$');
            if (op.startsWith('$'))
                newFilter += '$';
            newFilter += dataView.convertFieldValueToString(field, fieldValue);
            if (currentFilter !== newFilter)
                items.push({ text: _app.filterDef(filterDefList, op).Text + (text ? ' ' + text : ''), context: { id: dataView._id, field: fieldName, op: op, value: fieldValue }, callback: filterDataViewByFieldValue });
        }

        function changeSortOrder(sortOrder) {
            var oldContext = touch.contextScope();
            touch.contextScope(dataView);
            sortExpression(dataView, fieldName, sortExpression(dataView, fieldName) == sortOrder ? false : sortOrder);
            updateSortExpressionIfChanged();
            touch.contextScope(oldContext);
        }

        function selectAndCall(callback) {
            var echo = findEcho(link),
                dataContext = link.data('data-context');
            if (dataContext) {
                dataViewUILinks(dataView).removeClass('app-selected');
                if (echo.length) {
                    clearSelectionInEcho(echo);
                }
                link.addClass('app-selected');
                checkIfMultiSelect(dataView, link);
                dataView.extension().tap(dataContext, 'none');
                if (echo.length)
                    echoRereshToolbarWithDelay(dataView, echo);
                else
                    dataViewEchoChanged(dataView);
                callback();
                //showRowContext(link, popupOptions);
            }
        }

        function displayRowContext(target) {
            touch.invokeInTargetPage(function () {
                selectAndCall(function () {
                    showRowContext(link, popupOptions);
                });
            });
        }

        if (!target.length)
            eventTarget.find('.app-field').each(function () {
                var fieldElem = $(this),
                    rect = getBoundingClientRect(fieldElem);
                if (rect.left <= _lastTouch.x && _lastTouch.x <= rect.right && (fieldElem.is('[data-item]') || rect.top - 8 <= _lastTouch.y && _lastTouch.y <= rect.bottom + 8)) {
                    target = fieldElem;
                    return false;
                }
            });

        if (target.length) {
            link = target.closest('.ui-btn').removeClass('ui-btn-active');

            var dataContext = link.data('data-context'),
                row = dataContext && dataContext.row;
            if (!row || dataView.rowIsTemplate(row)) {
                e.preventDefault();
                return;
            }

            //focusDataViewField(link);

            fieldName = target.attr('class').match(/app\-field\-(\w+)/);
            if (fieldName)
                fieldName = fieldName[1];
            if (fieldName) {
                e.preventDefault();
                field = dataView.findField(fieldName);

                allowQBE = field.AllowQBE;
                allowSorting = field.AllowSorting;
                originalField = dataView.findFieldUnderAlias(field.Name);

                if (!originalField.ItemsDataController) {
                    copyTest = new RegExp('\\b' + fieldName + '\\s*=\\s*\\w+');
                    $(dataView._fields).each(function () {
                        var f = this;
                        if (f.Copy && copyTest.exec(f.Copy)) {
                            originalField = f;
                            viewItemText = String.format(resourcesLookup.DetailsToolTip, dataView._allFields[f.AliasIndex].HeaderText);
                            return false;
                        }
                    });
                }

                if (originalField.ItemsDataController && !originalField.ItemsTargetController && !originalField.is('lookup-details-hidden')) {
                    items.push({
                        text: viewItemText, icon: 'material-icon-arrow-forward', callback: function () {
                            selectAndCall(function () {
                                touch.details({ field: originalField });
                            });
                        }
                    });
                }
                if (allowSorting) {
                    if (items.length)
                        items.push({});
                    items.push(
                        { text: fieldSortOrderText(field, 'asc'), icon: sortExpression(dataView, fieldName) === 'asc' ? 'check' : false, context: 'asc', callback: changeSortOrder },
                        { text: fieldSortOrderText(field, 'desc'), icon: sortExpression(dataView, fieldName) === 'desc' ? 'check' : false, context: 'desc', callback: changeSortOrder });
                }
                if (allowQBE) {
                    if (items.length)
                        items.push({});
                    filterDefList = resourcesData.Filters[field.FilterType].List;
                    fieldValue = row[field.Index];

                    $(dataView._filter).each(function () {
                        var f = this;
                        if (f.startsWith(fieldName + ':')) {
                            currentFilter = f;
                            items.push(
                                { text: String.format(resourcesHeaderFilter.ClearFilter, field.HeaderText), icon: 'material-icon-clear', context: { id: dataView._id, field: fieldName, op: '$clear' }, callback: filterDataViewByFieldValue },
                                {});
                            return true;
                        }
                    });
                    if (fieldValue == null) {
                        createItem('$isempty');
                        createItem('$isnotempty');
                    }
                    else if (field.ItemsTargetController) {
                        fieldValue = text = field.text(fieldValue);
                        text = '"' + text + '"';
                        createItem('$in', text);
                        createItem('$notin', text);
                    }
                    else {
                        text = field.text(fieldValue);
                        if (field.FilterType === 'Text')
                            text = '"' + text + '"';
                        if (field.FilterType === 'Text') {
                            createItem('=', text);
                            createItem('<>', text);
                            createItem('$contains', text);
                            createItem('$doesnotcontain', text);
                        }
                        else if (field.FilterType === 'Boolean') {
                            createItem('$true');
                            createItem('$false');
                        }
                        else {
                            // Number and Date
                            createItem('=', text);
                            createItem('<>', text);
                            createItem('<=', text);
                            createItem('>=', text);
                            createItem('<', text);
                            createItem('>', text);
                        }
                    }
                }
                if (items.length) {
                    items.push({}, {
                        text: labelMore, icon: 'material-icon-more-horiz', callback: function () {
                            displayRowContext(target);
                        }
                    });
                    touch.invokeInTargetPage(function () {
                        showListPopup({ anchor: target, title: field.HeaderText, items: items, x: lastTouchX(e.pageX), iconPos: 'left' });
                    });
                }
                else
                    touch.invokeInTargetPage(function () {
                        displayRowContext(target);
                    });
            }
        }
        else if (eventTarget.closest('.app-grid-header').length)
            return;
        else if (eventTarget.closest('.app-presenter').length)
            return;
        else {
            link = eventTarget.closest('.ui-btn');
            if (link.length && !isTouchPointer)
                touch.invokeInTargetPage(function () {
                    displayRowContext(link);
                });
            else if (!isTouchPointer && eventTarget.closest('[data-layout="form"]').length)
                return;
        }
        return false;
    }

    function handleAppButtonClick(event) {
        var link = $(event.target).closest('.ui-btn'),
            icon = link.data('icon'),
            iconList,
            lastOption;
        if (link.is('.app-btn-promo')) {
            iconList = link.data('icon-list');
            if (iconList) {
                callWithFeedback(link, function () {
                    var options = [],
                        promoIcon = link.attr('data-icon'),//'ui-icon-' + link.data('icon'),
                        icon, text, desc;
                    if (link.is('.app-btn-promo-cancel')) {
                        $('.ui-popup-screen.in').trigger('vclick');
                        return false;
                    }

                    iconList.icons.forEach(function (icon) {
                        //icon = this.toString();
                        if (!icon.match(noPromoRegex)) {
                            text = iconList.labels[icon].split(/\n/);
                            options.push({
                                text: text[0], desc: text[1], icon: icon, context: icon, callback: function (contextIcon) {
                                    touch.executeInContext(contextIcon);
                                }
                            });
                        }
                    });
                    lastOption = options[options.length - 1];
                    //if (options.length == 1 && options[0].callback)
                    //options[options.length].callback(options[0].context);
                    if (lastOption && lastOption.callback)
                        lastOption.callback(lastOption.context);
                    else {
                        // TODO: refactor this code to read "Promo" context for actions
                        link.addClass('ui-icon-delete app-btn-promo-cancel').removeClass(promoIcon);
                        showListPopup({
                            anchor: touch.promo(), items: options, iconPos: 'left', y: link.offset().top - 1, //arrow: 'b',
                            afterclose: function () {
                                link.removeClass('ui-icon-delete app-btn-promo-cancel').addClass(promoIcon);
                            }
                        });
                    }
                });
                return false;
            }
        }
        var callback = nop;
        if (icon === 'search')
            //var pageInfo = getPageInfo(),
            //    dataView = pageInfo && pageInfo.dataView;
            //if (dataView) {
            //    if (dataView.extension().useAdvancedSearch() && !_pendingQueryText)
            //        callWithFeedback(link, function () {
            //            startSearch(dataView, _pendingQueryText);
            //        });
            //    else
            //        startSearch(dataView);
            //}
            callback = _app.search;
        else if (icon === 'user')
            callback = function () {
                showUserContext(link);
            };
        else if (icon === 'phone' && android)
            touch.executeInContext(icon);
        else if (icon === 'apps')
            callback = function () {
                showApps(isReadingPaneMaster() || isReadingPaneDetail() ? 'left' : 'right');
            };
        else
            callback = function () {
                touch.executeInContext(icon === 'check' ? 'ok' : icon);
            };
        callWithFeedback(link, callback);

        return false;
    }

    function toAbsolutePath(href) {
        var link = document.createElement("a");
        link.href = href;
        return link.href;
    }

    function loadInternalPage(href, pageTransition, isExternal) {
        //if (busyIndicator()) return;
        href = $touch.path.convertUrlToDataUrl(toAbsolutePath(href));
        var targetPage = $body.find('> div[data-url]')
            .filter(function () {
                return $(this).attr('data-url') === href;
            });
        if (isExternal) {
            //busyBeforeUnload();
            location.href = href;
        }
        else if (targetPage.length) {
            //$mobile.navigate(href, { transition: pageTransition });
            targetPage.appendTo($body);
            var p = getPageInfo(targetPage.attr('id'));
            if (p) {
                touch.makeModal(p);
                p.navigateInfo = { href: href, transition: pageTransition };
                touch.changePage(p.id);
            }
            else
                $touch.navigate(href, { transition: pageTransition });
        }
        else {
            isBusy({ progress: true });
            //busyIndicator(true);
            $.ajax({
                url: href,
                dataType: "html"
            }).done(function (result) {
                //busyIndicator(false);
                isBusy({ progress: false });
                var pageContent = result.match(/<td\s+id\s*=\s*"PageContent"\s*>([\s\S]+)?<\/td>\s*<td\s+id\s*="PageContent.+"\s*>/i);
                if (!pageContent)
                    pageContent = result.match(/<div\s+id\s*=\s*"PageContent".+?>([\s\S]+)?<\/div>\s*<footer /i);
                if (pageContent && !result.match(/\$create\(Web.DataView|\s+data-controller\s*=\s*"/)) {
                    var template = pageContent[1],
                        pageTemplate,
                        scripts = new _msSys.StringBuilder(),
                        scriptIterator = /<script.+?>([\s\S]+?)<\/script>/ig,
                        scriptFragment,
                        options,
                        pageId, pageCount = 1;
                    // convert template to a page
                    while (scriptFragment = scriptIterator.exec(template))
                        scripts.append(scriptFragment[1]);
                    template = template.replace(scriptIterator, '');
                    if (template.match(/data-content-framework="bootstrap"/) && !$('[data-content-framework="bootstrap"]').length) {
                        var themeLink = $('link.app-theme'),
                            themeHref = themeLink.attr('href');
                        if (themeHref)
                            if (themeHref.match(/\&_cf=$/))
                                themeLink.attr('href', themeHref + 'bootstrap');
                            else // Bootstrap is not "styled" in debug mode in IE11
                                $('<link href="' + appBaseUrl + 'css/sys/bootstrap.css" rel="stylesheet" type="text/css"/>').insertBefore(themeLink);
                    }
                    pageTemplate = $('<div></div>').appendTo($body).hide().attr('data-href', href);
                    pageTemplate.html(template).data('scripts', scripts.toString());
                    // create a page
                    pageId = pathToId(href);
                    while (touch.pageInfo(pageId))
                        pageId = pathToId(href) + pageCount++;
                    options = { pageId: pageId, selector: pageTemplate, transition: pageTransition, dynamic: true };
                    touch.build(pageTemplate, options);
                    var page = $('#' + options.pageId).attr('data-url', href);
                    touch.pageInfo({ id: options.pageId, text: options.pageId, url: href, root: true, page: page, scrollable: findScrollable(page) });

                    //location.href = href;
                    //$mobile.navigate(href, { transition: pageTransition });

                    // destroy the page template
                    pageTemplate.data('scripts', null).remove();

                    // navigate to the page
                    //mobile.changePage(options.pageId + '1');

                    //setTimeout(function () {
                    //    loadInternalPage(href, pageTransition);
                    //});
                    setTimeout(loadInternalPage, 0, href, pageTransition);
                }
                else {
                    //busyBeforeUnload();
                    location.href = href;
                }
            }).fail(function () {
                //busyIndicator(false);
                isBusy({ progress: false });
            });
        }

    }

    function handleToggleClick(e) {
        var target = $(e.target);
        if (target.is('.app-btn-toggle')) {
            target.addClass('ui-btn-active');
            $body.trigger('focus');
            setTimeout(function () {
                target.removeClass('ui-btn-active');
                var collapsibleText = target.prev(),
                    listItem,
                    wrapper;

                function collapse() {
                    collapsibleText.removeClass('app-text-expanded');
                    target.attr('data-title', labelMaximize).toggleClass('ui-icon-carat-u ui-icon-carat-d');
                    stickyHeader();
                }

                if (collapsibleText.is('.app-text-expanded')) {
                    listItem = collapsibleText.closest('.dv-item');
                    if (listItem.length) {
                        wrapper = findScrollable(target);
                        animatedScroll(wrapper, listItem.offset().top - (wrapper.offset().top - wrapper.scrollTop()) - wrapper.height() * .33, collapse);
                    }
                    else
                        collapse();
                }
                else {
                    collapsibleText.addClass('app-text-expanded');
                    target.attr('data-title', labelMinimize).toggleClass('ui-icon-carat-u ui-icon-carat-d');
                }
            }, feedbackDelay);
            return false;
        }
    }

    function toggleSidebarState(mini) {
        var animate = appBars.left.animate !== false;
        if (appBars.left.visible) {
            if (animate)
                focusScrollable();
            if (!arguments.length) {
                mini = !appBars.left.mini;
                toggled = true;
                $settings('ui.sidebar.mini', mini);
                userVariable('minisidebar', mini);
                isBusy(true);
            }
            appBars.left.mini = mini;
            $body.toggleClass('app-has-minisidebar-left', mini);
            //appBars.left.width = appBars.left.inner.outerWidth() - scrollbarInfo.width;
            updateSidebarInner();
            updateMenuStripPosition(true);
            if (notifyBar && notifyBar.is(':visible') && !notifyBar.is('.app-bar-notify-left,.app-bar-notify-center'))
                notifyBar.css('left', appBars.left.width);
            //pageResized(true);
            performWindowResize();
            $document.trigger('sidebarstatechanged.app');
            refreshContext(false, 0, function () {
                if (appBars.left.visible && animate) {
                    var inner = appBars.left.inner;
                    inner.css({ 'transform': 'translate3d(' + (mini ? '100' : '-66') + '%,0,0)' });
                    setTimeout(function () {
                        inner.css({ 'transition': 'transform 96ms ease-in-out' });
                        setTimeout(function () {
                            inner.css('transform', '').one('transitionend', function () {
                                inner.css('transition', '');
                            });
                            isBusy(false);
                        }, 16);
                    }, 16);
                }
            });
        }
    }

    function showAllApps() {
        showApps(null, true);
    }

    function showApps(position, all, ignoreTabBar) {
        var context = [];
        if (all) {
            var oldContext = currentContext,
                context = [
                    {
                        text: resourcesMobile.Back, icon: iconBack, callback: function () {
                            currentContext = oldContext;
                            showContextPanel(context, '#app-panel-apps');
                        }
                    },
                    {}
                ];
        }
        if (showHideTabBar() && !ignoreTabBar)
            enumerateMenuItems(context, true, menuNodes, 1);
        else
            enumerateMenuItems(context, true, all ? menuNodes : null, all ? 1 : 0, !ignoreTabBar);
        showContextPanel(context, '#app-panel-apps' + (all ? '-all' : ''), { position: position || 'left' });
    }

    function handleMenuButtonClick(e) {
        var menuButton = $(e.target);
        if (skipTap) return;
        tappingTimeout();
        activeLink(menuButton, false);
        hideTooltip();
        if (menuButton.attr('data-action') === '#app-back') {
            touch._backText.addClass('ui-btn-active');
            callWithFeedback(menuButton, function () {
                touch._backText.removeClass('ui-btn-active');
                goBack();
            });
        }
        else
            showAppMenu(menuButton);
        return false;
    }

    function showAppMenu(menuButton, force) {
        closePopupsAndPanels(true);
        callWithFeedback(menuButton, function () {
            var isKiosk = kiosk();
            if (appBars.left.visible && !isKiosk && !force) {
                toggleSidebarState();
            }
            else {
                var context = [{ text: appName(), itemClassName: 'app-logo' }],
                    menuPanel = $('#app-panel-menu-scope.ui-panel-open');
                if (menuPanel.length)
                    panelClose(menuPanel);
                else {
                    if (isKiosk || force) {
                        enumerateMenuItems(context, true);
                        context.push({});
                    }
                    else {
                        if (!touch._toolbar.find('.app-icon-avatar').parent().is(':visible'))
                            enumerateUserContext(context, true);
                        if (context.length)
                            context.push({});
                        if ((!menuStripIsVisible() || menu.nodesWithIcons.length && $settingsEnabled('ui.menu.tiles')) || !appBars.left.visible && $settings('ui.menu.location') != 'toolbar') {
                            if (showHideTabBar(touch.pageInfo()))
                                enumerateMenuItems(context, true, menuNodes, 1);
                            else
                                enumerateMenuItems(context, true);
                            context.push({});
                        }
                    }
                    if (settingsButtonIsEnabled/*$settingsEnabled('settings.enabled')*/)
                        context.push({ text: resourcesMobile.Settings, icon: 'material-icon-settings', transition: true, callback: configureSettings });
                    showContextPanel(context, '#app-panel-menu', { position: 'left' });
                }
            }
        });

    }

    function handleLinkClick(e) {
        if (e.isDefaultPrevented())
            return;
        var eventTarget = $(e.target),
            link = eventTarget.is('.ui-btn') ? eventTarget : eventTarget.closest('a,.ui-btn'),
            href = link.attr('href') || (link.attr('data-action-path') ? '#app-action' : ''),
            dataHref = eventTarget.attr('data-href') || link.attr('data-href'),
            contentType = link.attr('data-content-type'),
            target;
        //if (pageEditMode()) {
        //    if (link.attr('data-editable') == 'true')
        //        event.preventDefault();
        //}
        if (!href && dataHref && contentType === 'image')
            href = dataHref;
        if (isInTransition || link.attr('download') || href == '#app-action' && link.parent().closest('.dv-item').length)
            return;
        switch (href) {
            case '#app-menu':
                target = '#app-btn-menu';
                break;
            case '#app-context':
                target = '#app-btn-context';
                break;
            case '#app-back':
                target = goBack;
                break;
            case '#app-details':
                target = function () {
                    var pageInfo = getPageInfo(),
                        extension;
                    if (pageInfo && pageInfo.dataView) {
                        extension = pageInfo.dataView.extension();
                        extension.command(extension.commandRow(), 'Select');
                        _pendingPageText = link.attr('data-field-text');
                        pageInfo.dataView._viewDetails(link.attr('data-field-name'));
                    }
                };
                break;
            case "#app-refresh":
                target = function () {
                    var pageInfo = getPageInfo();
                    if (pageInfo && pageInfo.dataView)
                        pageInfo.dataView.sync();
                };
                break;
            case "#app-clear-filter":
                target = function () {
                    var pageInfo = getPageInfo();
                    if (pageInfo && pageInfo.dataView)
                        clearDataFilter(pageInfo.dataView, false);
                };
                break;
            case "#app-filter":
                target = function () {
                    var pageInfo = getPageInfo();
                    if (pageInfo && pageInfo.dataView)
                        configureFilter({ mode: 'everything' });
                };
                break;
            //case '#app-lookup':
            //    target = function () {
            //        var context = link.data('data-context');
            //        blurFocusedInput();
            //        mobile.showLookup2(context);
            //        context.query = null;
            //        activeLink(link, false);
            //    };
            //    break;
            case '#app-action':
                if (link.is('.app-btn-disabled')) {
                    link.removeClass('ui-btn-active');
                    return false;
                }
                target = function () {
                    var icon = link.attr('class').match(/ui-icon-([\w\-]+)/) || [0, 'carat-r'],
                        path = link.attr('data-action-path');
                    if (path === 'wizard-next')
                        setTimeout(function () {
                            wizard('next', { container: findScrollable() });
                        });
                    else if (path === 'wizard-prev')
                        //setTimeout(function () {
                        //    wizard('prev', { container: findScrollable() });
                        //});
                        setTimeout(wizard, 0, 'prev', { container: findScrollable() });
                    else if (link.is('.app-btn-more'))
                        showMoreButtonsInForm(link);
                    else if (icon) {
                        if (icon[1] === 'carat-r')
                            touch.executeInContext(null, link.text(), path);
                        else
                            touch.executeInContext(icon[1], null, path);
                    }
                };
                break;
            case "#close-popup":
                target = function () {
                    $('.app-popup-image').popup('close');
                };
                e.preventDefault();
                break;
            default:
                if (href) {
                    if (href.match(/^tel/)) {
                        openHref(href);
                        target = nop;
                    }
                    else if (link.attr('target')) {
                        _window.open(href, link.attr('target'));
                        return false;
                    }
                    else
                        if (contentType)
                            target = function () {
                                _app.saveBlob(href);
                            };
                        else if (!link.attr('rel')) {
                            if (link.is('a'))
                                e.stopPropagation();
                            return; // standard hyperlinks will not be handled by the framework
                        }
                        else {
                            target = touch.openExternalUrl(href, link.is('[rel="external"]'));
                            if (!target && !link.closest('.ui-panel-inner').length) {
                                var loc = $touch.path.parseUrl(href),
                                    locationHash = loc.hash;
                                if (locationHash) {
                                    if (link.closest('.app-content-framework').length) {
                                        // hash link
                                        if (eventTarget.data('app-click-test'))
                                            return;
                                        else {
                                            eventTarget.data('app-click-test', true);
                                            $touch.linkBindingEnabled = false;
                                            e.type = 'click';
                                            $document.trigger(e);
                                            eventTarget.data('app-click-test', null);
                                            $touch.linkBindingEnabled = true;
                                            if (!e.isDefaultPrevented()) {
                                                if (locationHash === '#')
                                                    target = function () {
                                                        animatedScroll(findScrollable(), 0);
                                                    };
                                                else {
                                                    var section = locationHash && locationHash.length > 1 && findActivePage(locationHash + ',a[name="' + locationHash.substring(1) + '"]'),
                                                        wrapper = findScrollable(),
                                                        top;
                                                    if (section && section.length)
                                                        target = function () {
                                                            top = section.offset().top - (wrapper.offset().top - wrapper.scrollTop());
                                                            callWithFeedback(link, function () {
                                                                animatedScroll(wrapper, top);
                                                            });
                                                        };
                                                    else
                                                        target = function () {
                                                            if ($(locationHash).is('.ui-page'))
                                                                touch.changePage(locationHash.substring(1));
                                                        };
                                                }
                                            }
                                        }
                                        if (target)
                                            e.preventDefault();
                                    }
                                    else if (locationHash !== '#')
                                        target = function () {
                                            $touch.navigate(locationHash);
                                        };
                                }
                                else
                                    // internal link
                                    target = function () {
                                        loadInternalPage(href, link.attr('data-transition'), link.attr('rel') == 'external');
                                    };
                            }
                        }
                }
        }
        if (target && !isBusy()) {
            closePopupsAndPanels(true);
            if (link.attr('download')) {
                link.trigger('click');
                return;
            }
            callWithFeedback(link, function () {
                isBusy(false);
                if (typeof target == 'string') {
                    var selector = target;
                    target = function () {
                        $(selector).trigger('vclick');
                    };
                }
                target();
            });
            return false;
        }
    }

    if (typeof Web == 'undefined') Web = { DataView: {} };

    mobileBase = WebDataView.MobileBase = function () {
        mobileBase.initializeBase(this);
    };

    mobileBase.prototype = {
        initialize: function () {
        },
        show: function () {

        },
        hide: function () {

        },
        systemFilter: function () {
            return null;
        },
        reset: function (full) {

        },
        notify: function (sender) {
            //var that = this,
            //    dataView = that.dataView(),
            //    pageInfo = mobile.pageInfo(dataView);
            //$(mobile._pages).each(function () {
            //    var dv = this.dataView;
            //    if (dv && dv != dataView && dv.get_parentDataView() == dataView && dv.get_isForm())
            //        dv._calcNotify = sender; // mark the form view to recalculate "controller:..." field values from the server
            //});

            //pageInfo.initCallback = function () {
            //    dataView.sync();
            //}
        },
        wait: function () {

        },
        dataView: function (owner) {
            if (owner == null)
                return this._dataView;
            else
                this._dataView = owner;
        },
        inserting: function () {
            return this.dataView().inserting();
        },
        editing: function () {
            return this.dataView().editing();
        },
        content: function () {
            var dataView = this._dataView;
            return touch.content(dataView._id);
        },
        commandRow: function (value) {
            var that = this;
            if (!arguments.length)
                return that._commandRow;
            else {
                if (value) {
                    var row = that._commandRow = value.slice(0),
                        dataView = that.dataView();
                    dataView._rows = [row.slice(0)];
                    if (!dataView.get_isForm()) {
                        dataView._editRow = null;
                        dataView._originalRow = null;
                    }
                    return row;
                }
                else
                    return value;
            }
        },
        command: function (row, commandName, argument, causesValidation, path) {
            var that = this,
                dataView = that.dataView(),
                rowIndex = 0,
                keyFields = dataView._keyFields,
                obj;
            if (row && !row.length)
                if (keyFields.length && keyFields[0].Name in row) {
                    obj = row;
                    row = [];
                    $(dataView._allFields).each(function () {
                        row.push(obj[this.Name]);
                    });
                }
                else {
                    row = null;
                    rowIndex = null;
                }
            that.commandRow(row);
            dataView.executeRowCommand(row ? rowIndex : null, commandName, argument, causesValidation, path);
        },
        action: function (row, scope, actionIndex, rowIndex, groupIndex, confirmed) {
            this.commandRow(row);
            var dataView = this.dataView().
                a;
            if (arguments.length === 1) {
                a = arguments[0];
                this.executeRowCommand(0, a.CommandName, a.CommandArgument, a.CausesValidation, a.Path)
            }
            else
                dataView.executeAction(0, scope, actionIndex, rowIndex, groupIndex, confirmed);
        },
        itemMap: function (listMode) {
            return createItemMap(this.dataView(), listMode);
        },
        stateChanged: function () {
            refreshContext();
        },
        lookupInfo: function (value) {
            var dataView = this.dataView();
            if (arguments.length) {
                dataView._lookupInfo = value;
            }
            else
                return dataView._lookupInfo;
        },
        viewDescription: function () {
            var dataView = this.dataView(),
                showDescription = dataView._showDescription !== false,
                viewDescription = showDescription && dataView.get_view().HeaderText;
            viewDescription = showDescription ? dataView._formatViewText(resourcesViews.DefaultDescriptions[viewDescription], true, viewDescription) : '';
            return viewDescription ? viewDescription.replace(/\n/g, htmlTag('p')) : null;
        },
        executeInContext: function (command, argument, ignoreLookup, testOnly) {
            var oldLookupInfo = this.lookupInfo(),
                context = [],
                result;
            if (ignoreLookup)
                this.lookupInfo(null);
            this.context(context);
            if (ignoreLookup)
                this.lookupInfo(oldLookupInfo);
            $(context).each(function () {
                var item = this,
                    itemCommand = item.command;
                if (itemCommand && itemCommand === command && (argument == null || item.argument === argument)) {
                    result = item;
                    if (!testOnly)
                        executeContextAction(item);
                    return false;
                }
            });
            return result;
        },
        tagged: function (tag) {
            return this.dataView().get_isTagged(tag);
        },
        filterStatus: function (brief, ignoreAdvancedSearch) {
            var that = this,
                dataView = that.dataView(),
                result,
                sb,
                searchParamFilterStatus = dataView._searchParamFilterStatus,
                searchFilter = advancedSearchFilter(dataView),
                filter = dataView ? dataView.get_filter() : null,
                isSearched = searchFilter.length > 0,
                isFiltered = dataView && filter.length > 0 && !dataView.filterIsExternal();
            if ((isFiltered || isSearched) && that.options().filterDetails) {
                sb = new _msSys.StringBuilder();
                if (isSearched && !ignoreAdvancedSearch)
                    dataView._renderFilterDetails(sb, searchFilter, false);
                if (isFiltered)
                    dataView._renderFilterDetails(sb, filter, !brief);
                result = sb.toString().replace(filterDetailsRegex, '').replace(filterDetailsRegex2, '\"').replace(filterDetailsRegex3, '\"$1');
            }
            if (searchParamFilterStatus)
                result = resourcesMobile.Matched + ': ' + searchParamFilterStatus + (result ? ' ' + result : '')
            return result;
        },
        aggregates: function () {
            var aggregates = this._dataView._aggregates;
            return aggregates && aggregates.length ? aggregates : null;
        },
        aggregateLabels: function () {
            var labels = [];
            $(this._dataView._fields).each(function () {
                var f = this;
                labels.push(f.Aggregate == 0 ? null : String.format(resourcesGrid.Aggregates[_web.DataViewAggregates[f.Aggregate]].FmtStr, '').trim());
            });
            return labels;
        },
        //calculate: function (causedBy) {
        //},
        //afterCalculate: function (values) {
        //},
        _disposeSession: function () {
            var dataView = this.dataView(),
                pageSession = dataView._pageSession,
                value, key;
            if (pageSession) {
                for (key in pageSession) {
                    value = pageSession[key];
                    if (value && typeof value == 'object') {
                        if (value.length === 1 && value[0] && value[0].tagName === 'STYLE' && !value.attr('id'))
                            if (touch.elementsToDelete)
                                touch.elementsToDelete.push(value);
                            else
                                value.remove();
                        delete pageSession[key];
                    }
                }
                delete dataView._pageSession;
            }
        },
        focus: function (fieldName, message) {
            var that = this,
                dataView = that._dataView,
                container = findActivePage('[data-input-container="' + dataView._id + '"]');
            if (container.length) {
                if (dataView._inlineEditor)
                    _edit.showField(dataView, fieldName, container);
                inputFocus({ container: container, fieldName: fieldName, message: message });
            }
        }
    };

    /* implementation of extensions */

    mobileExtensions = WebDataView.Extensions = {};

    /* dataview */

    WebDataView.prototype.asearch = function () {
        var that = this,
            method = arguments[0],
            mode, filter;
        if (arguments.length === 2) {
            if (method === 'active') {
                mode = that._useAdvancedSearch = arguments[1] === true;
                that.viewProp('useAdvancedSearch', mode);
            }
            else if (method === 'mode') {
                mode = that._searchMode = arguments[1];
                that.viewProp('searchMode', mode);
            }
            else if (method === 'filter') {
                filter = arguments[1];
                if (filter === true)
                    that._advancedFilter = null;
                else if (filter === false)
                    that._advancedFilter = '';
                else {
                    that._advancedFilter = filter == null ? '' : filter;
                    that.viewProp('advancedSearchFilter', filter);
                }
            }
        }
        else {
            if (method === 'active') {
                mode = that._useAdvancedSearch;
                if (mode == null)
                    mode = that._useAdvancedSearch = that.viewProp('useAdvancedSearch') || false;
                return mode;
            }
            if (method === 'mode') {
                mode = that._searchMode;
                if (!mode)
                    mode = that._searchMode = that.viewProp('searchMode') || 'quickfind';
                return mode;
            }
            if (method === 'filter') {
                filter = that._advancedFilter;
                if (filter == null)
                    filter = that._advancedFilter = that.viewProp('advancedSearchFilter') || [];
                return filter;
            }
        }

    };

    WebDataView.prototype.pageProp = function (name, value) {
        var that = this;
        name = that._id + '_' + name;
        //var useSession = $settings('ui.history.dataView') !== true && false;
        if (arguments.length === 1)
            return /*useSession ? that.sessionShared(name) : */pageVariable(name);
        else
            /*if (useSession)
                that.sessionShared(name, value);
            else*/
            pageVariable(name, value);
    };

    WebDataView.prototype.viewProp = function (name, value) {
        var that = this,
            propertiesWithConditionalHistory =
            {
                sortExpression: 'sort',
                groupExpression: 'group',
                filter: 'filter',
                advancedSearchFilter: 'search'
            },
            getter = arguments.length === 1,
            conditionalProperty = propertiesWithConditionalHistory[name];
        name = (that._viewId || 'grid1') + '_' + name;
        if (conditionalProperty && dataViewHistory.indexOf(conditionalProperty) === -1)
            if (getter)
                return that.session(name);
            else
                that.session(name, value);
        else
            if (getter)
                return that.pageProp(name);
            else
                that.pageProp(name, value);
    };

    WebDataView.prototype.sessionShared = function (name, value) {
        var that = this,
            saveViewId = that._viewId,
            result;
        that._viewId = '__shared';
        if (arguments.length === 1)
            result = that.session(name);
        else
            that.session(name, value);
        that._viewId = saveViewId;
        return result;
    };

    WebDataView.prototype.mobileUpdated = function () {
        var that = this,
            userViewId,
            userSortExpression,
            userGroupExpression,
            filter;
        if (that.tagged('history-search-none'))
            pageVariable(that._id + '_*', { viewTabs: null, viewId: null, filter: null, advancedSearchFilter: null, quickFind: null });

        if (!that._startPage && !that.get_useCase() && !that.get_lastCommandName()) {
            if (!that.tagged('view-selector-remember-none'))
                userViewId = that.pageProp('viewId');
            if (userViewId)
                that._viewId = userViewId;
            userSortExpression = that.viewProp('sortExpression');
            userGroupExpression = that.viewProp('groupExpression');
            filter = that.viewProp('filter');
            var master = that.get_master();
            if (master && master.inserting()) {
                filter = null;
                if (advancedSearchFilter(that).length)
                    that._useAdvancedSearch = false;
            }
            if (userSortExpression)
                that._sortExpression = userSortExpression;
            if (userGroupExpression)
                that._groupExpression = userGroupExpression;
            if (filter && filter.length)
                that._filter = (that._filter || []).concat(filter);
        }


        var elem = $(that._element),
            activator = parseActivator(elem, document.title),
            pageHeader = _app.eval(elem.attr('data-page-header')),
            //dataText = that._dataText,
            info = getPageInfo(that._id);
        if (!info) {
            info = { id: that._id, text: pageHeader || activator.text, headerText: /*dataText || */pageHeader || activator.text, dataView: that, activator: activator };
            getPageInfo(info);
        }
        //if (dataText)
        //    info.headerTextLocked = true;
        //mobile._dataText = null;
        that._pageSize = userAgent.match(/iPad;.*CPU.*OS \d_\d/i) || !isTouchPointer ? 30 : 30 // 6 -debug; 24 - production; // possible page size that works for 1, 2, and 3 columns must divide by 2 and 3
        if (!touch._appLoaded && !that._hidden && !that._filterSource)
            $a('app-action-navigate')
                .attr('href', '#' + info.id)
                .appendTo($li().appendTo(touch.pageMenu())).text(activator.text);
        $(that._element).remove();
        that._element = null;
    };

    WebDataView.prototype.gridSettings = function (settings) {
        var that = this,
            hasWidth, hasHidden;
        if (!arguments.length) {
            settings = that.viewProp('gridSettings');
            if (!settings) {
                settings = { sequence: [], width: {}, hidden: {} };
                //dataView.viewProp('gridSettings', settings);
            }
            return settings;
        }
        else {
            //if (settings)
            //    if (!settings.sequence.length && !settings.width.length && !settings.hidden.length)
            //        settings = null;
            if (settings) {
                for (hasWidth in settings.width);
                for (hasHidden in settings.hidden);
                if (!settings.sequence.length && !hasWidth && !hasHidden)
                    settings = null;
            }
            that.viewProp('gridSettings', settings);
        }
    };

    WebDataView.prototype.gridChanged = function () {
        var that = this;
        gridStyleChanged(that);
        resetGridHeaderStyle(that);
        yardstick();
        setupGridHeaderStyle();
        updateHScrollbarOfGrid(that);
        syncEmbeddedViews();
        fetchOnDemand();
        _edit.sync();
    };


    /* grid view */

    mobileExtensions.Grid = function (dataView) {
        return new mobileGrid(dataView);
    };

    mobileExtensions.DataSheet = function (dataView) {
        return new mobileGrid(dataView);
    };

    mobileGrid = WebDataView.MobileGrid = function (dataView) {
        mobileGrid.initializeBase(this);
        this.dataView(dataView);
    };

    mobileGrid.prototype = {
        initialize: function () {
            var that = this,
                style = that.tagged('view-style-remember-none') ? null : that.dataView().pageProp('viewStyle');
            if (!style)
                if (that.tagged('view-style-map') && !that.tagged('view-style-map-disabled') && !appIsOffline())
                    style = 'Map';
                else if (that.tagged('view-style-cards') && !that.tagged('view-style-cards-disabled'))
                    style = 'Cards';
                else if (that.tagged('view-style-list') && !that.tagged('view-style-list-disabled'))
                    style = 'List';
                else if (that.tagged('view-style-grid') && !that.tagged('view-style-grid-disabled'))
                    style = 'Grid';
                else if (that.tagged('view-style-charts') && !that.tagged('view-style-charts-disabled') && !appIsOffline())
                    style = 'Charts';
                else if (that.tagged('view-style-calendar') && !that.tagged('view-style-calendar-disabled') && !appIsOffline())
                    style = 'calendar';
                else {
                    style = 'Grid';///*isDesktop()*/_screen.width > 480 ? 'Grid' : 'List';
                    $(that._dataView._fields).each(function () {
                        if (this.OnDemand && this.OnDemandStyle !== 1) {
                            style = 'Cards'; // thumbnails are detected
                            return false;
                        }
                    }).each(function () {
                        if (this.Rows > 1) {
                            style = 'List'; // Notes or Rich Text is detected
                            return false;
                        }
                    });
                }
            that._viewStyle = style;
        },
        options: function () {
            var dataView = this.dataView();
            return { quickFind: dataView.get_isGrid() && dataView.get_showQuickFind(), filterDetails: true };
        },
        viewStyle: function (value, keyValue) {
            var that = this,
                dataView = that.dataView(),
                viewStyle = that._viewStyle;
            if (!arguments.length)
                return viewStyle;
            var activePage = findActivePage(),
                originalViewStyle = viewStyle/*,
                isCustomViewStyle = mobile.presenter('supports', originalViewStyle)*/;
            that._viewStyle = value;
            //if (value == 'Grid')
            //    dataView._pageSize = 30;
            //else
            //    dataView._pageSize = 18;
            if (activePage) {
                if (!dataView.tagged('view-style-remember-none'))
                    dataView.pageProp('viewStyle', value);
                that._instructed = false;
                if (touch.presenter('supports', value)) {
                    // //that._reset = true;
                    //that._instructed = false;

                    // IMPORTANT: do not call show here - callback from sync/refresh will do that
                    //mobile.presenter('show', { name: value, id: dataView._id, container: activePage.find('.app-wrapper') });
                }
                else /*if (originalViewStyle == 'Grid' || value == 'Grid' || originalViewStyle == 'Map' || value == 'Map' || isCustomViewStyle)*/ {
                    that._reset = true;
                    //that._instructed = false;
                    //if (keyValue)
                    //    dataView.sync(keyValue);
                    //else
                    //    dataView.sync();
                }
                if (value === 'Grid')
                    resetGridScrolling(dataView);
                dataView.sync();
            }
            refreshContext();
        },
        notifyChildren: function (immediately, commandName) {
            var dataView = this.dataView(),
                masterDataView,
                masterDataViewField,
                detailDataViews;
            masterDataViewField = dataViewToField(dataView);
            if (masterDataViewField) {
                detailDataViews = masterDataViewField._detailDataViews;
                if (detailDataViews) {
                    masterDataView = masterDataViewField._dataView;
                    _input.evaluate({ dataView: masterDataView, container: findScrollable(), row: masterDataView.editRow() });
                    detailDataViews.forEach(function (dataViewId) {
                        var pageInfo = touch.pageInfo(dataViewId),
                            childDataView = pageInfo.dataView;
                        if (immediately) {
                            if (childDataView.canSync() && pageInfo.echoInitialized != null) {
                                if (dataView._id !== _edit._dataViewId && dataView.inlineEditing())
                                    _edit.detach();
                                childDataView.sync();
                            }
                        }
                        else if (commandName === 'New')
                            echoNotifyKeyLost(pageInfo.id);
                    });
                    return true;
                }
            }
        },
        headerText: function (row, assign) {
            var dataView = this._dataView,
                headerField = dataView.headerField(),
                headerFieldValue = row[headerField.Index],
                dataText;
            if (headerFieldValue != null) {
                dataText = headerField.format(headerFieldValue);
                if (headerField.TextMode === 2)
                    dataText = htmlToText(dataView._dataText);
            }
            if (assign !== false)
                dataView._dataText = dataText;
            return dataText;
        },
        tap: function (value, action) {
            if (!value) return;
            var that = this,
                dataView = that.dataView(),
                dataViewFieldName = dataView._dataViewFieldName,
                row = value.row || value, rowChanged = true,
                selectEvent,
                keyIndex = 0, selectedKey;
            if (dataView._busy() || isBusy()) return;
            if (dataView._hasKey()) {
                selectedKey = dataView._selectedKey;
                if (selectedKey.length)
                    if (!that._commandRow)
                        rowChanged = true;
                    else
                        dataView._keyFields.every(function (f) {
                            rowChanged = row[f.Index] !== selectedKey[keyIndex++];
                            return !rowChanged;
                        });
                else
                    rowChanged = true;
                if (rowChanged) {
                    that.command(row, 'Select');
                    that.headerText(row);
                    if (value.pageIndex != null && value.pageIndex !== -1)
                        that.currentPageIndex(value.pageIndex);
                    dataViewUILinks(dataView).each(function () {
                        var link = $(this),
                            dataContext = link.data('data-context');
                        if (dataContext && dataView.rowIsSelected(dataContext.row)) {
                            link.addClass('app-selected');
                            return false;
                        }
                    });
                }
                if (!action)
                    action = 'select';
                selectEvent = $.Event('dataitemselect.dataview.app', { dataView: dataView, action: action });
                $document.trigger(selectEvent);
                if (action === 'select') {
                    if (dataViewFieldName) {
                        if (that.notifyChildren(rowChanged))
                            selectEvent.preventDefault();
                        if (!$('#' + dataView._id + '_ph').is('.app-focus'))
                            inputFocus({ fieldName: dataViewFieldName, container: findScrollable() });
                    }
                    if (!selectEvent.isDefaultPrevented() || dataView.extension()._autoSelect) {
                        var p = !isTouchPointer && touch.lastTouch(),
                            elem = p && elementAt(p).closest('.app-field-type-bool');
                        if (elem && elem.length && touch.touched(elem.find('i')))
                            _edit.toggleBool(elem, dataView);
                        else if (that.lookupInfo())
                            that.executeInContext('Select');
                        else
                            touch.executeInContext();
                    }
                }
                else //if (action == 'highlight')
                    that.notifyChildren(action === 'highlight');
            }
            else
                touch.infoView(dataView, true, row);
            if (!selectEvent || (!selectEvent.isDefaultPrevented() || rowChanged))
                refreshContext();
        },
        clearSelection: function (updateUI, commandName) {
            var that = this,
                dataView = that.dataView(),
                selectedKey = dataView._selectedKey,
                clearEvent;
            that._commandRow = null;
            if (selectedKey && selectedKey.length) {
                if (dataView.multiSelect() && dataView._selectedKeyList.length) {
                    toggleSelectedRows(dataView);
                    dataView.extension().notifyChildren(false, commandName);
                    return;
                }
                clearEvent = $.Event('clear.dataview.app');
                dataView._clearSelectedKey();
                dataView._forgetSelectedRow(true);

                that.currentPageIndex(null);

                clearEvent = $.Event('clear.dataview.app');
                clearEvent.dataView = dataView;
                $document.trigger(clearEvent);

                if (updateUI) {
                    var echo = findEcho(dataView);
                    echo.find('ul[data-role="listview"] .ui-btn.app-selected').removeClass('app-selected');
                    getPageInfo(dataView).page/* $('#' + dataView._id)*/.find('.app-wrapper > ul[data-role="listview"] .app-selected').removeClass('app-selected ui-btn-active');
                    echoRereshToolbarWithDelay(dataView);
                }
                refreshContext();
            }
            that.notifyChildren(false, commandName);
        },
        quickFind: function (value) {
            var dataView = this.dataView();
            if (arguments.length) {
                if (value && $settingsEnabled('search.quickFind.history.enabled')) {
                    var quickFindHistory = dataView.viewProp('quickFindHistory'),
                        maxDepth = $settings('search.quickFind.history.depth') || 100;
                    if (!quickFindHistory)
                        quickFindHistory = [];
                    var index = quickFindHistory.indexOf(value);
                    if (index > -1)
                        quickFindHistory.splice(index, 1);
                    quickFindHistory.splice(0, 0, value);
                    while (quickFindHistory.length > maxDepth && quickFindHistory.length)
                        quickFindHistory.splice(quickFindHistory.length - 1, 1);
                    dataView.viewProp('quickFindHistory', quickFindHistory)
                }
                dataView.viewProp('quickFind', value);
                dataView._executeQuickFind(value);
                persistDataFilter(dataView);
            }
            else {
                value = dataView.viewProp('quickFind') || '';
                return value;
            }
        },
        //useAdvancedSearch: function (value) {
        //    var dataView = this.dataView(),
        //        useAS;
        //    if (arguments.length)
        //        dataView.viewProp('useAdvancedSearch', value);
        //    else {
        //        useAS = dataView.viewProp('useAdvancedSearch');
        //        if (useAS == null)
        //            useAS = dataView.get_searchOnStart();
        //        return useAS == true;
        //    }
        //},
        dispose: function () {
            var that = this,
                dataView = that.dataView(),
                lookupInfo = dataView._lookupInfo,
                pageInfo = getPageInfo(dataView),
                content = pageInfo ? findScrollable(pageInfo.page) : null;
            if (content) {
                touch.presenter('dispose', { id: dataView._id, container: content });
                disposeListViews(content);
                content.prev().find('h3, .app-bar-controls').off(); // clear action bar event handlers
                content.find('.app-map').each(function () {
                    var mapView = $(this),
                        mapInfo = mapView.data('data-map');
                    if (mapInfo) {
                        clearMarkers(mapInfo);
                        mapInfo.map = null;
                        mapView.data('data-map', null);
                    }
                });
            }
            if (lookupInfo) {
                lookupInfo.field = null;
                lookupInfo.callback = null;
            }
            that._disposeSession();
        },
        refresh: function () {
            var that = this,
                pageIndex = that.pageIndex(),
                pageCount = that.pageCount(),
                dataView = that.dataView(),
                totalRowCount = dataView._totalRowCount,
                pageInfo = getPageInfo(dataView),
                fields = dataView._fields,
                allFields = dataView._allFields,
                content = that.content(),
                page = pageInfo.page,// $('#' + pageInfo.id),
                rows = that.visibleDataRows(pageIndex),
                listview = content.find('ul[data-role="listview"]'),
                footer,
                gridFooter = page.find('.app-bar-hscrollbar'),
                aggregateFooter = page.find('.app-bar-aggregates'),
                aggregateItem,
                aggregates = that.aggregates(),
                pageSize = this.pageSize(),
                requiresReset = that._reset,
                keepKeyList = dataView._keepKeyList,
                allowLoadAtTop = pageIndex > 0,
                allowLoadAtBottom = pageIndex < pageCount - 1,
                skipClick,
                itemMap,
                showRowNumber = dataView.get_showRowNumber() == true,
                viewStyle = that.viewStyle(),
                isGrid,
                scrollable = content,
                scrollTop = scrollable.scrollTop(),
                scrollableCover,
                initialSelectedItemOffsetFromTop,
                selectedItemOffsetFromTop,
                header = scrollable.find('.app-page-header'),
                context, tabs,
                pageIsInvisible,
                requiresPromoSpacing,
                actionBar = content.prevAll('.app-bar-actions'),
                echoCallback = that.echoCallback;

            function registerRequiredInitialization(callback) {
                if (pageInfo.requiresInitCallback) {
                    pageInfo.initCallback = function () {
                        if (dataView.get_searchOnStart())
                            whenPageShown(function () {
                                //setTimeout(function () {
                                //    _app.search('show', dataView._id);
                                //    //_app.search('show', { id: dataView._id, field: 'EmployeeID' });
                                //}, 100);
                                setTimeout(_app.search, 0, 'show', dataView._id);
                            });
                        else {
                            //refreshPresenterInstance();
                            callback();
                        }
                    };
                    pageInfo.requiresInitCallback = false;
                    touch.navigate(pageInfo.id);
                    return true;
                }
                else
                    callback();
            }

            function ensurePageVisibility(visible) {
                if (visible) {
                    pageIsInvisible = page.css('display') == 'none';
                    if (pageIsInvisible)
                        page.css({ 'display': 'block'/*, 'z-index': -10*/, 'margin-left': -20000 });
                }
                else {
                    if (pageIsInvisible) {
                        saveScrolling(page);
                        page.css({ 'display': ''/*, 'z-index': '' */, 'margin-left': '' });
                    }
                }
            }

            function clearSelectedKeyList() {
                if (!keepKeyList) {
                    var key = dataView.get_selectedKey();
                    dataView._selectedKeyList = key.length ? [key.join(',')] : [];
                    resetInstruction(dataView);
                }
            }

            function updatePageHeader() {
                var masterDataView = dataView.get_master(),
                    row,
                    identifyingField;
                if (masterDataView)
                    if (masterDataView.inserting())
                        pageHeaderText(pageInfo.text, header);
                    else {
                        row = masterDataView.commandRow();
                        identifyingField = masterDataView._fields[0];
                        identifyingField = masterDataView._allFields[identifyingField.AliasIndex];
                        var identifyingText = identifyingField.format(row[identifyingField.Index]);
                        if (identifyingField.TextMode === 2)
                            identifyingText = htmlToText(identifyingText);
                        pageHeaderText([identifyingText, pageInfo.text], header);
                    }
                if (dataView._lookupInfo && pageInfo.headerText !== false) {
                    pageHeaderText(pageInfo.headerText, header);
                    if (topRowIndex !== 0) {
                        page.attr('data-page-header', false);
                        pageHeaderText(false, header);
                    }
                }
            }

            function refreshPresenterInstance() {
                dataView._rows.every(function (row) {
                    var matched;
                    if (dataView.rowIsSelected(row)) {
                        if (!that.commandRow()) {
                            dataView._forgetSelectedRow(true);
                            that.command(row, 'Select');
                        }
                        else
                            that.commandRow(row);
                        matched = true;
                    }
                    return !matched;
                });

                updateViewTitle(actionBar, dataView, pageInfo);
                showPresenterInstruction(scrollable, that);
                touch.bar('hide', gridFooter);
                touch.bar('hide', aggregateFooter);
                var result = touch.presenter('show', { name: viewStyle, id: dataView._id, container: scrollable, reset: requiresReset });
                updatePageHeader();
                return result;
            }

            function allocateMarkers(mapInfo) {
                var address = createItemAddress(dataView),
                    unresolvedAddresses = [],
                    job = touch.nextAsycJob(),
                    marker;

                mapInfo.fit = true;

                if (that._mapPageWindow == null)
                    clearMarkers(mapInfo);

                $(rows).each(function (index) {
                    var row = this.slice(0),
                        geoLocation = rowToGeoLocation(row, address),
                        titleField = allFields[fields[0].AliasIndex],
                        title = titleField.text(row[titleField.Index]);
                    if (typeof geoLocation == 'string') {
                        if (geoLocation !== 'ZERO_RESULTS') {
                            unresolvedAddresses.push({ address: geoLocation, title: title, row: row });
                            if (!mapInfo.geocoder)
                                mapInfo.geocoder = new google.maps.Geocoder();
                        }
                    }
                    else {
                        marker = createMarker(that, mapView, geoLocation, title, row);
                        if (dataView.rowIsSelected(row))
                            selectMarker(mapInfo, marker);
                    }
                });

                fitMarkersOnMap(mapInfo);

                function resolveAddress() {
                    var jobChanged = job !== touch.asyncJob();
                    if (unresolvedAddresses.length && !jobChanged) {
                        var addr = unresolvedAddresses[0],
                            time = new Date();
                        mapInfo.geocoder.geocode({ address: addr.address }, function (results, status) {
                            if (status === google.maps.GeocoderStatus.OK) {
                                var loc = results[0].geometry.location,
                                    newMarker = createMarker(that, mapView, loc, addr.title, addr.row);
                                if (dataView.rowIsSelected(addr.row))
                                    selectMarker(mapInfo, newMarker);
                                cacheGeoLocation(addr.address, loc.lat(), loc.lng());
                                fitMarkersOnMap(mapInfo);
                                animateMarker(newMarker, 750, google.maps.Animation.DROP);
                            }
                            else {
                                if (status === google.maps.GeocoderStatus.ZERO_RESULTS)
                                    cacheGeoLocation(addr.address);
                                else if (status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                                    setTimeout(resolveAddress, 1000);
                                    return;
                                }
                                // NEW: we are suppressing any error messages from maps.
                            }
                            unresolvedAddresses.splice(0, 1);
                            var elapsedTime = new Date() - time,
                                expectedTime = 675;
                            if (elapsedTime < expectedTime)
                                //setTimeout(function () {
                                //    resolveAddress();
                                //}, expectedTime - elapsedTime);
                                setTimeout(resolveAddress, expectedTime - elapsedTime);
                            else
                                resolveAddress();
                        });
                    }
                    else {
                        if (!jobChanged && !unresolvedAddresses.length && mapInfo.markers.length < maxMapMarkers) {
                            var mapPageWindow = that._mapPageWindow,
                                nextPageIndex;
                            if (!mapPageWindow)
                                mapPageWindow = that._mapPageWindow = { top: pageIndex, bottom: pageIndex, dir: 'up' };
                            if (mapPageWindow.dir === 'up')
                                if (mapPageWindow.bottom < that.pageCount() - 1) {
                                    mapPageWindow.bottom++;
                                    mapPageWindow.dir = 'down';
                                }
                                else
                                    mapPageWindow.top--;
                            else
                                if (mapPageWindow.top > 0) {
                                    mapPageWindow.top--;
                                    mapPageWindow.dir = 'up';
                                }
                                else
                                    mapPageWindow.bottom++;
                            nextPageIndex = mapPageWindow.dir === 'down' ? mapPageWindow.bottom : mapPageWindow.top;
                            if (nextPageIndex >= 0 && nextPageIndex < that.pageCount() - 1) {
                                that.pageIndex(nextPageIndex);
                                that.refresh();
                                return;
                            }
                        }
                        if (!jobChanged)
                            that._mapPageWindow = null;
                    }
                }
                // start geocoding job
                resolveAddress();
            }

            function refreshMapInstance() {
                var mapInfo = mapView.data('data-map');
                if (mapInfo) {
                    mapView.show();
                    resetMapHeight(scrollable);
                    allocateMarkers(mapInfo);
                }
                else
                    if (touch.supports('Map')) {
                        mapInfo = {
                            map: new google.maps.Map(mapView.get(0), { zoom: 8 }),
                            geocoder: null,
                            markers: []
                        };
                        mapInfo.map.setOptions({
                            keyboardShortcuts: false
                        });
                        mapView.data('data-map', mapInfo).show();
                        that.refresh();
                    }
                    else
                        setTimeout(refreshMapInstance, 100);
            }

            function syncView() {
                ensurePageVisibility(true);

                touch.bar(isGrid ? 'show' : 'hide', gridFooter);

                if (aggregates)
                    if (isGrid && aggregateItem) {
                        if (scrollable[0].scrollHeight - parseCss(aggregateItem, 'margin-bottom') < scrollable.height())
                            touch.bar('hide', aggregateFooter);
                        else {
                            aggregateItem.prev().addClass('ui-last-child' + (aggregateItem.is('.app-has-promo') ? ' app-has-promo' : ''));
                            aggregateItem.remove();
                            touch.bar('show', aggregateFooter);
                        }
                    }
                    else
                        touch.bar(aggregates ? 'show' : 'hide', aggregateFooter);

                if (isGrid) {
                    gridScrollingFrozenStyle(dataView);
                    setupGridHeaderStyle(listview);
                    updateHScrollbarOfGrid(dataView);
                }
                if (requiresReset || !that._synced) {
                    // update page header
                    updatePageHeader();
                    // scroll selected item into view
                    if (selectedItem.length) {
                        var scrollableTop = scrollable.offset().top,
                            scrollableHeight = scrollable.height(),
                            scrollHeight,
                            loadAtBottomLink, loadAtTopLink,
                            itemTop = Math.ceil(selectedItem.offset().top),
                            itemHeight = selectedItem.outerHeight(true),
                            loadingBarHeight;

                        function resizeLoadingBar(bar, height) {
                            if (bar.length) {
                                height += parseCss(bar, 'height');
                                bar[0].style.cssText = 'height:' + height + 'px !important';
                            }
                        }

                        scrollTop = scrollable.scrollTop();

                        // if (itemTop < scrollableTop || itemTop + itemHeight >= scrollableTop + scrollableHeight)
                        if (selectedItemOffsetFromTop && selectedItemOffsetFromTop > 0 && (selectedItemOffsetFromTop + itemHeight) < scrollableHeight) {
                            if (itemTop - scrollableTop < selectedItemOffsetFromTop) {
                                resizeLoadingBar(listview.find('.dv-load-at-top'), selectedItemOffsetFromTop - (scrollTop + itemTop - scrollableTop));
                                //loadAtTopLink = listview.find('.dv-load-at-top');
                                //if (loadAtTopLink.length) {
                                //    loadingBarHeight = parseInt(loadAtTopLink.css('height')) + selectedItemOffsetFromTop - (scrollTop + itemTop - scrollableTop);
                                //    loadAtTopLink.css('height', loadingBarHeight).find('p').css('margin-top', Math.floor(loadingBarHeight / 2));
                                //}
                            }
                            else {
                                scrollHeight = scrollable[0].scrollHeight;
                                if (scrollHeight - (scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop) < scrollableHeight) {
                                    resizeLoadingBar(listview.find('.dv-load-at-bottom'), scrollableHeight - (scrollHeight - (scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop)));
                                    //loadAtBottomLink = listview.find('.dv-load-at-bottom');
                                    //if (loadAtBottomLink.length) {
                                    //    loadingBarHeight = parseInt(loadAtBottomLink.css('height')) + scrollableHeight - (scrollHeight - (scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop));
                                    //    loadAtBottomLink.css('height', loadingBarHeight).find('p').css('margin-top', Math.floor(loadingBarHeight / 2));
                                    //}
                                }
                            }
                            if (selectedItem.parent().prev().is('.dv-item,.dv-load-at-top-parent'))
                                scrollWrapper(scrollable, scrollTop + itemTop - scrollableTop - selectedItemOffsetFromTop);
                        }
                        else // null or 0 shall go to "ELSE" to center the item  
                            scrollWrapper(scrollable, scrollTop + itemTop - scrollableTop - (scrollableHeight - itemHeight) / 2);

                        if (requiresReset)
                            dataView.raiseSelected();
                    }
                    else
                        if (!that._synced && dataView.get_selectedKey().length && !dataView._lookupInfo) {
                            function doSync() {
                                if (activePageIdentifier(pageInfo.id) && !isInTransition)
                                    dataView.sync();
                                else
                                    setTimeout(doSync, 50);
                            }
                            doSync();
                        }
                        else
                            that.clearSelection();
                    that._synced = true;
                    fetchOnDemand(0);
                    if (selectedItem && selectedItem.length) {
                        if (dataView.multiSelect())
                            checkBoxState(true, findGridHeaderCheckBoxes(listview), findStickyHeaderBarCheckBox(dataView), selectedItem.find('.app-btn-check'));
                    }
                    else
                        scrollable.scrollTop(0);
                    resetStickyHeaderInstruction(dataView, page, isGrid);
                }
                else if (selectedItem && selectedItem.length && !requiresReset && !loadAtTop && initialSelectedItemOffsetFromTop != null)
                    scrollWrapper(scrollable, scrollable.scrollTop() + selectedItem.offset().top - scrollable.offset().top - initialSelectedItemOffsetFromTop);
                fitTabs(page);
                if (page.find('.ui-header-fixed').length)
                    page.addClass('app-has-fixed-bar');
                if (requiresReset)
                    _edit.sync(scrollable);
                else
                    stickyHeader();
                ensurePageVisibility(false);
            }

            if (!rows) {
                if (requiresReset) {
                    observe(false, listview);
                    clearListView(listview);
                }
                dataView.goToPage(pageIndex, true);
                return;
            }

            var pendingNotification = dataView._pendingNotification;
            if (pendingNotification) {
                touch.notify(pendingNotification);
                dataView._pendingNotification = null;
            }

            if (echoCallback) {
                that.echoCallback = null;
                echoCallback();
                return;
            }

            if (pageInfo.echoId)
                if (!pageInfo.echoInitialized) {
                    if (!dataView.sessionShared('isSummary')) {
                        dataView.sessionShared('isSummary', true);
                        page.remove().empty(); // Remove page from the page. Summary views will act on their own. See All will create a dedicated page instead.
                    }
                    echoRefresh(pageInfo.echoId);
                    if (!pageInfo.displayed)
                        pageInfo.initialized = false;
                    return;
                }

            dataView._keepKeyList = false;

            if (requiresReset) {
                pageInfo.echoChanged = true;
                //if (that.commandRow())
                that.currentPageIndex(pageIndex);
            }

            if (!isInTransition && !activePageIdentifier(pageInfo.id) && pageInfo.id !== rootDataViewId && !dataView._lookupInfo) {
                clearSelectedKeyList();
                //executeRefreshCallback(pageInfo);
                fetchEchos();
                dataView._keepKeyList = true;
                return;
            }

            pageInfo.initialized = true;
            pageInfo.displayed = true;

            touch.makeModal(pageInfo);

            var showHeader = dataView.tagged(/\bpage\-header\-(\w+)\b/);
            if (showHeader)
                if (showHeader[1] === 'none') {
                    pageInfo.headerText = false;
                    pageHeaderText(false, header);
                }
                else
                    page.addClass('app-page-header-show');
            if (pageInfo.headerText !== false)
                createPageHeaderIcon(dataView, page, header);

            checkStartCommand(dataView);

            if (that._autoSelect/* && pageInfo.requiresInitCallback*/) {
                var autoSelect = that._autoSelect;
                whenPageShown(function () {
                    that.tap(autoSelect.row, autoSelect.action);
                    that._autoSelect = null;
                });
            }

            if (pageInfo.loading) {
                pageInfo.loading = false;
                page.find('.app-page-loading').remove();
            }
            selectedItem = listview.find('.app-selected').first();
            if (selectedItem.length)
                initialSelectedItemOffsetFromTop = Math.round(selectedItem.offset().top - scrollable.offset().top);
            if (requiresReset) {
                selectedItemOffsetFromTop = initialSelectedItemOffsetFromTop;
                clearSelectedKeyList();
            }
            if (dataView._requiresContextRefresh) {
                dataView._requiresContextRefresh = false;
                refreshContext();
            }


            if (!that._checkedViews) {
                that._checkedViews = true;

                if (!dataView._lookupInfo && dataView.get_showActionBar()) {
                    // create action bar
                    actionBar = createActionBar(dataView, content);
                    //if (dataView._id == getActivePageId())
                    //    refreshContext();
                }
                else {
                    // create tabs
                    context = [];
                    if (enumerateAvailableViews(context, false, pageInfo) > 1) {
                        tabs = [];
                        $(context).each(function () {
                            var option = this;
                            tabs.push({ text: option.text, active: option.icon === 'checked', callback: option.callback });
                        });
                        if (dataView.tagged('view-selector-remember-none'))
                            pageVariable(dataView._id + '_viewTabs', null);
                        touch.tabs('create', { tabs: tabs, className: 'ui-header-fixed app-tabs-views', id: dataView._id + '_viewTabs', scope: 'page', placeholder: content });
                        pageInfo.headerText = false;
                        pageHeaderText(false, header);
                        hasMultipleViews = true;
                    }
                }
            }
            if (actionBar.length)
                header.addClass('app-has-action-bar');

            if (touch.presenter('supports', { name: viewStyle, id: dataView._id })) {
                _edit.detach();

                registerRequiredInitialization(refreshPresenterInstance);
                that._reset = false;
                return;
            }
            else if (!viewStyle.match(/Grid|Cards|List|Map/)) {
                viewStyle = that._viewStyle = 'Grid';//gridViewIsPreferred() ? 'Grid' : 'List';
                dataView.pageProp('viewStyle', viewStyle);
            }

            listview.show();

            dataView.groupBy();
            isGrid = viewStyle === 'Grid';
            itemMap = that.itemMap(viewStyle === 'List');

            configurePromoButton(dataView, itemMap.thumb != null);

            hidePresenters(scrollable, that, viewStyle === 'Map');
            if (viewStyle === 'Map') {
                _edit.detach();
                touch.bar('hide', gridFooter);
                touch.bar('hide', aggregateFooter);
                //disposeListViews(content); // - this causes the main list view to re-create
                content.find('ul[data-role="listview"]').hide();

                removeStickyHeaderTemplate(page);
                if (!that.tagged('supports-view-style-map')) {
                    that.viewStyle('Grid'/*_screen.width > 480 ? 'Grid' : 'List'*/);
                    refreshContext();
                    return;
                }
                iyf();
                if (requiresReset) {
                    that._reset = false;
                    that._mapPageWindow = null;
                    var hasSelection = false;
                    $(rows).each(function () {
                        if (dataView.rowIsSelected(this)) {
                            hasSelection = true;
                            that.tap(this, 'none');
                            return false;
                        }
                    });
                    if (!hasSelection)
                        that.clearSelection();
                    else
                        dataView.raiseSelected();

                    that.refresh();
                    return;
                }
                pageHeaderText(true);
                ensurePageVisibility(true);
                showPresenterInstruction(scrollable, that);
                updateViewTitle(actionBar, dataView, pageInfo);
                var mapView = scrollable.find('> .app-map');
                if (!mapView.length)
                    mapView = $div('app-map').appendTo(scrollable).attr('data-map-for', dataView._id).hide();
                if (!touch.registerAPI('Map')) {
                    scrollable.find('.app-presenter-instruction').hide();
                    $('<div class="app-api-error">Google MAP API Key is required. Specify a valid key in <i>Settings | Features | Touch UI</i> section of your project properties.<br/><br/><a href="https://developers.google.com/maps/documentation/javascript/get-api-key" rel="external">Get The Key Now!</a></div>').appendTo(mapView.empty().show());
                }
                fitTabs(page);
                ensurePageVisibility(false);

                //if (pageInfo.requiresInitCallback) {
                //    //pageInfo.initCallback = function () {
                //    //    if (dataView.get_searchOnStart())
                //    //        searchOnStart(dataView);
                //    //    else
                //    //        refreshMapInstance();
                //    //}
                //    //pageInfo.requiresInitCallback = false;
                //    //mobile.navigate(pageInfo.id);
                //    pageInfo.initCallback = initRequiredCallback(refreshMapInstance);
                //}
                //else if (pageInfo.requiresReturnCallback) {
                //    pageInfo.returnCallback = function () {
                //        refreshMapInstance();
                //    }
                //    pageInfo.requiresReturnCallback = false;
                //}
                //else {
                //    refreshMapInstance();
                //}
                registerRequiredInitialization(refreshMapInstance);
                that._reset = false;
                updateVScrollbar(content);
                //executeRefreshCallback(pageInfo);
                return;
            }


            if (!ie)
                scrollableCover = $div('app-scrollable-cover').appendTo(scrollable.parent()).css({ position: 'absolute', left: scrollable.offset().left, top: scrollable.offset().top, width: calcWidth(scrollable), height: scrollable.outerHeight(), zIndex: 2, backgroundColor: android ? 'transparent' : '#fff' });

            if (!listview.length) {
                listview = $ul('app-listview', 'data-role="listview"').addClass(dataViewToClassNames(dataView)).appendTo(content).listview()
                    .on('taphold', function (event, originalEvent) {
                        //if (event.namespace != 'app') return;
                        if (originalEvent)
                            event = originalEvent;
                        if (tapIsCanceled())
                            return false;

                        if (dataView._busy()) return;
                        var target = $(event.target),
                            link = target.closest('a,.ui-btn'),
                            dataContext = link.data('data-context'),
                            multiSelect = dataView.multiSelect() && false;

                        if (link.closest('li').is('.dv-item') && !link.is('.app-divider')) {
                            if (link.is('.app-selected')) {
                                link.removeClass('app-selected');
                                if (!multiSelect) {
                                    that.clearSelection();
                                    if (that.lookupInfo()) {
                                        callWithFeedback(link, function () {
                                            that.executeInContext('Clear');
                                        });
                                    }
                                    else {
                                        callWithFeedback(link, function () {
                                            // not implemented
                                        });
                                    }
                                }
                            }
                            else if (dataView._hasKey()) {
                                if (!multiSelect)
                                    removeHighlightFromSelectedRow(listview);
                                link.addClass('app-selected');
                                that.tap(dataContext, 'none');
                                pageInfo.echoChanged = true;
                                callWithFeedback(link);
                            }
                            skipClick = true;
                        }
                        //if (that.viewStyle() == 'Grid' && isTouchPointer && target.is('span'))
                        //    showToolTip(target);
                        return false;
                    })
                    .on('vclick', function (e) {
                        var target = $(e.target),
                            link = target.closest('a,.ui-btn').removeClass('ui-btn-active'),
                            multiSelect,
                            group;

                        function loadData(below) {
                            if (!dataView._busy()) {
                                that._loadAtTop = !below;
                                var item = link.parent();
                                if (below)
                                    item = item.prev();
                                else {
                                    item = item.next();
                                    if (!item.is('.dv-item'))
                                        item = item.next();
                                }
                                context = item.find('.ui-btn').data('data-context');
                                if (context) {
                                    that.pageIndex(context.pageIndex + (below ? 1 : -1));
                                    that.refresh();
                                }
                            }
                        }

                        if (target.is('.app-btn-toggle,[data-href],[href]') || target.parent().is('.app-clipboard-cut'))
                            return;
                        //fieldContainer = target.closest('.app-field');
                        //if (fieldContainer.length) {
                        //    hyperlink = fieldContainer.find('[data-href]');
                        //    if (hyperlink.length) {
                        //        setTimeout(function () {
                        //            hyperlink.trigger('vclick');
                        //        }, 10);
                        //        return false;
                        //    }
                        //}
                        if (link.length && !link.is('.app-divider')) {
                            if (link.is('.dv-load-at-bottom'))
                                loadData(true);
                            else if (link.is('.dv-load-at-top:visible')) {
                                if (!dataView._autoNewRow)
                                    loadData(false);
                            }
                            else {
                                if (skipClick) {
                                    skipClick = false;
                                    return;
                                }
                                if (!clickable(target) || isBusy())
                                    return false;
                                if (e.ctrlKey) {
                                    listview.trigger('taphold', e);
                                    skipClick = false;
                                    return false;
                                }
                                if (link.is('.dv-action-none'))
                                    return false;
                                if (isActionColumnClick(e, dataView))
                                    return false;

                                multiSelect = dataView.multiSelect()
                                if (multiSelect && isMultiSelectCheckBoxClick(e))
                                    toggleRowSelection(dataView, link, 'none');
                                else {
                                    // perform tap on a regular list item
                                    var dataContext = link.data('data-context'),
                                        moreIsClicked = isMoreButtonClick(e),
                                        clickHandler;
                                    if (dataContext) {
                                        if (multiSelect)
                                            link.find('.app-btn-check').addClass('app-btn-check-selected');
                                        listview.find('.ui-btn.app-selected').removeClass('app-selected ui-btn-active');
                                        if (moreIsClicked) {
                                            link.addClass('app-selected');
                                            target = findMoreButton(target);
                                            clickHandler = function () {
                                                if (!checkIfMultiSelect(dataView, link, 'none'))
                                                    that.tap(dataContext, 'none');
                                                showRowContext(target);
                                            };
                                        }
                                        else
                                            clickHandler = function () {
                                                if (dataView._hasKey()) {
                                                    link.addClass('app-selected');
                                                    if (!moreIsClicked) {
                                                        if (!checkIfMultiSelect(dataView, link))
                                                            that.tap(dataContext);
                                                    }
                                                    pageInfo.echoChanged = true;
                                                }
                                                else
                                                    that.tap(dataContext);
                                            };
                                    }
                                    else if (link.is('.dv-action-refresh'))
                                        clickHandler = function () {
                                            dataViewSyncCallback(dataView._id);
                                        };
                                    else if (link.is('.dv-action-new'))
                                        clickHandler = function () {
                                            that.executeInContext('New', null, false);
                                        };
                                    else if (link.is('.dv-action-filter-clear'))
                                        clickHandler = function () {
                                            clearDataFilter(dataView, true);
                                        };
                                    if (clickHandler) {
                                        clickHandler();
                                        callWithFeedback(target);
                                    }
                                }
                            }
                            return false;
                        }
                        else {
                            group = target.closest('.app-group');
                            if (group.length) {
                                if (target.is('.app-group')) {
                                    // collapse group
                                }
                                else {
                                    var title = target.closest('.app-group').find('.app-group-path,.app-group-title').addClass('ui-btn-active');
                                    setTimeout(function () {
                                        title.removeClass('ui-btn-active');
                                        configureGroupBy(true);
                                    }, feedbackDelay);
                                }
                                return false;
                            }
                        }
                    })/*.contextmenu(function (e) {
                        if (!e.isDefaultPrevented())
                            return handleFieldContextMenu(that.dataView(), e);
                    })*/;
                addSpecialClasses(dataView, listview);


                footer = touch.bar('create', {
                    type: 'footer', page: page
                });
                var lastBar;
                if (!aggregateFooter.length && aggregates) {
                    lastBar = footer.find('[data-location="bottom"]');

                    aggregateFooter = $div('app-bar-aggregates');
                    if (lastBar.length)
                        aggregateFooter.insertBefore(lastBar.first());
                    else
                        aggregateFooter.appendTo(footer);
                }

                if (!gridFooter.length) {
                    gridFooter = $('<div class="app-bar-hscrollbar"><span class="app-hscrollbar2" data-view="' + dataView._id + '"><span class="app-hscrollbar-handle" data-draggable="hscrollbar"></span></span></div>');
                    if (aggregateFooter.length)
                        gridFooter.insertAfter(aggregateFooter);
                    else {
                        lastBar = footer.children().first();
                        if (lastBar.length)
                            gridFooter.insertBefore(lastBar);
                        else
                            gridFooter.appendTo(footer);
                    }
                    gridScrollingFrozenStyle(dataView);
                }
            }

            if (requiresReset) {
                observe(false, listview);
                clearListView(listview);
                //initialScrollTop = 0;
            }

            function createGridRowOfAggregates(listview) {
                var aggregateItem = $li('dv-item', 'data-icon="false"').appendTo(listview),
                    aggregateLink = $div('ui-btn app-divider app-calculated').appendTo(aggregateItem);
                createRowMarkup(dataView, aggregates, null, aggregateLink, that.aggregateLabels(), true);
                aggregateItem.find('.app-field').attr('data-tooltip-location', 'above');
                return aggregateItem;
            }


            if (requiresReset !== false && aggregateFooter.length && aggregates)
                if (isGrid)
                    createGridRowOfAggregates(aggregateListView = $ul('ui-listview app-listview app-grid').appendTo(aggregateFooter.empty()));
                else
                    createListOfAggregates(dataView, aggregateFooter.empty(), aggregates);

            changeViewStyle(listview, viewStyle);
            if (viewStyle === 'Grid')
                gridScrollingFrozenStyle(dataView);


            updateViewTitle(actionBar, dataView, pageInfo);

            addMultiSelectClass(dataView, listview);

            listview.toggleClass('app-can-drag', dataView.clipboard('drag'));

            var currentItems = listview.find('.dv-item'),
                requiresCleanup = currentItems.length > pageSize * 2/*2*/,
                loadAtBottomItem = listview.find('li').last(),
                loadAtTopItem,
                topRowIndex,
                loadAtTop = that._loadAtTop,
                selectedItem,
                firstVisibleItem, firstVisibleItemY,
                lastVisibleItem = loadAtBottomItem && loadAtBottomItem.length && loadAtBottomItem.prev(),
                lastVisibleItemY = lastVisibleItem && lastVisibleItem.length && Math.round(lastVisibleItem.position().top),
                topGroupHeight,
                refreshLink,
                clearFilterLink;

            topGroupHeight = removeGroups(listview);

            if (allowLoadAtTop && !loadAtBottomItem.length || requiresCleanup && !loadAtTop && !listview.find('li.dv-load-at-top-parent').length) {
                header.hide();
                //loadAtTopItem = $(String.format('<li data-icon="false" class="dv-load-at-top-parent"><a class="dv-load-at-top"><p>{0}</p></a></li>', loadingStatusText));
                loadAtTopItem = $('<li data-icon="false" class="dv-load-at-top-parent"><a class="dv-load-at-top"></a></li>');
                if (requiresCleanup) {
                    loadAtTopItem.insertBefore(currentItems.get(0));
                    allowLoadAtTop = true;
                }
                else
                    loadAtTopItem.appendTo(listview);
            }

            if (loadAtTop) {
                loadAtTopItem = listview.find('li').first();
                if (loadAtTopItem.is('.app-list-instruction'))
                    loadAtTopItem = loadAtTopItem.next();
                firstVisibleItem = loadAtTopItem.length && loadAtTopItem.next()
                firstVisibleItemY = firstVisibleItem && Math.round(firstVisibleItem.position().top) + topGroupHeight;
                rows = rows.slice(0).reverse();
            }
            else
                loadAtBottomItem.remove();

            topRowIndex = pageIndex * pageSize;

            var styleExpressions = enumerateConditionalStyleExpressions(dataView),
                clipboardMap = dataView.clipboard('map');

            $(rows).each(function (index) {
                var row = this, v,
                    item = $li('dv-item', 'data-icon="false"'),
                    rowNumber = loadAtTop ? topRowIndex + pageSize - index : topRowIndex + index + 1;
                var link = $div('ui-btn').appendTo(item).data('data-context', { row: this.slice(0), pageIndex: pageIndex }),
                    currentCommandRow;
                if (dataView.rowIsSelected(row)) {
                    that.headerText(row);
                    link.addClass('app-selected');
                    currentCommandRow = that.commandRow();
                    if (!currentCommandRow) {
                        dataView._forgetSelectedRow(true);
                        that.command(row, 'Select');
                    }
                    else {
                        that.commandRow(row);
                        if (currentCommandRow.join(';') !== row.join(';'))
                            refreshContext();
                    }
                }
                dataView.clipboard('map', { map: clipboardMap, link: link });

                if (loadAtTop)
                    item.insertAfter(loadAtTopItem);
                else
                    item.appendTo(listview);
                if (isGrid)
                    createRowMarkup(dataView, row, showRowNumber ? rowNumber : null, link);
                else
                    createCardMarkup(dataView, row, itemMap, showRowNumber ? rowNumber : null, item, link, viewStyle === 'List');

                evaluateConditionalStyleExpressions(dataView, row, item, styleExpressions);
            });

            if (allowLoadAtBottom && !loadAtTop || requiresCleanup && loadAtTop && !listview.find('.dv-load-at-bottom-parent').length)
                //loadAtBottomItem = item = $(String.format('<li data-icon="false" class="dv-load-at-bottom-parent"><a class="dv-load-at-bottom"><p>{0}</p></a></li>', loadingStatusText)).appendTo(listview);
                loadAtBottomItem = item = $('<li data-icon="false" class="dv-load-at-bottom-parent"><a class="dv-load-at-bottom"></a></li>').appendTo(listview);
            if (loadAtTop && !pageIndex/* || requiresReset && pageIndex == 1*/) {
                loadAtTopItem.remove();
            }

            if (!totalRowCount || dataView.get_searchOnStart()) {
                createNewRowTemplate(dataView, listview, itemMap, true);
                refreshLink = $li('', htmlTag('div', 'dv-action-refresh ui-btn ui-btn-icon-left ui-icon-refresh', htmlTag('p'))).appendTo(listview)
                    .find('.ui-btn');
                refreshLink.attr('title', resourcesPager.Refresh).find('p').text(labelNoRecords);
                if (dataView._filter && dataView._filter.length && !dataView.filterIsExternal()) {
                    clearFilterLink = $li('', htmlTag('div', 'dv-action-filter-clear ui-btn ui-btn-icon-left ui-icon-clear', htmlTag('p'))).appendTo(listview)
                        .find('.ui-btn');
                    clearFilterLink.attr('title', resourcesMobile.ClearFilter).find('p').text(resourcesMobile.ClearFilter);
                }
            }
            if (!allowLoadAtBottom) {

                if (totalRowCount > 0)
                    createNewRowTemplate(dataView, listview, itemMap);

                // render aggregate row
                if (aggregates && isGrid && totalRowCount > 0)
                    aggregateItem = createGridRowOfAggregates(listview);
                if ($settings('ui.actions.promote'))
                    requiresPromoSpacing = true;
                else if (!actionBar.length) {
                    var contextItem = that.executeInContext('New', null, false, true),
                        newLink, newItem, prevItem;
                    if (contextItem) {
                        newItem = $li('dv-action-new').appendTo(listview).attr('data-icon', contextItem.icon);
                        newLink = $a('dv-action-new').appendTo(newItem).attr('title', resourcesMobile.LookupNewAction);
                        if (isGrid) {
                            $p().appendTo(newLink).text(contextItem.text);
                        }
                        else {
                            $htmlTag('h3').appendTo(newLink);
                            prevItem = newItem.prev();
                            if (prevItem.is('.dv-item')) {
                                newLink.html(prevItem.find('.ui-btn').html()).find('p,img,span').css('visibility', 'hidden');
                                if (prevItem.is('.ui-li-has-thumb'))
                                    newItem.addClass('ui-li-has-thumb');
                            }
                            newLink.find('h3').text(contextItem.text);
                            if (!totalRowCount)
                                $p().appendTo(newLink.html('')).text(contextItem.text);
                        }
                    }
                }
            }

            if (loadAtTop) {
                if (page.attr('data-page-header') !== 'false')
                    page.attr('data-page-header', '');
                if (pageInfo.headerText !== false)
                    pageHeaderText(!topRowIndex, header);
            }
            var firstItem = listview.find('li').first(),
                instruction, gridHeader,
                item;
            instruction = that.instruction();
            if ((instruction || isGrid) && !listview.find('.app-list-instruction').length) {
                item = $li('app-list-instruction', 'data-role="list-divider"').insertBefore(loadAtTopItem ? loadAtTopItem : firstItem);
                if (instruction)
                    $span('app-view-instruction').appendTo(item).html(instruction);
                if (isGrid && !!totalRowCount) {
                    gridHeader = createGridHeader(dataView, item);
                    if (!instruction)
                        gridHeader.addClass('app-grid-header-no-description');
                }
                item.toggleClass('app-no-records', totalRowCount < 1);
            }

            if (loadAtTop && loadAtTopItem)
                loadAtTopItem.find('.ui-btn').css('height', '').find('p').css('margin-top', '');

            var stub;

            if (requiresCleanup)

                if (loadAtTop) {
                    stub = $(String.format('<li style="clear:left;height:{0}px"></li>', _screen.height/*$mobile.getScreenHeight() * 10 */)).appendTo(listview);
                    currentItems = currentItems.slice(pageSize * (android ? 2 : 2));
                    currentItems.find('.ui-btn').data('data-context', null);
                    currentItems.remove();
                    listview.find('li.dv-action-new').remove();
                }
                else {
                    header.hide();
                    stub = $(String.format('<li style="clear:left;height:{0}px"></li>', _screen.height/*$mobile.getScreenHeight() * 10 */)).appendTo(listview);
                    //listview.find('li.app-list-instruction').remove();
                    currentItems = currentItems.slice(0, pageSize);
                    currentItems.find('.ui-btn').data('data-context', null);
                    currentItems.remove().empty();
                }

            injectGroups(dataView, listview);
            yardstick(listview);
            listview.listview('refresh');
            if (requiresPromoSpacing)
                listview.find('li.dv-item').last().addClass('app-has-promo');

            selectedItem = listview.find('.app-selected');

            if (selectedItemOffsetFromTop == null)
                if (requiresCleanup)
                    if (loadAtTop) {
                        var newFirstVisibleItemY = firstVisibleItem.position().top;
                        //scrollable.scrollTop(scrollTop + newFirstVisibleItemY - firstVisileItemY);
                        scrollWrapper(scrollable, scrollTop + newFirstVisibleItemY - firstVisibleItemY);
                    }
                    else {
                        var newLastVisibleItemY = lastVisibleItem.position().top;
                        //scrollable.scrollTop(scrollTop + newLastVisibleItemY - lastVisibleItemY);
                        scrollWrapper(scrollable, scrollTop + newLastVisibleItemY - lastVisibleItemY);
                    }
                else
                    if (loadAtTop) {
                        newFirstVisibleItemY = firstVisibleItem.position().top;
                        //scrollable.scrollTop(scrollTop + newFirstVisibleItemY - firstVisileItemY);
                        scrollWrapper(scrollable, scrollTop + newFirstVisibleItemY - firstVisibleItemY);
                    }
                    else if (loadAtTop == null)
                        scrollWrapper(scrollable, 0);
            if (stub)
                setTimeout(function () {
                    stub.prev().addClass('ui-last-child');
                    stub.remove(); // timeout solves the problem of "blinking" on an incomplete last page
                }, 100);


            if (isGrid) {
                if (refreshLink)
                    refreshLink.removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
                if (newLink)
                    newLink.removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
                if (clearFilterLink)
                    clearFilterLink.removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
            }




            //if (pageInfo.requiresInitCallback) {
            //    syncView();
            //    pageInfo.initCallback = function () {
            //        if (dataView.get_searchOnStart())
            //            whenPageShown(function () {
            //                setTimeout(function () {
            //                    searchOnStart(dataView);
            //                });
            //            });
            //        else
            //            fetchOnDemand(200);
            //    }
            //    pageInfo.requiresInitCallback = false;
            //    mobile.navigate(pageInfo.id);
            //}
            //else if (pageInfo.requiresReturnCallback) {
            //    syncView();
            //    pageInfo.returnCallback = function () {
            //        fetchOnDemand(200);
            //    }
            //    pageInfo.requiresReturnCallback = false;
            //}
            //else {
            //    syncView();
            //    fetchOnDemand(requiresReset ? 10 : 200);
            //    stickyHeader();
            //}
            syncView();
            registerRequiredInitialization(function () {
                fetchOnDemand(requiresReset ? 10 : 200);
                if (dataView.inlineEditing() && selectedItem && selectedItem.length) {
                    var selectedItemRect = getBoundingClientRect(selectedItem),
                        wrapperRect = getBoundingClientRect(scrollable);
                    if (wrapperRect.top <= selectedItemRect.top && selectedItemRect.top <= wrapperRect.bottom || wrapperRect.top <= selectedItemRect.bottom && selectedItemRect.bottom <= wrapperRect.bottom)
                        _edit.sync({ dataView: dataView });
                }
                //stickyHeader();
            });
            if (scrollableCover)
                if (android && requiresCleanup)
                    setTimeout(function () {
                        scrollableCover.remove();
                    }, 300);
                else
                    scrollableCover.remove();

            that._reset = false;
            that._loadAtTop = null;

            observe(true, scrollable);
            $document.trigger($.Event('dataviewrefresh.app', { dataView: dataView }));
        },
        reset: function (full) {
            var dataView = this.dataView(),
                pageInfo = getPageInfo(dataView),
                pageHash = '#' + pageInfo.id,
                visible;
            this._reset = true;
            $(navigationStack('list')).each(function (index) {
                if (index > navigationStack('index'))
                    return false;
                if (this.hash === pageHash) {
                    visible = true;
                    return false;
                }
            });
            if (!visible) {
                pageInfo.initialized = false;
                pageInfo.echoInitialized = false;
                // pageInfo.echoId = false;
            }
        },
        visibleDataRows: function (pageIndex) {
            var dataView = this._dataView,
                cachedPages = dataView._cachedPages;
            if (cachedPages)
                for (var i = 0; i < cachedPages.length; i++) {
                    var p = cachedPages[i];
                    if (p.index == pageIndex)
                        return p.rows;
                }
            return null;
        },
        currentPageIndex: function (value) {
            if (arguments.length)
                this._currentPageIndex = value;
            return this._currentPageIndex;
        },
        pageIndex: function (value) {
            var dataView = this._dataView;
            if (typeof value == 'string') {
                if (value === 'bottom') {
                    var bottomItemData = this.content().parent().find('ul li.dv-item').last().find('.ui-btn').data('data-context');
                    if (bottomItemData)
                        return bottomItemData.pageIndex;
                }
                if (value === 'top') {
                    var topItemData = this.content().parent().find('ul li.dv-item').first().find('.ui-btn').data('data-context');
                    if (topItemData)
                        return topItemData.pageIndex;
                }
                return dataView.get_pageIndex();
            }
            else if (value == null)
                return dataView.get_pageIndex();
            else
                dataView.set_pageIndex(value);
        },
        pageCount: function () {
            var dataView = this._dataView;
            return dataView.get_pageCount();
        },
        pageSize: function () {
            var dataView = this._dataView;
            return dataView.get_pageSize();
        },
        instruction: function (includeRowCount) {
            var that = this,
                lookupInfo = that.lookupInfo(),
                lookupField,
                dataView = that.dataView(),
                viewDescription = that.viewDescription() || '',
                instruction = viewDescription ? [viewDescription] : [],
                filter = that.filterStatus(),
                groupExpression = dataView.groupExpression(),
                text;
            if (lookupInfo) {
                if (instruction.length)
                    instruction.push(' ');
                lookupField = lookupInfo.field;
                instruction.push(String.format(lookupField.ItemsDescription || resourcesMobile.LookupInstruction, lookupField._autoAlias ? (lookupField.AltHeaderText || lookupField.HeaderText) : lookupField._dataView._allFields[lookupField.AliasIndex].HeaderText));
                if (lookupInfo.value) {
                    text = lookupInfo.text;
                    if (text && text.length > 50)
                        text = text.substring(0, 50) + '...';
                    instruction.push(String.format(resourcesMobile.LookupOriginalSelection, text));
                }
            }

            if (dataView.multiSelect())
                instruction.push('<span class="app-multi-select-instruction">' + multiSelectInstruction(dataView) + '</span>');

            if (includeRowCount !== false && (instruction.length || filter || groupExpression) && dataView._totalRowCount > 1) {
                if (instruction.length) {
                    instruction.push(' ');
                    instruction.push(String.format(resourcesMobile.ShowingItemsInfo, String.format('{0:N0}', dataView._totalRowCount)));
                }
                $(groupExpression).each(function (index) {
                    var f = dataView.findField(this);
                    if (f) {
                        if (!index) {
                            if (instruction.length)
                                instruction.push(' ');
                            instruction.push(resourcesMobile.GroupedBy, ' ');
                        }
                        if (index)
                            if (index === groupExpression.length - 1)
                                instruction.push(' ', labelAnd, ' ');
                            else
                                instruction.push(', ');
                        instruction.push(f.HeaderText);
                        if (index == groupExpression.length - 1)
                            instruction.push('.');
                    }
                });
            }

            if (filter) {
                if (instruction.length)
                    instruction.push(' ');
                instruction.push(String.format('<span class="app-filter" title="{1}">{0}</span><i class="material-icon app-filter-clear" title="{2}">clear</i>', filter, resourcesMobile.Filter, labelClear));
            }
            return instruction.join('');
        },
        context: function (list, actionScopes) {
            var that = this,
                dataView = that.dataView(),
                extension = dataView.extension(),
                totalRowCount = dataView._totalRowCount,
                viewLabel = dataView.get_view().Label,
                //sortExpression = dataView.get_sortExpression(),
                hasSearchAction = dataView._hasSearchAction,
                row = that.commandRow() || [],
                lookupInfo = that.lookupInfo(),
                lookupField,
                existingRow = row && row.length,
                rowIsTemplate;

            if (totalRowCount !== -1) {
                if (dataView.get_showViewSelector())
                    list.push({
                        text: viewLabel, tooltip: totalRowCount > 999 ? String.format(resourcesMobile.ShowingItemsInfo, String.format('{0:N0}', totalRowCount)) : null, count: totalRowCount > 999 ? '999+' : totalRowCount, icon: 'gear', system: true, toolbar: false, transition: true, callback: configureView
                    }, {});
                barcodeContextItem(dataView, list);
                if (dataView.get_showQuickFind() && ((totalRowCount > 1 || dataView._busy()) || dataView.get_filter().length > dataView.get_externalFilter().length) || advancedSearchFilter(dataView).length || hasSearchAction)
                    list.push({ text: labelSearch, desc: advancedFilterStatus(dataView), descInTooltip: false, icon: 'search', toolbar: false, system: true, context: { dataViewId: dataView._id }, callback: startSearchCallback });

                list.push({ text: resourcesMobile.Sort, icon: 'sort', transition: true, desc: sortExpressionToText(dataView), toolbar: false, system: true, callback: configureSort });
                list.push({ text: resourcesMobile.Filter, icon: 'filter', transition: true, desc: extension.filterStatus(true, true), toolbar: false, system: true, callback: configureFilter });
                list.push({ text: resourcesMobile.Group, icon: 'group', transition: true, desc: groupExpressionToText(dataView), toolbar: false, system: true, callback: configureGroupBy });

                if (!lookupInfo || lookupInfo.value != null)
                    list.push({});
                addSelectAction(dataView, list, row);
                if (lookupInfo) {
                    //if (findActivePage('.dv-heading.app-disabled').length && !sidebarIsVisible())
                    //    list.push({ text: existingRow ? that.instruction() : null });
                }
                else
                    enumerateSpecialActionContextOptions(dataView, list, row);
                rowIsTemplate = dataView.rowIsTemplate(row)
                if (lookupInfo && !rowIsTemplate) {
                    lookupField = lookupInfo.field;

                    //function changeLookup(lookupField, lookupDataView, row) {
                    //    var values = _input.methods.lookup._rowToValues(lookupField, lookupDataView, row);
                    //    // go back
                    //    if (values) {
                    //        goBack(function () {
                    //            getPageInfo(lookupField._dataView._id).autoFocus = false;
                    //            lookupInfo.change(values);
                    //        });
                    //    }
                    //}

                    if (existingRow)
                        list.push({
                            text: resourcesMobile.LookupSelectAction, icon: 'material-icon-arrow-forward', command: 'Select', context: { field: lookupField, lookupInfo: lookupInfo, row: row }, callback: lookupContext_changeLookup/* function () {
                                changeLookup(lookupField, getPageInfo().dataView, row);
                            }*/
                        });
                    if (lookupInfo.value)
                        list.push({
                            text: resourcesMobile.UnSelect, icon: 'material-icon-clear', command: 'Clear', context: { field: lookupField, lookupInfo: lookupInfo }, callback: lookupContext_changeLookup/*function () {
                                changeLookup(lookupField, getPageInfo().dataView, null);
                            }*/
                        });
                    if (!isNullOrEmpty(lookupField.ItemsNewDataView))
                        list.push({
                            text: resourcesMobile.LookupNewAction, icon: 'material-icon-add', command: 'New', system: true, context: lookupField, callback: lookupContext_new/* function () {
                                that.executeInContext('New', lookupField.ItemsNewDataView, true);
                            }*/
                        });
                    list.push({});
                    if (existingRow && !lookupField.tagged('lookup-details-hidden') && !dataView.rowIsTemplate(existingRow))
                        list.push({
                            text: resourcesMobile.LookupViewAction, icon: 'material-icon-info', callback: lookupContext_objectRef /*function () {
                                WebDataView._defaultUseCase = 'ObjectRef';
                                that.executeInContext('Select', 'editForm1', true);
                            }*/
                        });
                    enumerateSpecialActionContextOptions(dataView, list, row);
                    //list.push({
                    //    text: resourcesPager.Refresh, icon: 'material-icon-refresh', callback: function () {
                    //        dataView.sync();
                    //    }
                    //});
                    var gridScopeActionList = [],
                        firstGridScopeAction = true,
                        i, action, actionArgument;
                    enumerateActions(['Grid'], dataView, gridScopeActionList, row);
                    i = 0;
                    while (i < gridScopeActionList.length) {
                        action = gridScopeActionList[i];
                        actionArgument = action.argument;
                        if (!(action.command === 'Select' && (!actionArgument || actionArgument === 'editForm1'))) {
                            if (firstGridScopeAction) {
                                addListSeparator(list);
                                firstGridScopeAction = false;
                            }
                            list.push(action);
                        }
                        i++;
                    }
                    if (hasSearchAction) {
                        var searchContext = []
                        enumerateActions(['ActionBar'], dataView, searchContext, searchContext);
                        searchContext.forEach(function (item) {
                            if (item.path === hasSearchAction)
                                list.push(item);
                        });
                    }
                }
                else {
                    if (!actionScopes)
                        actionScopes = ['Grid', 'ActionColumn', 'ActionBar'];
                    else if (actionScopes.indexOf('ActionBar') >= 0)
                        dataView.clipboard('menu', { items: list, existingRow: existingRow });
                    //var defaultSpecialActionArgument;
                    //if (actionScopes.length == 1 && actionScopes[0] == 'Grid') {
                    //    $(dataView._views).each(function () {
                    //        var view = this;
                    //        if (view.Type == 'Form' && view.Id.match(/edit/)) {
                    //            defaultSpecialActionArgument = view.Id;
                    //            return false;
                    //        }
                    //    });
                    //}
                    if (!rowIsTemplate) {
                        enumerateActions(actionScopes, dataView, list, row/*, defaultSpecialActionArgument*/);
                        if (actionScopes.indexOf('Grid') >= 0)
                            dataView.clipboard('menu', { items: list, existingRow: existingRow });
                    }
                }
            }
        }
    };

    /* form view */

    mobileExtensions.Form = function (dataView) {
        return new mobileForm(dataView);
    };

    mobileForm = WebDataView.MobileForm = function (dataView) {
        mobileForm.initializeBase(this);
        this.dataView(dataView);
    };

    mobileForm.prototype = {
        initialize: function () {
            this._initRow();
        },
        _initRow: function () {
            var dataView = this.dataView(),
                row = this.inserting() ? dataView._newRow : dataView._rows[0];
            dataView._mergeRowUpdates(row);
            return this.commandRow(row);
        },
        reset: function () {
            this._reset = true;
            this._initRow();
        },
        options: function () {
            return { quickFind: false, filterDetails: false };
        },
        dispose: function () {
            this._dispose();
            this._disposeSession();
        },
        _disposeLayout: function (layoutNode) {
            layoutNode = $(layoutNode);
            observe(false, layoutNode);
            // destroy layout
            function disposeNodes(rootNodes) {
                if (rootNodes)
                    for (var i = 0; i < rootNodes.length; i++) {
                        var n = rootNodes[i];
                        disposeNodes(n.children);
                        n.children = null;
                        n.self.removeData();
                        n.self = null;
                    }
            }
            layoutNode.find('.app-data-list').off();
            layoutNode.find('.app-drop-box').each(function () {
                _app.upload('destroy', { container: this });
            });
            disposeNodes(layoutNode.data('rootNodes'));
        },
        _disposeForm: function (content) {
            var that = this,
                form;
            if (!content)
                content = that.content();
            form = content.find('[data-layout="form"]').each(function () {
                that._disposeLayout(this);
            });
            return form;
        },
        _dispose: function (forced) {
            var that = this,
                dataView = that._dataView,
                content = this.content();
            that._newValues = null;
            that._disposeForm(content);

            $(dataView._allFields).each(function () {
                var f = this,
                    dv;
                if (f._dataViewId) {
                    dv = findDataView(f._dataViewId);
                    //if (dv._filterSource == dataView._id) 
                    if (dv._dataViewFieldOwnerId === dataView._id) // do we need this?
                        touch.deletePage(dv._id);
                }
            });

            content.find('.app-status-bar, .app-bar-buttons,.app-stub,.app-form-grid').off();
            disposeListViews(content, true);

            // remove echos
            var echoList = content.find('.app-echo').each(function () {
                var pageId = $(this).attr('data-for'),
                    pageInfo = getPageInfo(pageId);
                if (pageInfo) {
                    pageInfo.echoId = null;
                    pageInfo.echoInitialized = false;
                }
            });
            //echoList.find('.app-echo-toolbar').find('.ui-icon-dots, h3, .app-echo-controls, .app-echo-see-all').off();
            echoList.find('.app-echo-inner').off();
            echoList.find('.app-echo-footer').off();
            echoList.off();
            // destroy tabs
            touch.tabs('destroy', { container: content });
            // forced ocation
            if (forced)
                refreshContext();
            that._disposeSession();
        },
        viewStyle: function () {
            return 'Form';
        },
        refresh: function () {
            var that = this,
                dataView = that.dataView(),
                survey = dataView._survey,
                pendingPageDeleteCallback = touch[dataView._id + '_PendingPageDelete'];
            if (pendingPageDeleteCallback) {
                dataView._skipAnimate = !!$('.app-reading-pane-detail').length;
                delete touch[dataView._id + '_PendingPageDelete'];
                pendingPageDeleteCallback();
            }

            if (that._skipRefresh || survey && survey.show === false) {
                that._skipRefresh = false;
                return;
            }

            var
                editing = that.editing(),
                inlineEditor = dataView._inlineEditor,
                pageInfo = getPageInfo(dataView),
                layoutElem,
                content = that.content(),
                row,
                tabs = [], tabbedContainer,
                context,
                statusBar, statusBarDef, formButtons,
                inserting = this.inserting(),
                requiresReset = this._reset,
                showActionButtons = dataView.get_showActionButtons(),
                showActionButtonsSpec,
                confirmContext = dataView._confirmContext,
                page = pageInfo.page,// $('#' + pageInfo.id),
                header = page.find('.app-page-header'),
                stub;

            if (requiresReset) {
                that._dispose();
                that._commandRow = null;
            }
            row = editing ? dataView.editRow() : (that.commandRow() || that._initRow() || []);

            touch.makeModal(pageInfo);

            createPageHeaderImage(dataView, page, row);

            var instruction = that.viewDescription();
            if (instruction)
                $div('app-view-description').appendTo(header).html(instruction);

            var headerText = confirmContext && confirmContext.WindowTitle || dataView.get_view().Label;
            if (headerText)
                if (pageInfo.headerTextLocked) {
                    if (typeof pageInfo.headerText == 'string')
                        pageInfo.headerText = typeof headerText == 'string' && (!dataView.inserting() || dataView._confirmContext) ? [pageInfo.headerText, headerText] : headerText;
                }
                else {
                    var dataText;
                    if (dataView.inserting() && dataView._filterSource)
                        dataText = findScrollable(dataView._filterSource).find('.app-page-header h1').text(); //` + dataView._filterSource + ' .ui-content .app-wrapper .app-page-header h1').text();
                    if (dataText)
                        pageInfo.headerText = [headerText, dataText];
                    else if (dataView._controller === 'MyProfile' && $settingsEnabled('membership.myProfile.appName'))
                        pageInfo.headerText = [headerText, appName()];
                    else
                        pageInfo.headerText = headerText;
                }

            if (inserting)
                header.attr('data-locked', 'false').data('data-text', null);
            var showHeaderTag = dataView.tagged(/page\-header\-(\w+)/);
            if (showHeaderTag && showHeaderTag[1] === 'none')
                pageInfo.headerText = false;

            if (!pageInfo.headerText === false)
                createPageHeaderIcon(dataView, page, header);


            if (!page.is('.app-page-modal') && pageInfo.headerText !== false)
                $('<div class="app-page-header-placeholder dv-heading" data-selector=".app-page-title"><span class="app-static-text app-page-title"><span class="app-text"></span></span></div>').appendTo(content);

            var formMax = dataView.tagged(/form-max-(\w+)/);
            if (formMax)
                pageInfo.page.attr('data-form-max', formMax[1]);

            layoutElem = createLayout(dataView, page.is('.app-page-modal') ? calcWidth(content) : _screen.width);

            statusBarDef = dataView.statusBar();
            if (statusBarDef) {
                statusBar = $div('app-status-bar').html(statusBarDef).appendTo(content);
                var segments = statusBar.find('li.Segment'),
                    zindex = segments.length + 10;
                segments.each(function (i) {
                    this.style.zIndex = zindex - i;
                });
                if (isTouchPointer)
                    statusBar.css('overflow-x', 'auto');
            }


            if (instruction && pageInfo.headerText === false) {
                var descList = $ul('app-list-instruction', 'data-role="listview"').appendTo(content);
                $li('app-list-instruction', 'data-role="list-divider"').appendTo(descList).html(instruction);
                descList.listview();
            }

            showActionButtonsSpec = dataView.tagged(/\baction-buttons-(\w+)\b/);
            if (showActionButtonsSpec) {
                showActionButtons = showActionButtonsSpec[1];
                showActionButtons = showActionButtons.charAt(0).toUpperCase() + showActionButtons.substring(1);
            }

            if (showActionButtons === 'TopAndBottom' || showActionButtons === 'Top')
                $div('app-bar-buttons').appendTo(content);

            layoutElem.appendTo(content);

            if (pageInfo.isModal && showActionButtons !== 'None')
                showActionButtons = 'Auto';
            else if (showActionButtons === 'Auto' && !allowButtonBar())
                showActionButtons = 'None';

            if (showActionButtons === 'Auto')
                formButtons = $div('app-bar-buttons').appendTo(touch.bar('create', { type: isReadingPaneDetail(page) ? 'header' : 'footer', page: page }));
            else {
                if (showActionButtons === 'TopAndBottom' || showActionButtons === 'Bottom') {
                    $div('app-bar-buttons').appendTo(content);
                }
                formButtons = content.find('.app-bar-buttons');
            }

            context = [];
            that.context(context);

            function createTabStrip() {
                touch.tabs('create', {
                    tabs: tabs, className: 'app-tabs-echo', scope: dataView.get_selectedKey(), change: function () {
                        //fetchEchos();
                    }
                });
            }

            // render context links for child views
            if (!inserting && !inlineEditor) {
                //taskAssistant(dataView, content);

                $(touch._pages).each(function () {
                    var p = this,
                        t, activator, echo,
                        childDataView = p.dataView,
                        filterSource = childDataView && childDataView._filterSource;
                    if (filterSource && filterSource === dataView._parentDataViewId && !childDataView._dataViewFieldName) {
                        activator = p.activator;
                        if (activator && activator.type === 'Tab') {
                            $(tabs).each(function () {
                                if (activator.text === this.text) {
                                    t = this;
                                    return false;
                                }
                            });
                            if (!t) {
                                if (tabbedContainer !== activator.container) {
                                    if (tabbedContainer) {
                                        createTabStrip();
                                        tabs = [];
                                    }
                                    tabbedContainer = activator.container;
                                }
                                t = { text: activator.text, content: [] };
                                tabs.push(t);
                            }
                        }
                        echo = echoCreate(p.id, content);
                        if (t)
                            t.content.push(echo);
                    }
                });
                if (tabbedContainer)
                    createTabStrip();
            }

            stub = $div('app-stub').appendTo(content);
            if (dataView.tagged('promo-none'))
                stub.addClass('app-hidden');
            //if (content.find('.app-echo').length)
            //    stub.height($mobile.getScreenHeight() * .6);
            that.stateChanged();


            // refresh app buttons
            that._reset = false;


            function syncView() {
                //if (statusBarDef && currentStatus.length) {
                //    statusWidth = currentStatus.outerWidth();
                //    statusLeft = currentStatus.offset().left;
                //    clientWidth = $window.width();
                //    if (sidebarIsVisible())
                //        clientWidth -= $('#app-sidebar').outerWidth();
                //    if (statusLeft + statusWidth + 20 > clientWidth)
                //        statusBar.scrollLeft(currentStatus.is('.Last') ?
                //            (statusLeft + statusWidth - clientWidth) + (currentStatus.outerWidth(true) - currentStatus.find('.Self').outerWidth()) :
                //            (statusLeft - (clientWidth - statusWidth) / 2));
                //}
                if (statusBar)
                    focusStatusBar(statusBar);
                resizeSignatures(content);
                touch.bar('show', formButtons);
                touch.refreshTitleState();
                touch.refreshAppButtons(context, { buttonBars: showActionButtons !== 'None' ? formButtons : [], layout: layoutElem, toolbar: false, dataView: dataView });
                //fetchOnDemand(200);
                //if (!isTouchPointer)
                //    whenPageShown(function () {
                //        inputFocus({ container: content });
                //    });
                //updateVScrollbar(content);
            }

            if (pageInfo.requiresInitCallback) {
                var pageIsInvisible = page.css('display') !== 'block';
                if (pageIsInvisible)
                    page.css({ 'display': 'block', 'z-index': -10 });
                //showHideBottomButtonBar();
                //adjustScrollableContainers(content);
                //if (tabs.length)
                //    resetPageHeight(page);
                dataView._unchangedRow = row.slice(0);

                if (showActionButtons !== 'None' && showActionButtons !== 'Auto')
                    touch.refreshAppButtons(context, { buttonBars: content.find('.app-bar-buttons'), toolbar: false, dataView: dataView });

                prepareLayout(dataView, row, layoutElem);
                evaluateConditionalStyleExpressions(dataView, row, layoutElem);

                if (dataView._isWizard)
                    wizard('start', { layout: layoutElem });
                syncEmbeddedViews(content);
                fitTabs(page);
                if (pageIsInvisible)
                    page.css({ 'display': '', 'z-index': '' });


                pageInfo.requiresInitCallback = false;
                isInTransition = false;
                pageInfo.initCallback = syncView;
                touch.navigate(pageInfo.id);
                //setTimeout(function () {
                //    mobile.changePage(pageInfo.id);
                //}, 300);
            }
            else
                syncView();
            //executeRefreshCallback(pageInfo);
        },
        layout: function (options) {
            if (!options)
                options = {};
            var dataView = this._dataView;
            var row = dataView.editRow();
            var layoutElem = findScrollable().find('[data-layout="form"]');
            dataView._unchangedRow = row.slice(0);
            prepareLayout(dataView, row, layoutElem);
            evaluateConditionalStyleExpressions(dataView, row, layoutElem);
        },
        collect: function () {
            var that = this,
                values = [], fv,
                dataView = that.dataView(),
                allFields = dataView._allFields,
                originalRow,
                inserting = that.inserting(),
                editRow;
            // if (dataView.get_view().Layout) {
            editRow = dataView.editRow();
            originalRow = dataView._originalRow;
            $(allFields).each(function (index) {
                var field = this,
                    fieldName = field.Name,
                    isPrimaryKey = field.IsPrimaryKey,
                    type = field.Type,
                    readOnly = field.ReadOnly,
                    newValue = editRow[index],
                    oldValue = originalRow[index],
                    modified, add;
                if (type !== 'DataView' && !field.OnDemand) {
                    if (newValue === undefined)
                        newValue = null;
                    if (oldValue === undefined)
                        oldValue = null;
                    if (type.match(/^Date/) && newValue != null && newValue !== oldValue)
                        newValue = new Date(newValue);
                    modified = newValue !== oldValue || /*inserting &&*/ newValue == null && !field.AllowNulls && !isPrimaryKey || inserting && newValue != null;
                    fv = { Name: fieldName };
                    if (modified && newValue != null) {
                        fv.NewValue = newValue;
                        add = true;
                    }
                    if (!inserting && oldValue != null) {
                        fv.OldValue = oldValue;
                        add = true;
                    }
                    if (modified) {
                        fv.Modified = modified;
                        add = true;
                    }
                    if (readOnly && !(isPrimaryKey && inserting) && (fieldName !== 'Status' || add))
                        fv.ReadOnly = true;
                    if (!add && isPrimaryKey && !readOnly) {
                        add = true;
                        fv.Modified = true;
                    }
                    if (add)
                        values.push(fv);
                }
            });
            return values;
        },
        stateChanged: function (updateContext) {
            var that = this,
                dataView = that.dataView(),
                content = that.content(),
                layoutElem = content.find('[data-layout]'),
                row;

            if (layoutElem.data('prepared')) {
                row = dataView.editRow();
                _input.evaluate({ dataView: dataView, row: row, container: layoutElem });
                _input.render({ container: layoutElem, dataView: dataView, row: row });
                observe(true, layoutElem);
                if (updateContext !== false) {
                    refreshContext(false, 0);
                    pageResized();
                    if (that.editing() && !isTouchPointer)
                        inputFocus({ container: layoutElem, lastFocused: 'auto' });
                }
            }
            else
                refreshContext();
        },
        context: function (list) {
            var that = this,
                dataView = that.dataView(),
                row = that.commandRow(),
                editing = that.editing(),
                scopes;
            if (!list.isSideBar/* && !sidebarIsVisible()*/)
                addSelectAction(dataView, list, row);
            if (!editing)
                enumerateSpecialActionContextOptions(dataView, list, row);
            scopes = [dataView._inlineEditor ? 'Row' : 'Form'];
            enumerateActions(scopes, dataView, list, row);
            barcodeContextItem(dataView, list);
            scopes = ['ActionBar', 'Context'];
            enumerateActions(scopes, dataView, list, row);
            dataView.clipboard('menu', { items: list, existingRow: true });
        }
    };

    /* mobile alerts and confirmations */

    _app.alert = function (message, callback) {
        return showConfirmation({ name: '_alert', message: message, /*icon: 'info-outline', */submit: callback, cancel: false });
    };

    _app.confirm = function (message, trueCallback, falseCallback) {
        return showConfirmation({ name: '_confirm', message: message, /*icon: 'help-outline', */submit: trueCallback, cancel: falseCallback || nop });
    };

    function showConfirmation(options) {
        var msg = options.message,
            survey = options.survey,
            message = msg != null ? msg.toString() : '',
            cancel = options.cancel,
            promise = $.Deferred();
        isBusy(false);
        whenPageShown(function () {
            var pageInfo = touch.pageInfo(),
                dataView = pageInfo.dataView;
            whenPageCanceled(function () {
                if (pageInfo._canceled)
                    promise.reject();
                else {
                    var survey = dataView && dataView.survey();
                    if (survey) {
                        var cancel = survey._cancel;
                        if (cancel === false)
                            cancel = survey._submit;
                        if (cancel)
                            if (cancel !== nop)
                                cancel();
                            else
                                promise.reject();
                        else
                            promise.resolve(dataView.data());
                    }
                }
            });
        });
        if (!survey)
            survey = {
                _submit: options.submit,
                //text: mobile.appName(),
                controller: options.name,
                questions: [{ name: 'msg__', value: message, text: false, readOnly: true, mode: 'note', rows: 3, htmlEncode: !message.match(_app._htmlTest) }],
                //tags: 'modal-fit-content modal-always modal-max-xxs promo-none modal-buttons-more-none',// + ' material-icon-' + options.icon,
                options: {
                    modal: {
                        fitContent: true,
                        always: true,
                        max: 'xxs',
                        buttons: {
                            more: false
                        }/*,
                    gapRequired: true*/
                    },
                    contentStub: false,
                    promo: false
                },
                layout: '<div data-container="panel"><span data-control="field" data-field="msg__" class="app-text-default">[Message]</span></div>'
            };
        survey._promise = promise;
        survey._cancel = cancel;
        survey.submit = 'alertconfirmed.app';
        survey.cancel = cancel !== false ? 'alertnotconfirmed.app' : cancel;
        _app.survey(survey);
        return promise;
    }

    $document.on('alertconfirmed.app alertnotconfirmed.app', function (e) {
        var dataView = e.rules.dataView(),
            survey = dataView.survey(),
            confirmed = e.type === 'alertconfirmed',
            callback = confirmed ? survey._submit : survey._cancel,
            promise = survey._promise;
        touch.pageInfo(dataView)._canceled = true;
        pageTransitions(false);
        whenPageShown(function () {
            pageTransitions(true);
            if (callback && callback !== nop)
                callback();
            else if (confirmed)
                promise.resolve(dataView.data());
            else
                promise.reject();

        });
    }).on('menuchanged.app', function (e) {
        menuNodes = menu.nodes = menu[menuId] = e.nodes;
        delete touch._menuStrip;
        $('.app-menu-strip').remove();
    });

    /* menu */

    menu = _web.Menu = { Nodes: {} };

    // empty stub components of the desktop menu
    _window.$nextTabIndex = _window.$closeHovers = nop;

    function buildHierarchyLinks(level, list, depth) {
        $(level).each(function () {
            var menuItem = this,
                href = menuItem.url,
                item = $li().appendTo(list).addClass('app-depth' + depth),
                hrefParts,
                target;
            if (href) {
                hrefParts = href.match(menuItemUrlRegex);
                if (hrefParts) {
                    href = hrefParts[2];
                    target = hrefParts[1];
                }
                $a().appendTo(item).data('node', menuItem).attr({ 'href': href, target: target, rel: 'external' }).text(menuItem.title);
            }
            else
                $span().appendTo(item).text(menuItem.title);
            if (menuItem.children)
                buildHierarchyLinks(menuItem.children, list, depth + 1);
        });
    }

    function initializeMainMenu() {
        $('#app-btn-context').on('vclick', function () {
            var contextButton = $(this);
            if (isBusy() || contextButton.data('skipClick'))
                return;
            callWithFeedback(contextButton, function () {
                if (($('.ui-panel-open').attr('id') || '').match(/^app-panel-context/))
                    closePopupsAndPanels();
                else {
                    closePopupsAndPanels(true);
                    var position = '';

                    if (isReadingPaneMaster() && _screen.splitLeft)
                        position = 'left'
                    else if (isReadingPaneDetail())
                        position = 'right'

                    touch.showContextMenu({ position: position, scope: position ? activeDataView() : null });
                }
            });
            return false;
        });

        $('[data-app-role="sitemap"]').attr('class', 'app-site-map').each(function () {
            var siteMap = $(this),
                list = $('<ul data-inset="false" />').appendTo(siteMap),
                isLoggedIn = membership && membership.loggedIn();

            function addLoginStatus() {
                var link = $('<li><a rel="external"/></li>').appendTo(list).find('a');
                if ($('#app-welcome').length && !isLoggedIn)
                    link.attr('href', '#app-welcome').text(resourcesMembershipBar.LoginButton);
                else
                    membership.loginStatus(link);
            }

            if (membership && !isLoggedIn)
                addLoginStatus();
            buildHierarchyLinks(menuNodes, list, 1);
            if (membership && isLoggedIn)
                addLoginStatus();
            list.listview().on('vclick', 'a[rel="external"]', function (event) {
                var link = $(event.target),
                    href = link.attr('href'),
                    hrefIsPageId = href.match(/^#/);
                if (!clickable(link))
                    return false;
                //if (!hrefIsPageId && !target)
                //    busyBeforeUnload();
                callWithFeedback(link, function () {
                    if (hrefIsPageId)
                        touch.changePage(href.substring(1));
                    else
                        menuItemNodeCallback(link.data('node'));
                });
                return false;
            }).filterable({ filterPlaceholder: resourcesMobile.Filter });
        });
    }

    /* membership bar */

    if (_membership) {

        $document.one('membershipinit.app', function (e) {
            membership = e.membership;
            // initialize global varaibles
            authenticationEnabled = membership.get_authenticationEnabled();
            displayMyAccount = membership.get_displayMyAccount();
            //loggedIn = that.loggedIn();
            //userName = membership.get_user();
        });


        _membership.prototype.updated = function () {
            membership = this;
            userActivity();
            if (this.get_idleTimeout())
                $document.on('awake.app', function () {
                    return !membership.idle();
                });
            membership.idleInterval(true);
            //if (mobile)
            //    this.mobileUpdated();
            $document.one('start.app', function () {
                membership._allowLoginInMenu = membership.get_displayLogin();
            });
            membership.loginStatus('a[data-app-role="loginstatus"]');
            $document.one('start.app', function () {
                if (!_app.AccountManager.enabled() && touch.returnUrl() && !isDedicatedLoginPage())
                    touch.showAccountManager(null);
            });
        };

        _membership.prototype._idle = function () {
            membership.idleInterval(false);
            signOut();
        };

        _membership.prototype.loginStatus = function (selector) {
            var that = this,
                loggedIn = that.loggedIn(),
                loginStatus = $(selector).text(loggedIn ? resourcesMembershipBar.LogoutLink : resourcesMembershipBar.LoginLink).on('vclick', function (e) {
                    callWithFeedback(loginStatus, function () {
                        if (loggedIn)
                            signOut();
                        else
                            that.showLogin();
                    });
                    return false;
                });
        };

        //_membership.prototype.mobileUpdated = function () {
        //    var that = this;
        //    $(document).one('start.app', function () {
        //        that._allowLoginInMenu = that.get_displayLogin();
        //    });
        //    this.loginStatus('a[data-app-role="loginstatus"]');
        //    if (!_app.AccountManager.enabled())
        //        $(document).one('start.app', function () {
        //            if (mobile.returnUrl() && !isDedicatedLoginPage())
        //                mobile.showAccountManager(null);
        //        });
        //};

        _membership.prototype.showLogin = function () {
            touch.showAccountManager(null, true);
        };
    }

    _app.Mobile = function () {
        var that = this;
        that._asyncJob = 0;
        that._pageMap = {};
        that._pages = [];
        that._modalDataViews = [];
        that._modalStack = [];
        that._pagesToDelete = [];
    };

    _app.Mobile.prototype = {
        settings: function (selector, value) {
            return $settings.apply(this, arguments);
        },
        appName: function () {
            var that = this;
            if (!that._appName)
                that._appName = touch._logo.text() || $('#PageHeaderBar').text() || $('head meta[name="application-name"]').attr('content');
            return that._appName;
        },
        height: function () {
            var height = _screen.height;
            if (navigator.userAgent.match(/Mobile.+Safari/) && !navigator.userAgent.match(/Chrome/))
                height += 60;
            return height;
        },
        propGrid: function (method, options) {
            _app.getScript('~/js/daf/touch-propgrid.[min].js', {
                also: '~/css/daf/touch-propgrid.[min].css',
                then: function () {
                    touch.propGrid(method, options);
                }
            });
        },
        treeView: function (method, options) {
            return new Promise(function (resolve, reject) {
                _app.getScript('~/js/daf/touch-treeview.[min].js', {
                    also: '~/css/daf/touch-treeview.[min].css',
                    then: function () {
                        touch.treeView(method, options, resolve, reject);
                    }
                });
            });
        },
        sideBar: function (method, options) {
            return new Promise(function (resolve, reject) {
                _app.getScript('~/js/daf/touch-sidebar.[min].js', {
                    also: '~/css/daf/touch-sidebar.[min].css',
                    then: function () {
                        touch.sideBar(method, options, resolve, reject);
                    }
                });
            });
        },
        studio: function (options) {
            var appStudioUrl = $settings('appStudio.url');
            if (appStudioUrl) {
                if (appStudioUrl.match(/^\:/))
                    appStudioUrl = 'http://localhost' + appStudioUrl;
            }
            return appStudioUrl;
        },
        device: virtualDevice,
        activePage: findActivePage,
        observe: function (enabled, container) {
            if (arguments.length === 1)
                return _observed[enabled];
            observe(enabled, container);
        },
        page: function (id) {
            if (!id)
                id = 'Main';
            var p = $('#' + id),
                before,
                pageInfo,
                stickyHeader,
                dataView,
                customClassName;
            if (!p.length) {
                p = $('<div data-role="page" id="' + id + '"><div data-role="content"></div></div>');
                if (uiAutomation())
                    p.addClass('app-ui-automation').toggleClass('app-ui-automation-debugging', $settings('ui.automation.debugging') === true);
                before = kiosk('get');
                pageInfo = getPageInfo((before ? p.insertBefore(before) : p.appendTo($body)).page());
                if (!before && $body.is('.app-is-kiosk'))
                    p.addClass('app-page-modal-above-kiosk');
                stickyHeader = $('<div class="app-bar-heading"><div class="app-bar-text"></div></div>').hide().appendTo(p);
                if (pageInfo) {
                    pageInfo.page = p;
                    pageInfo.stickyHeader = stickyHeader;
                    pageInfo.scrollable = createScroller(p).data('sticky-header', stickyHeader);
                    dataView = pageInfo.dataView;
                    if (dataView) {
                        customClassName = dataView.tagged(/\bclass\-name\-([\w\-_]+?)(\s|$)/);
                        if (customClassName)
                            p.addClass(customClassName[1]);
                        if (pageInfo.home && dataView.get_isForm() && !dataView._selectedKey.length)
                            stickyHeader.remove();
                    }
                }
            }
            return p;
        },
        readingPane: function (dataView, options) {
            var pageInfo = touch.pageInfo(dataView),
                page = pageInfo.page;
            if (options === true) {
                page.addClass('app-reading-pane-master app-transition-none app-page-modal-root');
                _readingPane.id = dataView._id;
                _readingPane.controller = dataView._controller;
            }
            else {
                page.removeClass('app-reading-pane-master app-transition-none');
                _readingPane.id = null;
                _readingPane.controller = null;
                _screen.toolbarWidth = null;
                _screen.splitLeft = null;
                _screen.splitRight = null;
                _screen.splitTop = null;
                _screen.splitBottom = null;
            }
            resetPageHeight(page);
        },
        makeModal: function (pageInfo) {
            if (pageInfo._madeModal)
                return;
            else
                pageInfo._madeModal = true;
            var page = pageInfo.page,// $('#' + pageInfo.id),
                dataView = pageInfo.dataView,
                isHomePage = pageInfo.home,
                isFullscreen,
                isReadingPane,
                isModal = false;

            if (dataView)
                if (!dataView._inlineEditor && dataView._parentDataViewId === _readingPane.id && dataView._controller === _readingPane.controller && (_screen.splitBottom || _screen.splitRight)) {
                    page.addClass('app-reading-pane-detail app-transition-none');
                    isModal = true;
                }
                else {
                    if (dataView.tagged('content-stub-none'))
                        page.addClass('app-content-stub-hidden');
                    var dock = dataView.tagged(/\bmodal-dock-(top|left|right|bottom)\b/);
                    if (dock && (dataView.tagged('modal-fit-content') || !$('.app-page-modal-background').filter(fnVisible).length))
                        page.addClass('app-page-modal-dock app-page-modal-dock-' + dock[1]);
                    //if (dataView.tagged('modal-gap-required'))
                    //    page.addClass('app-page-modal-gap-required');
                    if (dataView.tagged('modal-gap-none'))
                        page.addClass('app-page-modal-gap-none');
                    if (dataView.tagged('modal-fullscreen')) {
                        page.addClass('app-page-modal-fullscreen');
                        isFullscreen = true;
                    }
                    if (dataView.tagged('transition-none'))
                        page.addClass('app-transition-none');
                    if (dataView.tagged('modal-keyboard'))
                        page.addClass('app-modal-keyboard');
                    if (isHomePage) {
                        isReadingPane = dataView.pageProp('readingPane');
                        if (isReadingPane == null)
                            isReadingPane = dataView.tagged(/reading-pane-auto/);
                        if (isReadingPane && allowReadingPane() && !isHosted)
                            touch.readingPane(dataView, true);
                    }
                }

            if (!isHomePage && !isModal) {

                if ($('.app-page-modal-root').length/* || $('.app-page-modal-root,.ui-page-active.app-reading-pane-master').length && _screen.splitBottom*/)
                    isModal = true;
                else if (useFullscreenWhenSeeAll) {
                    dataView.tag('modal-never-' + dataView.get_viewId());
                    //pageInfo.headerText = false;
                    if (dataView.get_view().Label !== touch.title())
                        pageInfo.backText = touch.title();
                }
                else {
                    var modalWhen = dataView && dataView.tagged(/\bmodal-(never|always|(when-(tn|xxs|xs|sm|md|lg|xl|xxl)))\b/),
                        modalNeverId;
                    if (modalWhen) {
                        page.addClass('app-page-' + modalWhen[0]);
                        isModal = dataView._inlineEditor || modalWhen[1] === 'always' || !(modalWhen[1] === 'never' || _screen.width < toPhysicalWidth(modalWhen[3]));
                        if (!isModal && modalWhen[1] === 'never') {
                            modalNeverId = dataView.tagged(/\bmodal-never-(\w+)\b/);
                            if (modalNeverId && modalNeverId[1] !== dataView.get_viewId())
                                isModal = allowModal();
                        }
                    }
                    else {
                        isModal = dataView && allowModal();
                        pageInfo.backText = touch.title();
                    }
                }
                if (kiosk())
                    isModal = true;

            }

            if (isModal && !page.is('.app-page-modal')) {
                page.find('.app-page-header-fixed').remove();
                page.addClass('app-page-modal');
                if (!dataView || (!dataView.tagged('modal-title-none') && !isReadingPaneDetail(page))) {
                    var title = $div('app-page-modal-title', 'data-draggable="modaltitle"').insertBefore(findScrollable(page)/*.find('.ui-content .app-wrapper')*/),
                        buttonIndex = 3;
                    $span('app-text').appendTo(title);
                    $a('app-btn app-btn1 app-btn-search').appendTo(title).hide().attr('title', labelSearch);
                    // app-btn-4
                    $span('app-btn app-btn4 app-btn-close').appendTo(title).attr('title', labelClose);
                    // app-btn-3
                    if (!dataView || !dataView.tagged('modal-buttons-fullscreen-none')) {
                        var fullscreen = $span('app-btn app-btn-fullscreen app-btn' + buttonIndex--).appendTo(title).attr('title', isFullscreen ? resourcesMobile.ExitFullscreen : resourcesMobile.Fullscreen);
                        if (isFullscreen)
                            fullscreen.addClass('app-btn-fullscreen-exit');
                    }
                    // app-btn-2
                    if (!dataView || !dataView.tagged('modal-buttons-more-none'))
                        $span('app-btn-context app-btn ui-icon-dots app-btn' + buttonIndex).appendTo(title).attr('title', labelMore);
                }
                var modalMax = dataView && dataView.tagged(/\bmodal-max-(tn|xxs|xs|sm|md|lg|xl|xxl|any)\b/);
                if (modalMax)
                    page.addClass('app-page-' + modalMax[0]);
                var modalWidth = dataView && dataView.tagged(/\bmodal-width-(\d+)\b/);
                if (modalWidth)
                    page.data('modalWidth', parseInt(modalWidth[1]));
                if (dataView && dataView.tagged('modal-title-minimal'))
                    page.addClass('app-page-modal-title-minimal');
            }
            else if (!isModal && page.is('.app-page-modal')) {
                page.removeClass('app-page-modal').css({ left: '', top: '', width: '', minWidth: '', maxWidth: '', paddingTop: '' });
                page.find('.app-page-modal-title').remove();
                pageInfo.scrollable.css({ left: '', top: '', width: '', minWidth: '', maxWidth: '' });
            }

            if (!!pageInfo.isModal !== isModal) {
                pageInfo.isModal = isModal;
                //if (isModal) {
                //    var modalSize = dataView && dataView.tagged(/\bmodal\-(size\-(tn|xxs|xs|sm|md|lg|xl))\b/);
                //    if (modalSize)
                //        page.addClass('app-page-' + modalSize[0]);
                //}
                resetPageHeight(page);
            }
        },
        activeLink: function (elem, autoRemove) {
            if (!$($touch.activeClickedLink).is('.app-tab-active'))
                $touch.removeActiveLinkClass(true);
            if (elem) {
                var link = $(elem).closest('a,.ui-btn');
                if (link.length)
                    elem = link;
                if (!elem.is('.app-btn-static')) {
                    elem.addClass('ui-btn-active');
                    if (autoRemove == null || autoRemove)
                        $touch.activeClickedLink = elem;
                }
            }
        },
        blink: function (elem, callback) {
            activeLink(elem);
            setTimeout(function () {
                activeLink();
                setTimeout(function () {
                    activeLink(elem);
                    setTimeout(function () {
                        activeLink();
                        if (callback)
                            callback();
                    }, 200);
                }, 200);
            }, 200);
        },
        content: function (id) {
            var pageInfo = getPageInfo(id),
                p = pageInfo && pageInfo.page ? pageInfo.page : touch.page(id),// this.page(id),
                c = pageInfo && pageInfo.scrollable ? pageInfo.scrollable : findScrollable(p);//.find('.ui-content .app-wrapper').last();
            return c.length ? c : p.find('[data-role="content"]');
        },
        showContextPanel: function (context, id, options) {
            showContextPanel(context, '#' + id, options);
        },
        toggleContextPanel: function (id) {
            if (this.contextScope())
                id += '-scope';
            panelToggle($(id));
        },
        causesCalculate: function (value) {
            //if (arguments.length == 0)
            //    return calculateCausedBy.length ? calculateCausedBy[0] : null;
            //else if (value == false) {
            //    if (calculateCausedBy.length)
            //        calculateCausedBy.splice(0, 1);
            //    calculateLastCausedBy = null;
            //}
            //else
            //    calculateCausedBy.push(value);
        },
        pageVar: function (name, value) {
            if (arguments.length === 1)
                return pageVariable(name);
            pageVariable(name, value);
        },
        userVar: function (name, value) {
            if (arguments.length === 1)
                return userVariable(name);
            userVariable(name, value);
        },
        callWithFeedback: function (link, callback) {
            link = $(link);
            if (link && link.length)
                callWithFeedback(link, callback);
        },
        progress: function (method, options) {
            var screen = $('.app-progress-screen');
            if (!options)
                options = {};

            function show() {
                $body.addClass('app-has-progress-screen');
                if (!screen.length) {
                    screen = $('<div class="app-progress-screen"><div class="app-progress-text"></div><div class="app-progress-bar"><div class="app-progress-indicator"></div></div><div class="app-progress-content"></div></div>').appendTo($body);
                    screenChanged();
                }
                var text = screen.find('.app-progress-text'),
                    bar = screen.find('.app-progress-bar'),
                    indicator = bar.find('.app-progress-indicator'),
                    content = screen.find('.app-progress-content'),
                    progress = options.progress,
                    isMarquee = indicator.is('.app-progress-marquee');

                if (progress != null && isMarquee || progress == null && !isMarquee) {
                    var newIndicator = $div('app-progress-indicator').insertBefore(indicator);
                    indicator.remove();
                    indicator = newIndicator;
                }

                if (options.text)
                    text.text(options.text).show();
                else
                    text.hide();

                if (options.background != null)
                    screen.css({
                        'background-color': options.background,
                        'color': touch.invertColor(options.background, true)
                    });

                if (options.estimate != null) {
                    var estimateElem = screen.find('.app-progress-estimate').show();
                    if (!estimateElem.length)
                        estimateElem = $div('app-progress-estimate').appendTo(screen);
                    var estimate = options.estimate * (1 - options.progress) / 1000;
                    estimate = estimate < .5 ? '' : estimate < 60 ? resourcesMobile.RemainingSec.replace(/NNNN/, Math.ceil(estimate)) : resourcesMobile.RemainingMin.replace(/NNNN/, Math.ceil(estimate / 60));
                    estimateElem.text(estimate);


                    //    hideEstimate();
                    //    options.progress = 0;
                    //    var time = 0, progress = 0,
                    //        showTimeProgression = options.estimate === -1,
                    //        remaining = options.estimate / 1000,
                    //        estimate = screen.find('.app-progress-estimate').show();
                    //    if (!estimate.length)
                    //        estimate = $div('app-progress-estimate').appendTo(screen);
                    //    _progressEstimateInterval = setInterval(function () {
                    //        time++;
                    //        if (!showTimeProgression) {
                    //            progress = (time * 250) / options.estimate;
                    //            if (progress >= 1) {
                    //                progress = 1;
                    //                hideEstimate();
                    //            }
                    //            indicator.width(Math.floor(progress * 100) + '%');
                    //            remaining -= 0.25;
                    //            estimate.text(timeToText(remaining) + ' remaining...');
                    //        }
                    //        else
                    //            estimate.text(timeToText(time * 0.25) + '...');
                    //    }, 250);
                }
                //else
                //    hideEstimate();

                //if (options.accent != null)
                //    indicator.css('background-color', options.accent);

                if (progress != null)
                    indicator.css({ 'width': Math.floor(options.progress * 100) + '%', 'margin-left': '' });//.removeClass('app-progress-marquee');
                else
                    indicator.css({ 'width': '100%', 'margin-left': '-100%' }).addClass('app-progress-marquee');

                if (options.content === false)
                    content.empty();
                else if (options.content != null)
                    content.empty().append(options.content);
            }

            function hide() {
                screen.remove();
                $body.removeClass('app-has-progress-screen');
            }

            function timeToText(seconds) {
                var msg = '',
                    min = Math.floor(seconds / 60),
                    sec = seconds % 60;
                if (min > 0) {
                    msg += min + ' minute';
                    if (min > 1)
                        msg += 's';
                    msg += ' and ';
                }
                msg += Math.ceil(sec) + ' second';
                if (sec > 1)
                    msg += 's';
                return msg;
            }

            //function hideEstimate() {
            //    screen.find('.app-progress-estimate').hide();
            //    clearInterval(touch._progressEstimateInterval);
            //}

            switch (method) {
                case 'show':
                    show();
                    break;
                case 'hide':
                    hide();
                    break;
                default: // method === 'text'
                    screen.find('.app-progress-text').text(options.text);
                    break;
            }
            return screen;
        },
        invertColor: function (hex, bw) {
            // https://stackoverflow.com/a/35970186
            if (hex.indexOf('#') === 0)
                hex = hex.slice(1);
            // convert 3-digit hex to 6-digits.
            if (hex.length === 3)
                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
            if (hex.length !== 6)
                throw new Error('Invalid HEX color.');
            var r = parseInt(hex.slice(0, 2), 16),
                g = parseInt(hex.slice(2, 4), 16),
                b = parseInt(hex.slice(4, 6), 16);
            if (bw)
                // http://stackoverflow.com/a/3943023/112731
                return (r * 0.299 + g * 0.587 + b * 0.114) > 186
                    ? '#000000'
                    : '#FFFFFF';
            // invert color components
            r = (255 - r).toString(16);
            g = (255 - g).toString(16);
            b = (255 - b).toString(16);
            // pad each with zeros and return
            return "#" + padZero(r) + padZero(g) + padZero(b);
        },
        pageHeader: function (value) {
            var pageInfo = getPageInfo(value.id),
                headerText = [value.text];
            if (value.text2)
                headerText[1] = value.text2;
            if (pageInfo) {
                pageInfo.headerText = headerText;
                if (activePageIdentifier(pageInfo.id))
                    pageHeaderText(headerText);
            }
        },
        dataView: function () {
            var pageInfo = this.pageInfo();
            return pageInfo ? pageInfo.dataView : null;
        },
        layout: function (options) {
            ensureLayoutControls(options);
        },
        dblClick: function (elem) {
            var now = timeNow(),
                lastClicked = elem.data('clicked'),
                result; // last click
            result = lastClicked != null && (now - lastClicked < 500);
            elem.data('clicked', result ? null : now);
            return result;
        },
        pageInfo: function (value) {
            if (!value)
                value = activePageIdentifier();
            else
                if (value._id && value._controller)
                    value = value._id;
                else if (value.is != null && value.length != null)
                    value = value.attr('id') || '';
            if (typeof value == 'string')
                return this._pageMap[value];
            else
                if (!value)
                    return null;
                else {
                    this._pageMap[value.id] = value;
                    if (value.dataView && value.dataView._id)
                        this._pageMap[value.dataView._id] = value;
                    this._pages.push(value);
                    return value;
                }
        },
        vibrate: function (duration) {
            if (navigator.vibrate) {
                if (!duration)
                    duration = 50;
                navigator.vibrate(duration);
            }
        },
        isInTransition: function () {
            var args = arguments;
            if (args.length)
                isInTransition = args[0];
            else
                return !isPageReady || isInTransition;
        },
        uiAutomation: uiAutomation,
        summary: function (selector) {
            var argList = arguments;
            if (selector === 'refreshToolbar')
                echoRefreshToolbar(argList[1]);
            else if (selector === 'focus')
                echoFocus(argList[1]);
            else if (selector === 'fetch')
                fetchEchos();
            else
                return findEcho(selector);
        },
        scrollable: function (selector) {
            var scrollable = findScrollable(typeof selector == 'string' ? null : selector);
            if (typeof selector == 'string') {
                if (selector === 'refresh')
                    updateScrollbars(scrollable, false);
                else if (selector === 'focus')
                    focusScrollable(scrollable);
                else if (selector === 'scrollbar')
                    return scrollbarInfo;
            }
            return scrollable;
        },
        makeVisible: function (elem, scrollable, dataItem, scrollEvents) {
            makeVisible.apply(this, arguments);
        },
        scrollGrid: function (dataView, scrollLeft) {
            if (scrollLeft == true) {
                gridStyleChanged(dataView);
                scrollLeft = 0;
            }
            else
                dataView.session('scroll-left', scrollLeft);
            gridScrollStyle(dataView, -scrollLeft);
        },
        unloading: nop,
        refresh: function (cancel, delay, callback) {
            refreshContext(cancel, delay, callback);
        },
        refreshEchoToolbarWithDelay: function (dataView, echo) {
            echoRereshToolbarWithDelay(dataView, echo);
        },
        listPopup: function (options) {
            showListPopup(options);
        },
        cardPopup: function (options) {
            cardPopup(options);
        },
        busyIndicator: nop,
        viewStyle: function (dataViewId, viewStyle, key) {
            changeViewStyleWithFeedback(dataViewId, viewStyle, key);
        },
        bar: function (method, options) {
            var bar,
                actionBar,
                child;

            function positionHeader() {
                actionBar = bar.prevAll('.app-bar-actions');
                var modalHeader = actionBar.parent().find('.app-page-header-fixed');
                if (actionBar.is('.app-bar-actions') && actionBar.is(':visible')) {
                    var barTop = actionBar.position().top + actionBar.outerHeight();
                    bar.css('top', barTop);
                    modalHeader.css('top', barTop + bar.outerHeight() - 1).closest('.ui-page').addClass('app-has-header-bar');
                }
                else
                    bar.css('top', '');
            }

            function hideBarIfEmpty() {
                var empty = true;
                bar.children().each(function () {
                    if ($(this).css('display') !== 'none')
                        empty = false;
                });
                if (empty) {
                    bar.hide();
                    if (bar.is('.app-bar-footer'))
                        touch.promo().css('margin-bottom', '');
                    else
                        bar.parent().find('.app-page-header-fixed').closest('.ui-page').removeClass('app-has-header-bar');
                    doResetPageHeight();
                }
                else
                    bar.show();
            }

            function doResetPageHeight() {
                resetPageHeight(bar.closest('.ui-page'));
            }

            if (method === 'create') {
                var type = options.type,
                    page = options.page,
                    scrollable = findScrollable(page),// page.is('.ui-page') ? page.find('.ui-content .app-wrapper') : findScrollable($(page)),
                    scrollbar;
                bar = page.find('.app-bar-' + type);
                if (!bar.length) {
                    if (type === 'header') {
                        bar = $div('app-bar-header ui-header ui-bar-inherit ui-header-fixed').hide().insertBefore(scrollable);
                        positionHeader();
                    }
                    else if (type === 'footer') {
                        scrollbar = scrollable.next();
                        bar = $div('app-bar-footer ui-footer ui-bar-inherit ui-footer-fixed').hide().insertAfter(scrollbar.is('.app-vscrollbar') ? scrollbar : scrollable);
                    }
                }
                return bar;
            }
            else {
                child = options;
                if (!child || !child.length)
                    return;
                bar = child.parent();
                if (method === 'show') {
                    if (bar.is('.app-bar-header'))
                        positionHeader();
                    //else {
                    //    bar.css('opacity', 0);
                    //    setTimeout(function () {
                    //        bar.css('opacity', '');
                    //    });
                    //}
                    bar.show();
                    child.show();
                    //if (bar.is('.app-bar-footer')) {
                    //    promo = mobile.promo();
                    //    promo.css('margin-bottom', '').css('margin-bottom', cssUnitsToNumber(promo.css('margin-bottom')) + bar.outerHeight());
                    //}
                    doResetPageHeight();
                    fitTabs();
                }
                else if (method === 'hide') {
                    child.hide();
                    hideBarIfEmpty();
                }
                else if (method === 'remove') {
                    child.remove();
                    hideBarIfEmpty();
                }
            }
        },
        promo: function (value, tooltip, rotate) {
            var button = this._actionButton,
                isModalPage,
                pageFooter;
            function showButton() {
                if (button.is('.ui-disabled') || !($settings('ui.actions.promote')) || touch.edit._pending)
                    button.hide();
                else {
                    isModalPage = $('.ui-page-active').is('.app-page-modal');
                    var isVisible = button.is(':visible'),
                        movePromo = isPromoMovedWithNotification();
                    if (!isVisible) {
                        //button.one('transitionend', tapping);
                        if (notifyBar && notifyBar.is(':visible')) {
                            button.show();
                            movePromo = isPromoMovedWithNotification();
                            button.hide();
                        }
                        button.css({ 'margin-bottom': isModalPage ? 0 : '', transform: 'scale(.5)', transition: 'none' }).show();
                        setTimeout(function () {
                            button.css('transition', 'transform 200ms');
                            setTimeout(function () {
                                button.css('transform', '').one('transitionend', function () {
                                    button.css('transition', '');
                                    tapping();
                                });
                            });
                        });
                    }
                    button.css('margin-bottom', '');
                    var marginBottom = parseCss(button, 'margin-bottom');
                    if (movePromo)
                        marginBottom = parseCss(button, 'margin-bottom') + (notifyBar.is(':visible') ? notifyBar.outerHeight() : 0);
                    pageFooter = findActivePage('.app-bar-footer');
                    button.css({ 'margin-bottom': isModalPage ? 0 : marginBottom + (pageFooter.is(':visible') ? pageFooter.outerHeight() : 0) });
                    //if (!isVisible)
                    //    touch._promoTimeout = setTimeout(function () {
                    //        button.css('transform', 'none');
                    //    }, 50);
                }
            }
            //if (arguments.length)
            //    console.log(value);
            if (!arguments.length)
                return button;
            else if (typeof value == 'boolean') {
                if (value)
                    showButton();
                else {
                    clearTimeout(touch._promoTimeout);
                    if (button)
                        button.hide();
                }
                return button;
            }
            else if (typeof value == 'string') {
                button.find('.app-icon').remove();
                value = toMaterialIcon(value);
                materialIcon(value, button.attr({ 'title': tooltip, 'data-icon': value }));
                if (rotate)
                    button.find('i').css('transform', 'rotate(' + rotate + 'deg)');
                if (value.match(noPromoRegex)) {
                    button.hide().addClass('ui-disabled');
                    return false;
                }
                else {
                    button.removeClass('ui-disabled');
                    showButton();
                    return true;
                }
            }
        },
        toolbar: function (value) {
            var toolbar = this._toolbar;
            if (typeof value == 'boolean') {
                if (value)
                    toolbar.show();
                else
                    toolbar.hide();
            }
            //else if (typeof value == 'string') {
            //    //$('<span/>').text(value).appendTo(this._title.empty()); //      this._title.text(value);
            //}
            return toolbar;
        },
        stickyHeaderBar: function (selector) {
            var scrollable = findScrollable(selector);
            return scrollable.data('sticky-header') || $();
        },
        enumerateFields: function (dataView, context, fields, row) {
            // render fields
            var allFields = dataView._allFields,
                summaryOnly = fields == null;
            if (!row)
                row = dataView.commandRow();
            if (summaryOnly) {
                fields = [];
                $(allFields).each(function () {
                    if (this.ShowInSummary && !this.Hidden)
                        fields.push(this);
                });
            }
            else
                context.push({ text: dataView.get_view().Label, theme: 'a', isStatic: false, instruction: true });
            $(fields).each(function (index) {
                var field = allFields[this.AliasIndex],
                    headerText = field.HeaderText;
                v = row[field.Index],
                    t = v == null ? '' : field.TextMode === 2 ? htmlToText(v) : field.text(v);
                if (v != null || !index)
                    if (field.OnDemand) {
                        if (field.OnDemandStyle !== 1 && v && typeof v == 'string' && !v.match(/^null/))
                            context.push({ src: String.format('{0}blob.ashx?{1}=t|{2}{3}', dataView.resolveClientUrl(dataView.get_appRootPath()), field.OnDemandHandler, v, field.OnDemandStyle === 2 ? '&_nocrop' : ''), desc: headerText, display: 'before', isField: true });
                    }
                    else {
                        if (isNullOrEmpty(t))
                            t = nullValueInForms;
                        if (!summaryOnly && isPhoneField(field) && v)
                            context.push({ text: t, desc: headerText, href: 'tel:' + t, icon: 'phone', isField: true });
                        else if (!summaryOnly && isEmailField(field) && v)
                            context.push({ text: t, desc: headerText, href: 'mailto:' + t, icon: 'material-icon-email', isField: true });
                        else
                            context.push({ text: t, desc: headerText, isStatic: true, display: 'before', isField: true });
                    }
            });
            if (fields.length)
                context.push({});
        },
        infoView: function (dataView, standalone, row, pos) {
            var context = [],
                position = standalone ? 'left' : pos || '',
                map, allFields, fields, startIndex;
            if (!standalone)
                context.push({ text: resourcesMobile.Back, callback: backToContextPanel, icon: iconBack });
            while (dataView) {
                // create a list of fields that matches info bar
                startIndex = context.length;
                map = dataView.extension().itemMap();
                allFields = dataView._allFields;
                fields = [allFields[map.heading]];
                if (!standalone)
                    $(map.desc).each(function () {
                        fields.push(allFields[this]);
                    });
                // add extra fields that are not on the info bar
                $(dataView._fields).each(function () {
                    if (!this.Hidden && fields.indexOf(allFields[this.AliasIndex]) == -1)
                        fields.push(this);
                });
                this.enumerateFields(dataView, context, fields, row);
                //if (startIndex <= context.length - 2)
                //    context[startIndex + 1].theme = 'b';
                dataView = findDataViewMaster(dataView);
            }
            showContextPanel(context, '#app-panel-info-view' + (position ? '-standalone' : ''), { position: position, className: 'app-panel-info-view' });
        },
        deletePage: function (pageInfo) {
            if (typeof pageInfo == 'string')
                pageInfo = getPageInfo(pageInfo);
            var page = pageInfo.page,
                dataView = pageInfo.dataView,
                index,
                elementsToDelete, // do not remove - used the reading pane is disposed
                isReadingPane = page && isReadingPaneDetail(page);

            function destroyPage() {
                var scrollable = pageInfo.scrollable,
                    deleteList = touch.elementsToDelete;
                if (scrollable)
                    scrollable.removeData().off();
                if (page.parent().length)
                    page.page('destroy').remove().empty();
                if (deleteList && isReadingPane) {
                    delete touch.elementsToDelete;
                    // presently only the "temp" grid styles are being removed here
                    for (var i = 0; i < deleteList.length; i++)
                        deleteList[i].remove();
                }
                pageInfo.dataView = null;
                pageInfo.page = null;
                pageInfo.scrollable = null;
            }

            if (dataView) {
                if (isReadingPane)
                    elementsToDelete = touch.elementsToDelete = [];
                dataView.dispose();
            }
            if (page)
                if (isReadingPane && !page.is('.app-hidden')) {
                    touch[dataView._id + '_PendingPageDelete'] = destroyPage;
                    whenPageShown(function () {
                        //if (isReadingPaneDetail())
                        //    destroyPage();
                        //else
                        //    page.fadeOut(destroyPage);
                        if (!isReadingPaneDetail())
                            page.fadeOut(destroyPage);
                    });
                }
                else
                    destroyPage();
            else if (dataView)
                dataView.dispose();

            index = touch._modalDataViews.indexOf(pageInfo.id);
            if (index !== -1)
                touch._modalDataViews.splice(index, 1);
            index = touch._pages.indexOf(pageInfo);
            if (index !== -1)
                touch._pages.splice(index, 1);
            var stack = navigationStack('list');
            $(stack).each(function (index) {
                var entry = this;
                if (entry.hash === '#' + pageInfo.id) {
                    stack.splice(index, 1);
                    if (index < navigationStack('index'))
                        navigationHistory.activeIndex--;
                    return false;
                }
            });
            delete touch._pageMap[pageInfo.id];
        },
        garbageCollector: function (pageInfo) {
            var pagesToDelete = touch._pagesToDelete;
            if (arguments.length)
                pagesToDelete.push(pageInfo);
            else if (pagesToDelete.length)
                setTimeout(function () {
                    $(pagesToDelete).each(function () {
                        touch.deletePage(this);
                    });
                    pagesToDelete.splice(0, pagesToDelete.length);
                }, 32);
        },
        modalDataView: function (id, delayed) {
            var that = this;
            if (delayed !== false && that.busy())
                return;
            if (id)
                that.busy(true);
            if (delayed) {
                setTimeout(function () {
                    if (!activePageIdentifier(id))
                        that.modalDataView(id, false);
                });
            }
            if (!id) {
                $(that._modalStack).each(function () {
                    that.deletePage(this);
                    //mobile.garbageCollector(this);
                });
                that._modalStack = [];
            }
            else {
                var pageInfo = that.pageInfo(id);
                if (_pendingPageText) {
                    pageInfo.text = _pendingPageText;
                    _pendingPageText = null;
                }
                if (!pageInfo.dataView._lookupInfo) {
                    //if (!page.is('app-form-page'))
                    //    page.addClass('app-form-page');
                    pageInfo.dataView._isModal = true;
                }
                if (that._modalDataViews.indexOf(id) === -1)
                    that._modalDataViews.push(id);

                // NOTE: do not refresh context before the page is displayed. It will create an illusion of delay.
                //if (!isModalPage())
                //    refreshContext(false, false);
                that.changePage(id);
            }
        },
        unloadPage: function (page, activePage) {
            var that = this,
                pageInfo = that.pageInfo(page),
                index;
            function addToModalStack() {
                if (that._modalStack.indexOf(pageInfo) == -1)
                    that._modalStack.push(pageInfo);
            }
            if (pageInfo) {
                index = that._modalDataViews.indexOf(pageInfo.id);
                if (index >= 0) {
                    var dataView = pageInfo.dataView,
                        masterView = findDataView(dataView._parentDataViewId),
                        activePageInfo = that.pageInfo(activePage),
                        activePageIndex = activePageInfo ? that._modalDataViews.indexOf(activePageInfo.id) : -1;
                    if (activePageInfo && (masterView === activePageInfo.dataView || activePageInfo.home) || activePage.attr('id') === 'Main' || activePageIndex >= 0 && index > activePageIndex)
                        addToModalStack();
                }
                //else if (pageInfo.dynamic)
                //    addToModalStack();
            }
        },
        sidebar: function (method, options) {
            switch (method) {
                case 'toggle':
                    toggleSidebarState(options);
                    break;
                case 'defaultWidth':
                    return $settings('ui.sidebar.width') || 259;
            }
            return contextSidebar();
        },
        desktop: function () {
            return !isTouchPointer;
        },
        rowContext: function (uiElement, options) {
            showRowContext(uiElement, options);
        },
        animate: function () {
            return enablePanelAnimation();
        },
        clearHtmlSelection: function (delay) {
            clearHtmlSelection(delay);
        },
        tapping: function () {
            return tapping.apply(touch, arguments);
        },
        lastTouch: function () {
            if (arguments.length === 1)
                if (arguments[0] === true)
                    _lastTouch = _saveLastTouch;
                else {
                    _saveLastTouch = _lastTouch;
                    _lastTouch = null;
                }
            else
                return _lastTouch;
        },
        invokeInTargetPage: function (callback) {
            var direction,
                target,
                readingPageDetailIsActive;
            if (_screen.splitTop || _screen.splitLeft) {
                target = elementAt();
                readingPageDetailIsActive = isReadingPaneDetail();
                detailPane = target.closest('.app-reading-pane-detail');
                if (readingPageDetailIsActive && !detailPane.length && target.closest('.app-reading-pane-master,.app-sidebar,.app-bar-toolbar').length)
                    direction = -1;
                else if (!readingPageDetailIsActive && target.closest('.app-reading-pane-detail').length)
                    direction = 1;
            }
            if (direction) {
                $app.touch.pageTransitionCallback = callback;
                setTimeout(function () {
                    window.history.go(direction);
                });
            }
            else
                callback();
        },
        //positionEmbeddedDataView: function (elem) {
        //    eleme = $(elem);
        //    if (!elem.is('.app-echo'))
        //        elem = elem.closest('.app-echo');
        //    if (elem.length && elem.is('.app-echo-embedded'))
        //        ensureEmbeddedEchoHeight(elem, true);
        //},
        density: function () {
            return displayDensity();
        },
        dataFilter: function (dataView) {
            if (arguments[2] === false)
                clearDataFilter(dataView, arguments[3]);
            else
                applyDataFilter(dataView);
        },
        transitions: function (enable) {
            pageTransitions(enable);
        },
        sync: function (id) {
            dataViewSyncCallback(id);
        },
        syncEmbeddedViews: function (scrollable) {
            syncEmbeddedViews(scrollable);
        },
        animatedScroll: function (scrollable, scrollTop, callback) {
            animatedScroll(scrollable, scrollTop, callback);
        },
        scroll: function (scrollable, scrollTop) {
            scrollWrapper(scrollable, scrollTop);
        },
        configureFilter: function (options) {
            touch.contextScope(options.scope);
            configureFilter(options);
            touch.contextScope(null);
        },
        pointer: function (value) {
            return value ?
                (value === 'pen' ? _lastTouch && _lastTouch.pointer === 'pen' : value === touch.pointer()) :
                isTouchPointer ? 'touch' : 'mouse';
        },
        touched: function (elem, inflate) {
            if (!inflate)
                inflate = 2;
            if (elem.length) {
                var elemRect = getBoundingClientRect(elem),
                    p = touch.lastTouch();
                return elemRect.left - inflate <= p.x & p.x <= elemRect.right + inflate && elemRect.top - inflate <= p.y && p.y <= elemRect.bottom + inflate;
            }
        },
        toggleTooltip: function (button, expanded) {
            var tooltip = expanded ? labelMinimize : labelMaximize;
            if (button.attr('data-title')) {
                button.attr('data-title', tooltip);
                if (!isTouchPointer)
                    setTimeout(function () {
                        button.attr('title', tooltip).trigger('mouseenter', 10);
                    }, 50);
            }
            else
                button.attr('data-title', tooltip);

        },
        busy: function (value) {
            var that = this,
                glassPane, busyDV = that._busyDV;
            if (arguments.length === 1) {
                //if (value == false && that._busy == true)
                //    debugger
                isBool = typeof value == 'boolean';
                if (typeof value == 'boolean') {
                    that._busy = value;
                    glassPane = that._glassPane;
                    if (!glassPane)
                        glassPane = that._glassPane = $div('app-glass-pane');
                    if (value) {
                        if (!glassPane.is('.app-glass-pane-active'))
                            glassPane.addClass('app-glass-pane-active').appendTo($body)
                    }
                    else if (glassPane.parent().length)
                        glassPane.detach().removeClass('app-glass-pane-reject app-glass-pane-active');
                }
                else
                    if (value.progress) {
                        if (!busyDV) {
                            that._busyPh = $p();
                            busyDV = that._busyDV = $create(WebDataView, {}, null, null, $p().get(0));
                            busyDV._busy(true);
                        }
                    }
                    else if (busyDV) {
                        busyDV._busy(false);
                        $(busyDV._element).remove();
                        busyDV.dispose();
                        that._busyDV = null;
                    }
            }
            else
                return that._busy === true;
        },
        executeInContext: function (icon, text, path, testOnly) {
            var executeArguments = arguments;
            if (isBusy() && !testOnly)
                setTimeout(function () {
                    touch.executeInContext.apply(this, executeArguments);
                }, 50);
            else {
                var context = [];
                touch.navContext(context);
                if (executeArguments.length) {
                    var actions = [];
                    $(context).each(function () {
                        var action = this;
                        if (!path && (icon && action.icon === icon || !icon && action.text === text) || path && path === action.path) {
                            actions.push(action);
                            // if "add" or "edit" icon is specified then keep adding to the list until we have a scope != 'Grid'
                            if (executeArguments.length > 1 || (icon && !icon.match(/material-icon-(add|edit)/) || action.uiScope !== 'Grid'))
                                return false;
                        }
                    });
                    if (actions.length) {
                        var lastAction = actions[actions.length - 1];
                        if (testOnly)
                            return lastAction;
                        else
                            executeContextAction(lastAction);
                    }
                }
                else
                    $(context).each(function () {
                        var option = this;
                        if (option.text && option.icon !== 'dots' && !option.system && !option.isStatic) {
                            // execute the "default" action
                            if (testOnly)
                                return option;
                            else
                                executeContextAction(option);
                            return false;
                        }
                    });
            }
        },
        navigate: function (options) {
            if (typeof options == 'string') {
                if (options.match(/^#/))
                    options = options.substring(1);
                touch.changePage(options);
            }
            else if (options.id && $('#' + options.id).length) {
                $('#' + options.id).trigger('navigating.app');
                touch.changePage(options.id);
            }
            else if (options.href)
                loadInternalPage(options.href, options.transition);
        },
        changePage: function (id, changeHash) {
            if (!activePageIdentifier(id))
                isBusy(true);
            var activePage = findActivePage(),
                activePageInfo = activePage && touch.pageInfo(activePage.attr('id')),
                pageInfo = touch.pageInfo(id),
                navigatingEvent = $.Event('navigating.app');
            if (pageInfo) {
                if (pageInfo.navigating)
                    pageInfo.navigating = false;
                else {
                    if (pageInfo.page) {
                        pageInfo.page/* $('#' + id)*/.trigger(navigatingEvent);
                        if (navigatingEvent.isDefaultPrevented()) {
                            pageInfo.initialized = false;
                            pageInfo.navigating = true;
                        }
                    }
                }
            }
            transitionStatus(true);
            if (touch.pageInit(id)) {
                page = touch.page(id).css('padding-top', activePage.css('padding-top'));
                var defaultTransition = settings.pageTransition,
                    targetPageInfo = touch.pageInfo(id),
                    isHome = targetPageInfo.home,
                    transition = 'none',//isHome ? 'none' : (targetPageInfo.transition || defaultTransition),
                    dataUrl,
                    navEntry,
                    navInfo = targetPageInfo.navigateInfo;
                if (navInfo) {
                    targetPageInfo.navigateInfo = null;
                    $touch.navigate(navInfo.href, { transition: navInfo.transition });
                    navigationStack('last').hash = '#' + targetPageInfo.id;
                    return;
                }
                dataUrl = targetPageInfo.replaceUrl;
                if (activePageInfo && activePageInfo.deleted) {
                    _window.location.replace('#' + id);
                    whenPageShown(function () {
                        var dataView = activeDataView();
                        dataView._doneCallback = activePageInfo.dataView._doneCallback;
                        dataView._cancelCallback = activePageInfo.dataView._cancelCallback;
                        touch.deletePage(activePageInfo);
                        arrangeModalPages(findActivePage());
                    });
                }
                $touch.changePage('#' + id, {
                    changeHash: !(changeHash === false) && !isHome, transition: transition
                });
                navEntry = navigationStack('last');
                if (dataUrl) {
                    targetPageInfo.replaceUrl = null;
                    //dataUrl = $mobile.path.convertUrlToDataUrl(absUrl);
                    $('#' + id).attr('data-url', decodeURIComponent(dataUrl));
                    //if (navEntry.hash != '#advanced-search')
                    $touch.navigate.navigator.squash(dataUrl);
                    navEntry.url = decodeURIComponent($touch.path.makeUrlAbsolute(dataUrl, $touch.path.documentBase));
                }
                if (isHome) {
                    navEntry.transition = defaultTransition;
                    $touch.path.documentBase.hrefNoHash = $touch.path.documentBase.hrefNoSearch;
                    $touch.path.documentBase.href = $touch.path.documentBase.hrefNoSearch + $touch.path.documentBase.hash;
                }
            }
            touch.refreshAppButtons();
        },
        title: function () {
            return document.title;
        },
        navContext: function (context, childrenOnly) {
            var activePageInfo = touch.contextPageInfo(),
                dataView = activePageInfo && activePageInfo.dataView,
                activeExtension = dataView && dataView.extension(),
                frameworkContextItemCount, contextItemIndex;
            if (context.isMenu && canInstallApp())
                context.push({
                    text: resources.PWA.Install,
                    desc: touch.appName(),
                    system: true,
                    icon: 'material-icon-install_' + (isTouchPointer ? 'mobile' : 'desktop'),
                    toolbar: false,
                    callback: installApp
                }, {});
            //if (identityConfirmationRequested && touch._started)
            //    // add Exit button
            //    context.push({
            //        text: resourcesDevice.Exit,
            //        icon: 'material-icon-exit-to-app',
            //        toolbar: true,
            //        system: true,
            //        callback: exitToHost
            //    }, {});
            // enumerate data view context options
            if (activeExtension && !context.isKiosk) {
                if (!childrenOnly)
                    if (activeExtension)
                        activeExtension.context(context);
                if (activePageInfo.dataView._parentDataViewId) {
                    activePageInfo = touch.pageInfo(activePageInfo.dataView._parentDataViewId);
                    dataView = activePageInfo.dataView;
                }
            }
            else
                barcodeContextItem(dataView, context);
            if (context.isMenu) {
                if (context.length)
                    context.push({});
                if ($settingsEnabled('help.enabled') && !_window.location.pathname.match(/\/help(\/|$)/) && membership/* && !_app.host*/ && !appStudio()) {
                    if (!helpItem)
                        helpItem = {
                            text: resourcesMembershipBar.HelpLink, system: true, toolbar: false, icon: 'material-icon-help', callback: function () {
                                membership.help();
                            }
                        };
                    context.push(helpItem);
                }
            }
            if (shortcuts.list.length) {
                shortcuts.list.splice(0);
                shortcuts.keyCodes = {};
            }
            frameworkContextItemCount = context.length;
            $document.trigger($.Event('context.app', { context: context }));
            if (appStudio()) {
                contextItemIndex = context.length - 1;
                while (contextItemIndex >= frameworkContextItemCount)
                    if (!context[contextItemIndex--].studio)
                        context.splice(contextItemIndex + 1, 1);
            }
            $(context).each(function () {
                var shortcut = this.shortcut;
                if (shortcut) {
                    var shortcutObject = shortcuts.cache[shortcut],
                        mapOfWhich;//,
                    //key, keyList, i;
                    if (!shortcutObject) {
                        shortcutObject = createShortcutObject(shortcut);
                        shortcuts.cache[shortcut] = shortcutObject;
                    }
                    if (shortcutObject.which && !shortcut.invalid) {
                        mapOfWhich = shortcuts.keyCodes[shortcutObject.which];
                        if (!mapOfWhich)
                            mapOfWhich = shortcuts.keyCodes[shortcutObject.which] = [];
                        mapOfWhich.push(shortcutObject);
                        //shortcuts.keyCodes.push(shortcutObject.which);
                        shortcuts.list.push(shortcutObject);
                    }
                }
            });
            //    if (context.isMenu && isLocalHost() /* && !context.isSideBar && !context.isKiosk*/)
            //        context.push({
            //            text: resourcesDevelop.Tools,
            //            system: true,
            //            icon: false,
            //            toolbar: false,
            //            transition: true,
            //            callback: developerTools
            //        });
        },
        refreshAppButtons: function (context, options) {
            if (uiAutomation())
                return;
            if (!context) {
                var pageInfo = getPageInfo();
                if (!pageInfo || pageInfo.home || pageInfo.id === 'Main') {
                    context = [];
                    touch.navContext(context);
                    touch.refreshAppButtons(context, { toolbar: true });
                    touch.refreshMenuStrip();
                }
                return;
            }
            var title = touch._title,
                titleRight = Math.max(/*_screenWidth*/parseCss(touch._toolbar, 'width') / 2, title.offset().left + (title.is('.app-hidden') ? 0 : title.outerWidth() - 1)),
                btn, icon,
                contextButton = touch._contextButton,
                visibleButtons = [], numberOfVisibleButtons,
                icons = [], iconLabels = { search: labelSearch, user: userName, apps: resourcesMobile.Apps }, iconPath = {}, iconRotate = {},
                promoIcon, offlineIcon,
                usedIcons = [], actionBarIcons = [],
                hasCall, hasRefresh, hasEye, hasEmail, hasSearch,
                adv = activeDataView(),
                thisIsReadingPaneDetail = isReadingPaneDetail(),
                thisIsReadingPaneMaster = isReadingPaneMaster(),
                dataView = !options && thisIsReadingPaneDetail ? findDataView(adv._parentDataViewId) : (options && options.dataView || adv),
                formDataViewId = dataView ? thisIsReadingPaneMaster ? ($('.app-reading-pane-detail').attr('id') || adv && adv._id) : adv && adv._id : 'none',
                firstVisibleButton = 0, i,
                buttonBars = options && options.buttonBars || $('#' + formDataViewId + ' .app-bar-buttons'),
                layout = options && options.layout || $('#' + formDataViewId + ' [data-layout]'),
                toolbar = dataView && touch.content(dataView._id).prevAll('.app-bar-actions'),
                toolbarTitle, x1, x2, doesNotHaveActionBar,
                backTextElem = touch._backText,
                iconIndex;
            if (options && options.promo && dataView) {
                var modalTitle = getPageInfo(dataView).page.find('.app-page-modal-title').removeClass('app-has-btn1'); //$('#' + dataView._id + ' .app-page-modal-title .app-btn1').hide();
                doesNotHaveActionBar = !dataView || (!dataView.get_showActionBar() || dataView.get_isForm());
                $(context).each(function () {
                    var option = this;
                    icon = option.icon;
                    //var showOnToolbar = option.toolbar != false && icon != 'dots' && icon != 'back'; 
                    var showOnToolbar = option.toolbar !== false && icon && !icon.match(/more|back|undo/);
                    if (icon && ((doesNotHaveActionBar || option.uiScope === 'ActionBar' && (icon === 'material-icon-add' || icon === 'material-icon-edit')) || option.system && icon !== 'material-icon-info') /*&& !iconIsGlyph(icon)*/) {
                        if (icon === 'search') {
                            modalTitle.addClass('app-has-btn1');
                        }
                        else if ((icon.match(/^(refresh|phone|email|eye)$/) || showOnToolbar) && !dataView.get_isForm() && promoIcon !== 'material-icon-add') {
                            touch.promo(icon, option.text);
                            promoIcon = icon;
                        }
                    }
                });
                if (!promoIcon)
                    touch.promo(false);
            }
            if (!options || options.toolbar) {
                backTextElem.css('max-width', '');
                contextButton.attr('title', labelMore).removeClass('ui-icon-carat-u').addClass('ui-icon-dots');
                if (context.length)
                    contextButton.show();
                else {
                    //contextButton.hide();
                    //contextButtonIsVisible = false;
                }
                resetToolbarButtons();
                var btnWidth;
                touch._toolbarButtons.each(function () {
                    btn = $(this).removeClass('app-avatar app-btn-text').show();
                    if (!btnWidth)
                        btnWidth = btn.show()[0].offsetWidth;
                    if (btn.offset().left > titleRight - (isVirtualScreen() ? _screen.left : 0))
                        visibleButtons.push(btn);
                    btn.hide();
                });
                numberOfVisibleButtons = visibleButtons.length;
                if (numberOfVisibleButtons > 0) {
                    doesNotHaveActionBar = !dataView || (!dataView.get_showActionBar() || dataView.get_isForm());
                    $(context).each(function () {
                        var option = this;
                        icon = option.icon;
                        //var showOnToolbar = option.toolbar != false && icon != 'dots' && icon != 'back';
                        var showOnToolbar = option.toolbar !== false && icon && !icon.match(/more|back|undo/);
                        if (icon && ((doesNotHaveActionBar || option.uiScope === 'ActionBar' && (icon === 'material-icon-add' || icon === 'material-icon-edit')) || option.system && icon !== 'material-icon-info')/* && !iconIsGlyph(icon)*/) {
                            if (icon === 'search')
                                hasSearch = true;
                            else if (icon === 'refresh')
                                hasRefresh = true;
                            else if (icon === 'phone')
                                hasCall = true;
                            else if (icon === 'email')
                                hasEmail = true;
                            else if (icon === 'eye' && showOnToolbar)
                                hasEye = true;
                            else if (showOnToolbar && icons.indexOf(icon) === -1)
                                icons.push(icon);
                            else
                                icon = null;
                            if (icon && iconLabels[icon] == null) {
                                iconLabels['__' + icon] = actionToTooltip(option, false);
                                iconLabels[icon] = actionToTooltip(option) + (option.desc && option.descInTooltip !== false ? '\n' + option.desc : '');
                                if (option.rotate)
                                    iconRotate[icon] = option.rotate;
                                if (option.path)
                                    iconPath[icon] = option.path;
                                if (option.uiScope === 'ActionBar')
                                    actionBarIcons.push(icon);
                            }
                        }
                    });
                    if (hasEmail)
                        icons.push('email');
                    if (hasCall)
                        icons.push('phone');
                    if (hasEye)
                        icons.push('eye');
                    if (hasRefresh)
                        icons.push('refresh');
                    // figure the promo icon
                    else if (icons.length && (!dataView || !dataView.editing() && !(dataView.get_isForm() && allowButtonBar())) && $settings('ui.actions.promote') && !$('.app-reading-pane-detail:not(.app-hidden)').length) {
                        if (dataView) {
                            var dataViewPreferredIcon = dataView.get_isForm() ? 'material-icon-edit' : 'material-icon-add';
                            iconIndex = icons.indexOf(dataViewPreferredIcon);
                            if (iconIndex > 0) {
                                icons.splice(iconIndex, 1);
                                icons.unshift(dataViewPreferredIcon);
                            }
                        }
                        //promoIcon = icons[0];
                        $(icons).each(function (index) {
                            var icon = this;
                            if (!icon.match(noPromoRegex)) {
                                promoIcon = icon.toString();
                                return false;
                            }
                        });
                        if ((!dataView || /*!dataView._lookupInfo &&*/ !getPageInfo(dataView).loading && !dataView.get_searchOnStart() && !dataView._requiresContextRefresh) && touch.promo(promoIcon, iconLabels[promoIcon], iconRotate[promoIcon])) {
                            touch.promo().data('icon-list',
                                {
                                    icons: icons.slice().reverse(),
                                    labels: iconLabels
                                });
                            usedIcons.push(promoIcon);
                            icons.splice(icons.indexOf(promoIcon), 1);
                        }
                    }
                    else
                        touch.promo(false);
                    // figure the buttons that will be on the toolbar
                    if (hasSearch)
                        if (icons.length < numberOfVisibleButtons)
                            icons.push('search');
                        else
                            icons[numberOfVisibleButtons - 1] = 'search';
                    if (!isHosted) {
                        if (_screen.width >= toPhysicalWidth('md') || kiosk() || oauth2Request || deviceRequest) {
                            if (appIsOffline()) {
                                icons.push(offlineIcon = _app.odp.offline('icon'));
                                iconLabels[offlineIcon] = _app.odp.offline('tooltip');
                            }
                            if ($settings('ui.menu.apps.location') === 'toolbar')
                                icons.push('apps');
                            if (loggedIn)
                                icons.push('user');
                        }
                    }
                    while (actionBarIcons.length > 0) {
                        icon = actionBarIcons[0];
                        actionBarIcons.splice(0, 1);
                        if (icons.indexOf(icon) !== -1)
                            icons.splice(icons.indexOf(icon), 1);
                    }
                    if (icons.length < numberOfVisibleButtons)
                        firstVisibleButton = numberOfVisibleButtons - icons.length;
                    for (i = 0; i < firstVisibleButton; i++)
                        $(visibleButtons[i]).hide();
                    var firstAppButton;
                    while (i < numberOfVisibleButtons) {
                        btn = $(visibleButtons[i]);
                        icon = icons[i - firstVisibleButton];
                        btn.attr('data-title', iconLabels[icon])
                            .data('action-path', iconPath[icon])
                            .empty();
                        usedIcons.push(icon);
                        if (icon === 'user') {
                            var userLetters = _window._userLetters,
                                userName = _app.userName();
                            if (!userLetters)
                                _window._userLetters = userLetters = userNameToInitials(userName);
                            avatar(userName, $i('app-icon-avatar').text(userLetters).appendTo(btn.addClass('app-avatar').attr('title', userName)));
                        }
                        else {
                            materialIcon(toMaterialIcon(icon), btn);
                            if (iconRotate[icon])
                                btn.find('i').css('transform', 'rotate(' + iconRotate[icon] + 'deg)');

                        }
                        btn.data('icon', icon).show();
                        if (!firstAppButton) {
                            firstAppButton = true;
                            var backTextRect = getBoundingClientRect(backTextElem),
                                backTextRectLeft = backTextRect.left,
                                btnRect,
                                btnText;
                            if (backTextRectLeft) {
                                btnText = icon.match(/^(user|apps)$/) ? null : iconLabels['__' + icon] || iconLabels[icon];
                                if (!promoIcon && dataView && dataView.get_isForm() && !thisIsReadingPaneMaster && !thisIsReadingPaneDetail && btnText != null && btn.is(':visible') && !findActivePage('.app-bar-buttons').length)
                                    $($document[0].createTextNode(btnText)).appendTo(btn.addClass('app-btn-text'));
                                btnRect = getBoundingClientRect(btn);
                                if (backTextRect.right > btnRect.left - 12)
                                    backTextElem.css('max-width', btnRect.left - backTextRectLeft - 12);
                            }
                        }
                        i++;
                    }
                    touch._usedToolbarIcons = usedIcons.slice(0);
                }
            }
            if (buttonBars.length) {
                var firstBar,
                    buttons,
                    showTooltipAbove = $('#' + dataView._id).is('.app-page-modal-gap-none,.ui-page:not(.app-page-modal)');
                buttonBars.each(function () {
                    var bar = $(this),
                        button, moreButton,
                        cancelButtonIndex,
                        barRect,
                        buttonIcons = thisIsReadingPaneMaster || thisIsReadingPaneDetail || $settings('ui.actions.form.icons');

                    function addTooltip(button, tooltip) {
                        button.attr('title', tooltip);
                        if (showTooltipAbove)
                            button.attr('data-tooltip-location', 'above');
                        return button;
                    }

                    function createMoreButton() {
                        if (!moreButton)
                            moreButton = addTooltip($a('ui-btn ui-corner-all ui-mini app-btn-more app-btn-icon-notext', 'data-action-path="more"').html('&nbsp;'), labelMore).appendTo(bar);
                    }

                    if (bar.is(':visible')) {
                        bar.children(':not(.app-tools)').remove();
                        if (bar.closest('.app-reading-pane-detail').length)
                            materialIcon('material-icon-close', $span('app-btn-close').appendTo(bar).attr('data-title', labelClose));
                        if (firstBar)
                            bar.append(firstBar.html()).toggleClass('app-bar-buttons-md', firstBar.is('.app-bar-buttons-md'));
                        else {
                            firstBar = bar;
                            var formDataView = thisIsReadingPaneMaster && formDataViewId ? findDataView(formDataViewId) : dataView,
                                isWizard = formDataView && formDataView._isWizard,
                                formContext = context;
                            if (!buttons) {
                                buttons = [];
                                if (thisIsReadingPaneMaster) {
                                    formContext = []; // the context contains items of the master view - switch the context
                                    var saveScope = touch.contextScope();
                                    touch.contextScope(formDataViewId);
                                    touch.navContext(formContext);
                                    touch.contextScope(saveScope);
                                }
                                $(formContext).each(function () {
                                    var option = this,
                                        icon = option.icon;
                                    if (!option.system && icon !== 'dots' && option.text && option.uiScope === 'Form') {
                                        buttons.push(option);
                                        if (option.command === 'Cancel')
                                            cancelButtonIndex = buttons.length - 1;
                                    }
                                });
                            }
                            // reverse buttons
                            if (isWizard) {
                                buttons = buttons.reverse();
                                if (cancelButtonIndex != null)
                                    cancelButtonIndex = buttons.length - 1 - cancelButtonIndex;
                            }
                            barRect = getBoundingClientRect(bar);
                            if (!bar.closest('.app-reading-pane-detail-vertical').length)
                                barRect = { width: barRect.width - 8, right: barRect.right - 8 };
                            //barWidth = barRect.width;//bar.outerWidth(true) - parseCss(bar, 'padding-right');
                            //if (thisIsReadingPaneDetail)
                            //    barWidth -= bar.find('.app-btn-close').width() + 24;
                            if (isWizard) {
                                buttons.splice(0, 0,
                                    { text: resourcesMobile.Prev, path: 'wizard-prev'/*, buttonIcon: 'material-icon-chevron-left'*/ },
                                    { text: resourcesMobile.Next, path: 'wizard-next'/*, buttonIcon: 'material-icon-chevron-right'*/ });
                                if (cancelButtonIndex != null) {
                                    cancelButtonIndex += 2;
                                    cancelButton = buttons[cancelButtonIndex];
                                    buttons.splice(cancelButtonIndex, 1);
                                    if (barRect.width > 375)
                                        buttons.splice(0, 0, cancelButton);
                                }
                            }
                            $(buttons).each(function () {
                                var option = this,
                                    path = option.path,
                                    //icon = option.buttonIcon,
                                    button = $a('ui-btn ui-mini').text(option.text).attr('data-action-path', option.path).appendTo(bar),
                                    icon = option.icon;
                                if (option.shortcut || option.tooltip)
                                    addTooltip(button, actionToTooltip(option));
                                if (path && path.match(/^wizard/))
                                    button.addClass('app-btn-has-icon');
                                else if (icon && buttonIcons) {
                                    materialIcon(icon, button.addClass('app-has-icon'));
                                }
                                //if (icon)
                                //    materialIcon(icon, button);
                            });
                            if (isWizard)
                                wizard('status', { container: $('#' + formDataViewId), layout: layout });
                            if (!dataView.session('zoomed'))
                                bar.toggleClass('app-bar-buttons-md', barRect.width >= toPhysicalWidth('md'));
                            button = bar.find('.ui-btn').last();
                            if (thisIsReadingPaneMaster || thisIsReadingPaneDetail) {
                                createMoreButton();
                                button = moreButton;
                            }
                            if (button.length)
                                if (getBoundingClientRect(button).right > barRect.right) {
                                    bar.find('.ui-btn').css('min-width', '8em');
                                    if (getBoundingClientRect(button).right > barRect.right) {
                                        bar.find('.ui-btn').css('min-width', '4em');
                                        if (getBoundingClientRect(button).right > barRect.right && isWizard)
                                            bar.find('.app-btn-has-icon').addClass('app-btn-icon-notext');
                                        if (getBoundingClientRect(button).right > barRect.right) {
                                            createMoreButton();
                                            while (button.length && getBoundingClientRect(moreButton).right > barRect.right) {
                                                if (button !== moreButton && !button.is('.app-btn-close'))
                                                    button.hide();
                                                button = button.prev();
                                            }
                                        }
                                    }
                                }
                            if (dataView) {
                                //var forceReverse = $settings('ui.actions.reverse') == true;
                                //if ((!isWin || forceReverse || true) && !(isWizard || dataView._controller == 'MyProfile' && dataView._viewId.match(/^(pas|ide)/)) && ($settingsEnabled('ui.actions.autoReverse') || forceReverse)) {
                                if (reverseFormButtons(dataView)) {
                                    var tools = bar.find('.app-tools').detach();
                                    bar.append(bar.find('.ui-btn').get().reverse());
                                    if (tools.length)
                                        tools.insertBefore(bar.children().first());
                                }
                                bar.append(bar.find('.app-btn-more'));
                            }
                        }
                    }
                });
            }
            if (layout.length) {
                var layoutDataViews = {};
                layout.find('[data-control="action"]').each(function () {
                    var actionControl = $(this),
                        inputContainer = layout.attr('data-input-container'),
                        dataView, action, actionContainer;
                    dataView = layoutDataViews[inputContainer];
                    if (!dataView) {
                        dataView = findDataView(inputContainer);
                        layoutDataViews[inputContainer] = dataView;
                    }
                    if (dataView) {
                        action = dataView.findAction(actionControl.attr('data-action'));
                        //if (action)
                        //    actionControl.toggleClass('app-disabled', !dataView._isActionAvailable(action));
                        if (!action) {
                            actionControl.css('visibility', 'hidden');
                            actionContainer = actionControl.closest('[data-container="row"]');
                            if (actionContainer.length && !actionContainer.find('[data-control]').filter(function () { return $(this).css('visibility') !== 'hidden' }).length)
                                actionContainer.remove();
                        }
                    }
                });
            }
            while (usedIcons.length) {
                i = 0;
                if (usedIcons[0] === 'user' || usedIcons[0] === 'apps' || usedIcons[0] === offlineIcon)
                    usedIcons.splice(0, 1);
                else
                    while (i < context.length)
                        if (usedIcons.length && context[i].icon === usedIcons[0]) {
                            context.splice(i, 1);
                            usedIcons.splice(0, 1);
                        }
                        else
                            i++;
            }
            if ((!options || options.toolbar !== false || options.actionBar === true) && toolbar && toolbar.length) {
                toolbarTitle = toolbar.find('h3').next();
                x1 = Math.floor(toolbarTitle.offset().left) + toolbarTitle.outerWidth(true);
                x2 = Math.floor(toolbar.offset().left) + /*toolbar.outerWidth()*/calcWidth(toolbar) - 8;
                toolbar.data('selector').toggleClass('app-hidden', !dataView.get_showViewSelector() || appBars.left.visible && $settings('ui.sidebar.views.collapsed') === true);
                refreshToolbarButtons(dataView, toolbar.data('controls'), x1, x2, true, promoIcon);
            }
        },
        endModalState: function (dataView, contextDataView, callback) {
            if (isInTransition)
                return;
            isInTransition = true;
            var page = touch.page(contextDataView._id);
            goBack();
            //var dataViewPage = this.pageInfo(dataView),
            //    contextDataViewPage = this.pageInfo(contextDataView._id);
            //dataViewPage.refreshCallback = function () {
            //    _history.go(-1);
            //}
            //pageChangeCallback = function () {
            //    $mobile.navigate.history.clearForward();
            //    mobile.modalDataView();
            //    var parentDataView = dataView.get_parentDataView(),
            //        parentPageInfo;
            //    if (parentDataView) {
            //        parentPageInfo = mobile.pageInfo(parentDataView._id);
            //        parentPageInfo.echoChanged = true;
            //        if (!parentDataView.editing())
            //            parentPageInfo.initCallback = function () {
            //                parentDataView.sync();
            //            }
            //    }
            //    if (callback)
            //        if (dataViewPage.echoInitialized != null && dataViewPage.id != getActivePageId())
            //            dataViewPage.echoRefreshCallback = callback;
            //        else
            //            callback();
            //}
            //busyIndicator(true);
            //dataViewPage.requiresReturnCallback = true;
            //dataView.sync();
        },
        renderContext: function (listview, context, filter) {
            var lastItemIsSeparator = true,
                collapse,
                isSideBar = context.isSideBar,
                isMini = isSideBar && appBars.left.mini,
                itemsToCollapse, i,
                collapsedMap = {},
                selectedMenuItem;
            while (context.length && context[0].text === '$separator')
                context.splice(0, 1);
            context.forEach(function (option, optionIndex) {
                if (filter && !filter(this))
                    return;
                var text = option.text,
                    shortcut = option.shortcut,
                    count = option.count || shortcut,
                    originalIcon = toMaterialIcon(isMini && option.miniIcon || option.icon),
                    isMaterialIcon = iconIsMaterial(originalIcon),
                    icon = originalIcon === 'check' || isMaterialIcon ? 'false' : (originalIcon === 'ok' ? 'check' : originalIcon),
                    rotate = option.rotate,
                    href = option.href,
                    tooltip = option.tooltip,
                    desc = option.desc,
                    itemClassName = option.itemClassName,
                    item, link,
                    sidebarCollapse = option.sidebarCollapse,
                    depth = option.depth,
                    isSeparator = false,
                    separator;
                if (text === '$separator')
                    text = '';
                if (isSideBar && (appBars.left.mini && (!originalIcon && (text && !option.transition || option.src)) || option.sidebar === false) || option.hidden)
                    return;
                item = $li().attr({
                    'data-icon': !icon && option.pageTransition && !isMaterialIcon ? 'false' : icon//,
                    //'data-theme': option.theme || 'a'
                }).appendTo(listview);

                if (option.callback || option.dataRel || href) {
                    link = $a().appendTo(item)/*.text(text)*/.data('context-action', option);
                    if (isMini) {
                        link.html('&nbsp;').attr('title', text);
                        if (text && option.transition)
                            $span().text(text.substring(0, 1)).appendTo(link);
                    }
                    else
                        link.text(text);
                    if (href)
                        link.attr({ rel: 'external', href: href });
                    if (count && (!isSideBar && !isTouchPointer || !shortcut))
                        $span('ui-li-count').appendTo(link.addClass('ui-li-has-count')).html(count);
                    if (option.dataRel)
                        link.attr('data-rel', option.dataRel);
                    if (option.isField)
                        item.addClass('app-context-field');
                }
                else if (option.isStatic) {
                    item.html(text); //.find('a').attr('rel', 'external')
                    if (option.isField)
                        item.addClass('app-context-field');
                }
                else if (option.src)
                    _app.odp.blob('url', option.src).done(function (url) {
                        $htmlTag('img', 'ui-li-thumb').appendTo(item.addClass('ui-li-has-thumb')).attr({ src: url });
                    });
                else {
                    if (lastItemIsSeparator && optionIndex)
                        item.remove();
                    else {
                        separator = item.attr('data-role', 'list-divider').html(text);
                        if (!option.isStatic && text && option.instruction !== false)
                            separator.addClass('app-list-instruction');
                    }
                    lastItemIsSeparator = true;
                    isSeparator = true;
                }
                if (!isSeparator)
                    lastItemIsSeparator = false;
                if (desc && !isMini) {
                    var displayBefore = option.display === 'before',
                        para;
                    if (displayBefore)
                        $p('app-item-desc app-item-desc-before').insertBefore((link ? link : item).contents()).text(desc);
                    para = $p('app-item-desc').appendTo(link ? link : item).text(desc);
                    if (displayBefore)
                        para.addClass('app-item-desc-after');
                    if (tooltip === desc)
                        tooltip = null;
                }
                if (option.wrap)
                    item.addClass(option.callback ? 'app-wrap-text' : 'app-wrap');
                if (option.disabled)
                    item.addClass('ui-disabled');
                if (rotate)
                    itemClassName = (itemClassName || ' ') + ' app-icon-rotate' + rotate;
                if (itemClassName)
                    item.addClass(itemClassName);
                if (option.linkClassName)
                    link.addClass(option.linkClassName);
                if (option.keepOpen) {
                    link.addClass('app-keep-open');
                    if (!option.animate && !option.count)
                        link.addClass('app-btn-icon-transparent');
                }
                if (option.animate)
                    link.addClass('app-animated app-animation-spin');

                if (option.selected || originalIcon === 'check') {
                    //$(iconCheck).appendTo(link);
                    if (isSideBar)
                        link.addClass('app-option-selected');
                    else if (!depth)
                        materialIcon(/*option.radio && false ? 'material-icon-radio-button-checked' :*/ 'material-icon-check', link);
                    if (depth)
                        link.addClass('app-item-selected');
                    if (isMaterialIcon)
                        materialIcon(originalIcon, link);
                }
                else if (isMaterialIcon)
                    materialIcon(originalIcon, link);

                if (option.state)
                    link.addClass('app-selected');

                if (tooltip) {
                    link.attr('title', tooltip);
                    if (!itemClassName || !itemClassName.indexOf(/tile$/))
                        link.addClass('app-btn-tooltip');
                }

                if (sidebarCollapse && isSideBar) {
                    if (!collapsedMap[sidebarCollapse])
                        collapsedMap[sidebarCollapse] = [];
                    collapsedMap[sidebarCollapse].push(item);
                }
                var user = option.user;
                if (user)
                    avatar(user, $i('app-icon-avatar').appendTo(link.addClass('app-avatar')).text(userNameToInitials(user)));
                if (depth) {
                    if (option.selected)
                        selectedMenuItem = item;
                    item.addClass('app-has-depth');
                    link.addClass('app-depth' + depth);
                    var nextItem = context[optionIndex + 1];
                    if (nextItem && depth < nextItem.depth)
                        materialIcon('material-icon-expand-more', item.addClass('app-collapsible')).addClass('app-btn').attr('data-title', labelMaximize);
                    if (depth > 1 && menuAutoExpand !== 'all' && !(item === selectedMenuItem && item.find('.app-btn').length && menuAutoExpand === 'current'))
                        item.addClass('app-collapsed');
                }
                if (option.transition && !option.reverse || option.pageTransition)
                    materialIcon(isMini ? 'material-icon-navigate-next' : 'material-icon-chevron-right', link.addClass('app-group-actions'));
                if (option.popOut && !isMini)
                    materialIcon('material-icon-chevron-right', link);
                if (option.color)
                    $span('app-color-block').appendTo(link).css('background-color', option.color);
            });
            if (selectedMenuItem && (selectedMenuItem.is('.app-collapsed') || menuAutoExpand === 'current'))
                expandCollapseMenuItem(selectedMenuItem);
            for (collapse in collapsedMap) {
                itemsToCollapse = collapsedMap[collapse];
                if (itemsToCollapse.length > 4) {
                    for (i = 3; i < itemsToCollapse.length; i++)
                        itemsToCollapse[i].hide();
                    $a().appendTo($li('', 'data-icon="false" data-theme="a"').insertBefore(itemsToCollapse[3])).text('+' + (itemsToCollapse.length - 3) + ' ' + labelMore.toLowerCase()).data('context-action', {
                        callback: expandCollapsedItems
                    });
                }
            }
        },
        tabs: function (method, options) {

            if (!touch._initialized) {
                touch._initialized = true;
                $document.on('vclick', '.app-tabs .ui-btn', function (event) {
                    var link = $(event.target).closest('a'),
                        placeholder = link.closest('.app-tabs'),
                        options = placeholder.data('options'),
                        list = placeholder.find('ul'),
                        //activeLink = list.find('.app-tab-active'),
                        //scrollable = findScrollable(placeholder),
                        //stub = scrollable.find('.app-stub,.app-stub-main'),
                        //forceSelectedTab = arguments.length != 2 ? null : arguments[1].selectedTab,
                        forceSelectedTab = options.forceSelectedTab,
                        tabs = options.tabs,
                        text = options.selectedTab || options.forceSelectedTab || link.attr('data-text'),
                        activePage = findActivePage(),
                        activeTab,
                        skip,
                        context;

                    if (!_input.cancel()) return;

                    function makeMoreButtonActive() {
                        if (!list.find('.app-tab-active').is(':visible'))
                            list.find('.app-tab-more').addClass('ui-btn-active');
                    }

                    function doCallback() {
                        touch.stub('put');
                        _edit.detach(true);
                        update(placeholder);
                        makeMoreButtonActive();
                        if (activeTab.callback)
                            activeTab.callback();
                        if (options.change) {
                            touchScrolling = false;
                            options.change(activeTab);
                            fetchEchos();
                            if (options.restoreScrolling !== false)
                                restoreScrolling(activePage);
                        }
                        if (options.stickyHeader)
                            stickyHeader();
                        touch.stub('trim');
                    }

                    if (forceSelectedTab)
                        options.selectedTab = forceSelectedTab;
                    if (link.length)
                        if (!options.selectedTab && link.is('.app-tab-more')) {
                            var buttons = list.find('.ui-btn').removeClass('ui-btn-active');
                            callWithFeedback(link, function () {
                                link.addClass('ui-btn-active');
                                context = [];
                                $(options.tabs).each(function (index) {
                                    var t = this;
                                    if (!$(buttons[index]).data('hidden'))
                                        context.push({
                                            text: t.text, icon: t.active ? 'check' : false, wrap: true, context: { text: t.text, index: index }, linkClassName: 'app-btn-icon-transparent', callback: function (selection) {
                                                link.removeClass('ui-btn-active');
                                                options.selectedTab = selection.text;
                                                $(list.find('.ui-btn')[selection.index]).trigger('vclick');
                                            }
                                        });
                                });
                                showListPopup({
                                    items: context, anchor: link,
                                    afterclose: function () {
                                        setTimeout(function () {
                                            link.removeClass('ui-btn-active');
                                            list.find('.app-tab-active').addClass('ui-btn-active');
                                            makeMoreButtonActive();
                                        }, 50);

                                    }
                                });
                            });
                        }
                        else {
                            list.find('.ui-btn').removeClass('app-tab-active ui-btn-active');
                            link.addClass('app-tab-active ui-btn-active');
                            $(tabs).each(function () {
                                var t = this;
                                if (t.active) {
                                    if (text === t.text)
                                        skip = true;
                                    //$(t.content).each(function () {
                                    //    hiddenHeight += Math.ceil($(this).outerHeight(true));
                                    //});
                                }
                                t.active = t.text === text;
                                if (t.active)
                                    activeTab = t;
                            });

                            if (skip) {
                                options.selectedTab = null;
                                makeMoreButtonActive();
                                return;
                            }

                            if (options.scope === 'page')
                                pageVariable(options.id, text);
                            else if (options.scope === 'user')
                                userVariable(options.id, text);
                            else
                                persistedTab(options.scope, text);
                            //if (hiddenHeight && stub.length && stub.offset().top + stub.outerHeight() - hiddenHeight < scrollable.offset().top + scrollable.height())
                            //    stub.height(hiddenHeight + stub.outerHeight());
                            saveScrolling(activePage);
                            //update(placeholder);


                            if (options.selectedTab) {
                                options.selectedTab = null;
                                fit(placeholder);
                            }

                            //if (false && activeTab.content)
                            //    doCallback();
                            //else
                            //    setTimeout(function () {
                            //        doCallback();
                            //    });
                            //setTimeout(function () {
                            //    doCallback();
                            //});
                            //setTimeout(doCallback);
                            doCallback();
                        }
                    return false;
                });
            }

            function persistedTab(scope, value) {
                if (!scope || scope === 'page' || scope === 'user')
                    return null;

                var tabs = pageSessionVariable(options.id) || [],
                    tabInfo, tabInfoIndex;
                scope = scope.toString();

                $(tabs).each(function (index) {
                    var ti = this;
                    if (ti.oid === scope) {
                        tabInfo = ti;
                        tabInfoIndex = index;
                        return false;
                    }
                });

                if (arguments.length === 1)
                    return tabInfo ? tabInfo.tab : null;
                else {
                    if (tabInfo)
                        tabs.splice(tabInfoIndex, 1);
                    else
                        tabInfo = { oid: scope };
                    tabInfo.tab = value;
                    tabs.push(tabInfo);
                    if (tabs.length > 10)
                        tabs.splice(0, 1);
                    pageSessionVariable(options.id, tabs);
                }
            }

            function create() {
                var tabs = options.tabs,
                    scope = options.scope,
                    firstContentItem = options.placeholder || $((tabs[0].content || [])[0]),
                    placeholder = options.container || $div('app-tabs ui-header ui-bar-inherit').insertBefore(firstContentItem).addClass(options.className),
                    list = $ul().appendTo(placeholder),
                    activeTab = tabs[0].text;//,
                //selectedTab;



                $(tabs).each(function () {
                    var t = this;
                    if (t.active)
                        activeTab = t.text;
                    $(t.content).each(function () {
                        $(this).addClass('app-tab-content');
                    });
                });
                if (!options.id) {
                    options.id = firstContentItem.attr('id');
                    if (options.id)
                        options.id += '_tabs';
                }
                if (options.id) {
                    placeholder.attr('id', options.id);
                    activeTab = persistedTab(scope) || scope === 'page' && pageVariable(options.id) || scope === 'user' && userVariable(options.id) || activeTab;
                }

                if (!$(tabs).filter(function () { return this.text === activeTab; }).length)
                    activeTab = tabs[0].text;
                $(tabs).each(function (index) {
                    var t = this,
                        link = $a('ui-btn').appendTo($li().appendTo(list)).text(t.text).attr('data-text', t.text),
                        content = t.content,
                        hasVisibleContent;
                    t.active = t.text === activeTab;
                    if (t.active) {
                        // ensure that the contents of the tab are visible
                        if (index > 0) {
                            if (content && content.length && $(content[0]).is('[data-container="tab"]'))
                                content = content.children();
                            $(content).each(function () {
                                var style = this.style;
                                if (style && style.display !== 'none') {
                                    hasVisibleContent = true;
                                    return false;
                                }
                            });
                        }
                        if (!hasVisibleContent || !index)
                            link.addClass('ui-btn-active app-tab-active');
                        else {
                            activeTab = null;
                            t.active = false;
                        }
                    }
                });
                if (!activeTab) {
                    // force the first tab to be active
                    tabs[0].active = true;
                    list.find('.ui-btn').first().addClass('ui-btn-active app-tab-active');
                }

                options.forceSelectedTab = arguments.length !== 2 ? null : arguments[1].selectedTab;

                placeholder.data({ 'data-tabs': options.tabs, 'options': options });
                update(placeholder);
                fit(placeholder, false);
            }

            function destroy(placeholder) {
                if (!placeholder)
                    placeholder = options.container ? options.container.find('.app-tabs') : findScrollable().find('.app-tabs');//findActivePage('.ui-content .app-wrapper .app-tabs');
                placeholder.find('ul').off();
                placeholder.data({ 'data-tabs': null, options: null });//.remove();
            }

            function update(placeholder) {
                if (!placeholder)
                    placeholder = findScrollable().find('.app-tabs');//findActivePage('.ui-content .app-wrapper .app-tabs');
                $(placeholder).each(function () {
                    $($(this).data('data-tabs')).each(function () {
                        var t = this;
                        $(t.content).each(function () {
                            $(this).toggleClass('app-tab-active', t.active);
                        });
                    });
                });
            }

            function fit(placeholder, reset) {
                if (!placeholder)
                    placeholder = (options && options.page || findActivePage()).add($('.ui-page-active .app-bar-header.ui-header-fixed'));

                var tabs = placeholder.find('.app-tabs').addBack('.app-tabs');
                tabs.find('ul').css('visibility', '');

                tabs.each(function () {
                    var bar = $(this);
                    //if (bar.is('.ui-header-fixed'))
                    //    bar.css({ left: appBars.left.visible ? appBars.left.width + 1 : 0, width: 'auto', right: appBars.right.visible ? appBars.right.width + 1 : 0 });
                    var barWidth = bar.width(),
                        config = bar.data('data-tabs'),
                        barLeft = bar.offset().left + parseCss(bar, 'padding-left'),
                        buttons,
                        lastButton, btn,
                        lastVisibleTabIndex, activeTabIsHidden, visibleTabs;
                    if (barWidth || bar.data('dynamic')) {
                        bar.find('.app-tab-more').parent().remove();
                        buttons = bar.find('.ui-btn').css({ 'padding-left': '', 'padding-right': '', 'min-width': '', 'max-width': '', 'display': '' }).removeData('hidden');
                        // verify that content of each tab is visible
                        $(config).each(function (index) {
                            var t = this,
                                //isVisible = true,
                                hiddenContentCount = 0,
                                content = Array.isArray(t.content) ? ($(t.content).map(function () { return this.toArray(); })) : $(t.content), tabButton;
                            if (content.length === 1 && $(content[0]).is('[data-container="tab"]'))
                                content = $(t.content).children();
                            if (content.length) {
                                content.each(function () {
                                    var c = this,
                                        style = c.style;
                                    if (style && style.display === 'none')
                                        hiddenContentCount++; //isVisible = false;
                                });
                                if (/*!isVisible*/content.length === hiddenContentCount) {
                                    tabButton = $(buttons[index]);
                                    tabButton.css('display', 'none').data('hidden', true);
                                    if (tabButton.is('.app-tab-active'))
                                        activeTabIsHidden = true;
                                }
                            }
                        });
                        visibleTabs = buttons.filter(function () { return this.style.display !== 'none'; });
                        if (visibleTabs.length < 2) {
                            bar.css('display', 'none').data('dynamic', true);
                            if (activeTabIsHidden)
                                $(visibleTabs[0]).trigger('vclick');
                        }
                        else {
                            if (bar.css('display') === 'none') {
                                barWidth = bar.css('display', '').width();
                                barLeft = bar.offset().left + parseCss(bar, 'padding-left');
                                activeTabIsHidden = false;
                            }
                            bar.find('li').removeClass('app-first-child app-last-child');
                            $(visibleTabs[0]).parent().addClass('app-first-child');
                            lastButton = $(visibleTabs[visibleTabs.length - 1]).parent().addClass('app-last-child');
                            // try fitting the buttons on the tab strip
                            //lastButton = buttons.last();
                            if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                buttons.css('min-width', '8em');
                                if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                    buttons.css('min-width', '4em');
                                    if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                        buttons.css({ 'padding-left': '1em', 'padding-right': '1em' });
                                        if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                            buttons.css({ 'padding-left': '.5em', 'padding-right': '.5em' });
                                            if (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                                lastButton.parent().removeClass('app-last-child');
                                                lastButton = $a('ui-btn app-tab-more').appendTo($li('app-last-child').appendTo(lastButton.closest('ul'))).text(labelMore).css({ 'min-width': '4em', 'padding-left': '0.5em', 'padding-right': '0.5em' });
                                                lastVisibleTabIndex = buttons.length - 1;
                                                while (lastButton.offset().left - barLeft + lastButton.outerWidth() > barWidth) {
                                                    if (!lastVisibleTabIndex) {
                                                        $(buttons.get(0)).css('max-width', barWidth - lastButton.outerWidth() - 12);
                                                        break;
                                                    }
                                                    btn = $(buttons.get(lastVisibleTabIndex)).css('display', 'none');
                                                    if (btn.is('.app-tab-active'))
                                                        lastButton.addClass('ui-btn-active');

                                                    lastVisibleTabIndex--;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (activeTabIsHidden)
                                $(visibleTabs[0]).trigger('vclick');
                        }
                    }
                });
            }

            switch (method) {
                case 'create':
                    if (options.tabs && options.tabs.length > 1)
                        create(options);
                    break;
                case 'destroy':
                    destroy();
                    break;
                case 'fit':
                    fit();
                    break;
            }
        },
        refreshTitleState: function () {
            touch._title.toggleClass('app-hidden', touch._menuButton.is('.ui-icon-bars')/*menuStripIsVisible() || !mobile._menuButton.is('.ui-icon-bars')*/);
        },
        refreshMenuStrip: function () {
            var menuStripInfo = touch._menuStrip,
                menuStrip = menuStripInfo && menuStripInfo.strip,
                //title = this._title,
                logo = touch._logo,
                logoLeft = parseCss(logo, 'left'),
                logoRight = Math.round(logoLeft + logo.width('').outerWidth()),
                x1, x2,
                toolbar = touch._toolbar,
                leftMostButton = toolbar.find('.app-btn-cluster-right .ui-btn').filter(fnVisible).first(),
                menuAlign = $settings('ui.menu.align') || 'auto',
                menuTextAlign = menuAlign === 'auto' ? _web.Menu.nodeCount >= 3 ? 'center' : 'left' : menuAlign,
                menuWidth, menuMargin,
                rootNodes = menuNodes,
                list,
                itemLinks, moreItem, moreWidth, //moreLink, 
                stripWidth,
                showItems = $settings('ui.menu.location') === 'toolbar',
                item, link, itemLeft, itemWidth, i, n;
            if (menuAlign === 'auto')
                menuTextAlign = _web.Menu.nodeCount >= 3 ? 'center' : 'left';
            if (showItems && menuTextAlign === 'center') {
                menuWidth = calcWidth(toolbar);
                if (appBars.left.visible) {
                    if (appBars.left.mini) {
                        menuMargin = logoRight;
                        x1 = menuMargin;
                        x2 = menuWidth - menuMargin;
                    }
                    else {
                        var delta = (leftMostButton.length ? _screen.left + menuWidth - leftMostButton.offset().left : 0) + 16;
                        menuMargin = delta + appBars.left.width;
                        x1 = menuMargin;
                        x2 = menuWidth - delta;
                    }
                }
                else {
                    menuMargin = logoRight;
                    x1 = menuMargin;
                    x2 = menuWidth - menuMargin + 1;
                }
                x2 += _screen.left;
            }
            else {
                x1 = appBars.left.visible ? (appBars.left.mini ? logoRight : appBars.left.width) + 1 : logoRight;
                x2 = (leftMostButton.length ? leftMostButton.offset().left : calcWidth(toolbar)) - 16;
            }
            stripWidth = x2 - x1 - _screen.left;
            if (!menuStrip) {
                menuStripInfo = touch._menuStrip = { strip: $div('app-menu-strip').appendTo(toolbar) };
                menuStrip = menuStripInfo.strip;
                if (showItems) {
                    menuStrip.css('text-align', menuTextAlign)
                    list = $ul();
                    for (i = 0; i < rootNodes.length; i++) {
                        n = rootNodes[i];
                        item = $li().appendTo(list);
                        link = $a('ui-btn').toggleClass('app-is-link', !!showMenuLinksOnHover && !isNullOrEmpty(n.url)).appendTo(item).text(n.title).attr({ title: n.description }).data('data-node', n);
                        if (n.children)
                            link.addClass('app-has-children');
                        if (n.selected)
                            link.addClass('app-selected');
                    }

                    menuStripInfo.links = list.find('.ui-btn');
                    menuStripInfo.items = menuStripInfo.links.parent();
                    menuStripInfo.more = $a('ui-btn app-has-children').appendTo($li().appendTo(list)).text(labelMore);
                    list.appendTo(menuStrip);
                }
                else
                    menuStripInfo.title = $span('app-menu-strip-title').appendTo(menuStrip.addClass('app-menu-strip-has-title')).text(menu.currentNode ? menu.currentNode.title : document.title);
            }
            //if (titleIsHidden)
            //    title.addClass('app-hidden');
            //title.css('marginLeft', appBars.left.visible ? appBars.left.width : '');
            menuStrip.css('visibility', '');


            if (!showItems) {
                menuStrip.width(stripWidth).css({ left: x1 });
                updateMenuStripState(stripWidth >= 100);
            }
            else if (stripWidth !== menuStrip.data('tested-width') || !menuStrip.is(':visible')) {
                menuStrip.data('tested-width', stripWidth);
                if (_screen.width > 414 && stripWidth >= 200 && menuStrip.attr('data-enabled') !== 'false' && touch._menuButton.is('.ui-icon-bars')) {
                    menuStrip.removeClass('app-hidden');
                    updateMenuStripState(true);
                    menuStrip.width(stripWidth).css({ left: x1 });
                    itemLinks = menuStripInfo.items;
                    moreItem = menuStripInfo.more.removeClass('app-selected').parent();
                    moreLink = moreItem.find('.ui-btn').text(labelMore);
                    moreItem.hide();
                    itemLinks.show();
                    for (i = itemLinks.length - 1; i >= 0; i--) {
                        item = $(itemLinks[i]);
                        itemWidth = item.outerWidth();
                        itemLeft = item.offset().left;
                        if (itemLeft + itemWidth - 1 >= x2) {
                            moreItem.show();
                            moreWidth = moreItem.outerWidth();
                            item.hide();
                        }
                        if (item.is(':hidden') && item.find('.app-selected').length)
                            menuStripInfo.more.addClass('app-selected');
                        if (!moreItem.is(':visible') || moreItem.offset().left + moreWidth - 1 < x2) {
                            if (i <= 1 && !item.is(':visible'))
                                updateMenuStripState(false);
                            break;
                        }
                        else {
                            item.hide();
                            if (item.find('.app-selected').length)
                                menuStripInfo.more.addClass('app-selected');
                        }
                        if (i <= 1) {
                            updateMenuStripState(false);
                            //while (i-- >= 0)
                            //    $(itemLinks[i]).hide();
                            //moreLink.text(document.title);
                            //moreItem.css('background-color', 'transparent');
                            break;
                        }
                    }
                }
                else
                    updateMenuStripState(false);
            }
            if (logoRight > x2)
                logo.width(x2 - logoLeft);
        },
        refreshSideBar: function (context, newContext) {
            var //that = this,
                //content = contextSidebar().find('.ui-panel-inner'),
                pageInfo = getPageInfo(isReadingPaneDetail() ? activeDataView()._parentDataViewId : null),
                dataView = pageInfo && pageInfo.dataView,
                contextDataView = dataView,
                dataViewId = dataView && dataView._id,
                parentDataView = dataView && dataView.get_parentDataView(dataView),
                path = [],
                hasActionBar = dataView && dataView.get_showActionBar(),
                about = $('.TaskBox.About .Inner .Value, head meta[name="description"]'),
                showSummary = parentDataView && !parentDataView._parentDataViewId,
                requiresViewStyleSelector = dataView && dataView.get_isGrid(),
                extension = dataView && dataView.extension(),
                viewStyle = requiresViewStyleSelector && extension.viewStyle(),
                isGrid = viewStyle === 'Grid',
                isCards = viewStyle === 'Cards',
                isList = viewStyle === 'List',
                isMap = viewStyle === 'Map',
                styles = [],
                //sidebarEventOptions = { items: newContext },
                miniSideBar = appBars.left.mini,
                actionBarContext = [],
                forbiddenIcons = ['material-icon-undo', 'check', 'info'];

            function createViewStyleSelector() {
                requiresViewStyleSelector = false;
                var showStyles = $settingsEnabled('ui.sidebar.views.styles'),
                    showViews = $settingsEnabled('ui.sidebar.views.names');
                if (!extension.dataView().get_showViewSelector() || !(showStyles || showViews))
                    return;
                var viewContext = [],
                    isCollapsed = $settings('ui.sidebar.views.collapsed') === true,
                    dv = pageInfo.dataView,
                    viewLabel = dv.get_view().Label,
                    viewStyleLabel;//, viewStyleIcon;
                addListSeparator(newContext, false);
                //newContext.push({ text: resourcesPager.Refresh, icon: 'refresh', context: dv._id, callback: dataViewSyncCallback });
                //addSeparator(newContext);
                if (showViews && dv.get_showActionBar() && enumerateAvailableViews(viewContext, false, pageInfo, null, true) > 1) {
                    if (!(miniSideBar || isCollapsed)) {
                        $(viewContext).each(function () {
                            newContext.push(this);
                        });
                        newContext.push({});
                    }
                }
                var styleContext = [];
                if (!extension.tagged('view-style-grid-disabled'))
                    styleContext.push({
                        text: resourcesMobile.Grid, icon: 'grid', selected: isGrid, callback: function () {
                            if (!isGrid)
                                changeViewStyleWithFeedback(dataViewId, 'Grid');
                        }
                    });
                if (!extension.tagged('view-style-list-disabled'))
                    styleContext.push({
                        text: resourcesMobile.List, icon: 'bullets', selected: isList, callback: function () {
                            if (!isList)
                                changeViewStyleWithFeedback(dataViewId, 'List');
                        }
                    });
                if (!extension.tagged('view-style-cards-disabled'))
                    styleContext.push({
                        text: resourcesMobile.Cards, icon: 'cards', selected: isCards, callback: function () {
                            if (!isCards)
                                changeViewStyleWithFeedback(dataViewId, 'Cards');
                        }
                    });
                if (extension.tagged('supports-view-style-map') && !extension.tagged('view-style-map-disabled') && !appIsOffline())
                    styleContext.push({
                        text: resourcesMobile.Map, icon: 'location', selected: isMap, callback: function () {
                            if (!isMap)
                                changeViewStyleWithFeedback(dataViewId, 'Map');
                        }
                    });
                touch.presenter('enumerate', { id: dataViewId, list: styles });
                $(styles).each(function () {
                    var style = this;
                    if (!extension.tagged('view-style-' + style.name.toLowerCase() + '-disabled') && !appIsOffline()) {
                        if (style.name == viewStyle)
                            style.selected = true;
                        styleContext.push(style);
                    }
                });
                if (showStyles && styleContext.length > 1) {
                    if (isCollapsed)
                        $(styleContext).each(function () {
                            var style = this;
                            if (style.selected) {
                                //newContext.push({ text: style.text, icon: style.icon, popOut: true, callback: configureView });
                                viewStyleLabel = style.text;
                                viewStyleIcon = style.icon;
                                return false;
                            }
                        });
                    else {
                        $(styleContext).each(function () {
                            newContext.push(this);
                        });
                        addListSeparator(newContext, false);
                    }
                }
                if (isCollapsed) {
                    var rowCount = dv._totalRowCount > 0 ? ' (' + String.format('{0:N0}', dv._totalRowCount) + ')' : '';
                    newContext.push({ text: viewLabel + rowCount, desc: viewStyleLabel, icon: 'material-icon-folder-open', context: { position: 'left' }, popOut: true, itemClassName: 'app-view-selector', callback: configureView });
                }
            }

            function renderSidebarMenu(position) {
                if (!miniSideBar && $settings('ui.menu.location') === 'sidebar') {
                    if (($settings('ui.menu.position') || 'top') === position) {
                        if (newContext.length && newContext[newContext.length - 1].callback)
                            newContext.push({});
                        enumerateMenuItems(newContext, true, menuNodes, 1);
                    }
                    if (position === 'bottom' && !$settingsEnabled('ui.sidebar.toolbar') && settingsButtonIsEnabled/* $settingsEnabled('settings.enabled')*/)
                        newContext.push({}, { text: resourcesMobile.Settings, icon: 'material-icon-settings', transition: true, callback: configureSettingsStandalone });
                }
            }

            renderSidebarMenu('top');
            if (showSummary && !dataView.rowIsTemplate()) {
                while (dataView && path.indexOf(dataView) === -1) {
                    if (parentDataView && parentDataView._dataViewFieldName)
                        break;
                    if ((dataView.get_showInSummary() || parentDataView && dataView !== parentDataView && parentDataView.get_showInSummary()) && !dataView.inserting() && dataView.commandRow())
                        path.unshift(dataView);
                    if (dataView.get_isForm())
                        dataView = parentDataView;
                    dataView = findDataViewMaster(dataView);
                }
                var firstSummaryItemIndex = newContext.length;
                $(path).each(function () {
                    touch.enumerateFields(this, newContext);
                });
                if (newContext.length > firstSummaryItemIndex) {
                    dataView = path[path.length - 1];
                    var firstSummaryItem = newContext[firstSummaryItemIndex];
                    firstSummaryItem.icon = 'material-icon-chevron-right';
                    firstSummaryItem.miniIcon = 'material-icon-info';
                    firstSummaryItem.context = dataView._id;
                    firstSummaryItem.callback = showInfoView;
                    if (firstSummaryItemIndex)
                        newContext.splice(firstSummaryItemIndex, 0, {});

                    //newContext.push({
                    //    text: dataView.get_view().Label, icon: 'info', callback: function () {
                    //        mobile.infoView(dataView, true);
                    //    }
                    //});
                    newContext.push({});
                }
            }
            if (hasActionBar && contextDataView) {
                contextDataView.extension().context(actionBarContext, ['ActionBar']);
                $(actionBarContext).each(function () {
                    var option = this,
                        icon = option.icon;
                    if (option.uiScope === 'ActionBar' && icon && icon !== 'dots' && icon !== 'carat-r')
                        forbiddenIcons.push(icon);
                });
            }
            $(context).each(function () {
                var option = this;
                if (forbiddenIcons.indexOf(option.icon) === -1 && (!option.system || option.toolbar !== false) && option.command !== 'Select' && (option.icon !== 'eye' || parentDataView && !parentDataView.get_showInSummary())) {
                    if (option.text || newContext.length) {
                        if (option.navigateTo && requiresViewStyleSelector)
                            createViewStyleSelector();
                        option.theme = null;
                        if (option.uiScope !== 'ActionBar' || !hasActionBar)
                            newContext.push(option);
                    }
                }
            });
            if (requiresViewStyleSelector)
                createViewStyleSelector();
            renderSidebarMenu('bottom');
            if (about.length && showSummary !== false) {
                if (newContext.length && newContext[newContext.length - 1].text)
                    newContext.push({});
                newContext.push({ text: about.is('meta') ? about.attr('content') : about.html(), isStatic: true, wrap: true });
            }
        },
        contextPageInfo: function () {
            return getPageInfo(touch._contextScope);
        },
        refreshContext: function (cancel, delay, callback) {
            refreshContext.apply(touch, arguments);
        },
        resetUI: function () {
            var buttonBar = $('.ui-page-active .app-bar-buttons'),
                buttonBarHeight = buttonBar.outerHeight(),
                scrollable;
            refreshContext(false, 0, function () {
                resetPageHeight();
                updateMenuButtonStatus();
                if (buttonBar.length) {
                    scrollable = findScrollable();
                    scrollable.scrollTop(scrollable.scrollTop() + buttonBar.outerHeight() - buttonBarHeight);
                }
                stickyHeader();
            });
        },
        contextScope: function (value) {
            if (!arguments.length)
                return touch._contextScope;
            else {
                if (value && value._controller)
                    value = value._id;
                touch._contextScope = value;
            }
        },
        contextDataView: function (uiElement) {
            var echo,
                contextPageInfo,
                parentPage;
            if (uiElement != null) {
                echo = findEcho(uiElement);
                if (echo.length)
                    return findDataView(echo.attr('data-for'));
                else {
                    parentPage = uiElement.closest('.ui-page');
                    if (!parentPage.is('.ui-page-active') && isReadingPaneMaster(parentPage))
                        return findDataView(activeDataView()._parentDataViewId);
                }
            }
            contextPageInfo = touch.contextPageInfo();
            return contextPageInfo ? contextPageInfo.dataView : null;
        },
        showContextMenu: function (options) {
            if (!options)
                options = { scope: '' };
            var position = options.position || 'left',
                id = '#app-panel-context-' + position;
            if (options) {
                touch.contextScope(options.scope);
                if (options.scope) {
                    id += '-scope';
                    options.position = position;
                }
            }
            panelToggle(getContextPanel(id, function () {
                touch.refreshContextMenu(id);
            }, options));
        },
        refreshContextMenu: function (selector, context, listSelector) {
            var that = touch,
                panel = $(selector),
                targetListView = panel.find(listSelector || '.ui-listview'),
                listview = targetListView.length ? targetListView : panel.find('.ui-listview'),
                listviewHeight = listview.outerHeight(),
                listviewStub,
                isSideBar = panel.is('.app-sidebar'),
                contextMenuEvent;

            if (isSideBar && !panel.is(':visible')) {
                //that.refreshAppButtons();
                // If this code does not run, then the app buttons are not refreshed as useres move between virtual pages of a small screen.
                context = [];
                that.navContext(context);
                that.refreshAppButtons(context);
                that.refreshMenuStrip();
                return;
            }

            //if (isSideBar && !ie)
            //    panelCover = $div().appendTo($body).css({ 'z-index': 2000, 'position': 'absolute', left: 0, top: panel.find('.ui-panel-inner').offset().top, width: panel.outerWidth(), height: _screen.height, 'background-color': '#fff' });

            if (listviewHeight)
                listviewStub = $div().height(listviewHeight).insertAfter(listview);
            clearListView(listview);
            //listview.find('a').removeData();
            //listview.find('li').remove();

            if (!context) {
                context = [];
                context.isSideBar = isSideBar;
                context.isMenu = !isSideBar;
                context.isKiosk = kiosk('ontop');
                that.navContext(context);
            }

            if (isSideBar) {
                that.refreshAppButtons(context);
                var newContext = [], i = 0;
                that.refreshSideBar(context, newContext);
                context = newContext;
                context.isSideBar = true;
                if (appBars.left.visible && appBars.left.mini) {
                    var usedIcons = touch._usedToolbarIcons.slice();
                    while (i < context.length) {
                        var optionIcon = context[i].icon;
                        if (optionIcon) {
                            if (usedIcons.indexOf(optionIcon) !== -1) {
                                context.splice(i, 1);
                                while (i < context.length && !context[i].text) {
                                    context.splice(i, 1);
                                    if (i > 0)
                                        i--;
                                }
                            }
                            else {
                                usedIcons.push(optionIcon);
                                i++;
                            }
                        }
                        else
                            i++;
                    }
                }
            }

            var panelId = targetListView.data('panel'),
                panelInfo = panel.attr('id').match(/^app-panel-(\w+)/),
                panelType = isSideBar ? 'sidebar' : panelInfo && panelInfo[1];
            if (panelId && panelId.match(/^\#app-panel-/))
                panelId = panelId.substring(11);
            contextMenuEvent = $.Event('before' + panelType + 'panelshow.app');
            //contextMenuEvent.items = context;
            contextMenuEvent.panel = { type: panelType, id: panelId, items: context, elem: listview.parent() };
            $document.trigger(contextMenuEvent);

            // update context listview
            while (context.length && !context[context.length - 1].text && !context[context.length - 1].src)
                context.splice(context.length - 1);
            //if (!context.length && !isSideBar)
            //    context.push({ text: resourcesMobile.EmptyContext });

            that.renderContext(listview, context);
            if ((!isSideBar || !appBars.left.mini) && !listview.find('li').last().is('[data-role="list-divider"]'))
                $li('', 'data-role="list-divider"').appendTo(listview);

            listview.listview('refresh');


            // if (isSideBar || true)
            listview.find('.ui-btn-icon-right').removeClass('ui-btn-icon-right').addClass('ui-btn-icon-left');
            listview.find('li.app-wrap').addClass('ui-li-static').find('a').attr({ 'class': ''/*, 'rel': 'external'*/ });

            if (listview.prev().find('.app-focus').length)
                listview.find('.ui-btn').first().addClass('app-focus ui-btn-active');

            if (panel.is('.app-reset-scrolling'))
                panel.find('.ui-panel-inner').scrollTop(0);
            else
                restorePanelScrollTop(panel);

            if (listviewStub)
                listviewStub.remove();
            //if (panelCover)
            //    panelCover.remove();
            if (isSideBar)
                appBars.left.inner.trigger('scroll');
        },
        pageShown: function (callback) {
            whenPageShown(callback);
        },
        isWebView: function () {
            return iOS && !_window.navigator.standalone && !safari;
        },
        isHosted: function () {
            return isHosted;
        },
        screen: function (options) {
            if (options === 'resize') {
                closePopupsAndPanels(true);
                performWindowResize();
            }
            return _screen;
        },
        indicator: function (options) {
            var indicator = _app._busyIndicator,
                position;
            if (options === 'reset')
                position = true;
            else if (!indicator) {
                indicator = _app._busyIndicator = $div('dataview-busy-indicator').appendTo($body);
                position = true;
            }
            if (position && indicator)
                indicator.css({ left: _screen.left - _screen.width, top: _screen.top, width: _screen.width });
            return indicator;
        },
        kiosk: function () {
            return false; // non-functional stub 
        },
        toWidth: function (w) {
            return arguments.length ? (typeof w == 'string' ? toPhysicalWidth(w) : toLogicalWidth(w)) : screenBreakpoints;
        },
        mediaBreakpoints: function (selector) {
            return mediaBreakpoints(selector);
        },
        icon: function (icon, parent) {
            return materialIcon(toMaterialIcon(icon), parent);
        },
        openHref: function (href) {
            var args = {},
                hrefArgs = _app.urlArgs(href),
                propName;
            if (hrefArgs['_controller'] && $settings('navigation.dataController.enabled') === true) {
                args = {};
                for (propName in hrefArgs)
                    if (!propName.match(/^_/))
                        args[propName] = hrefArgs[propName];
                touch.show({
                    controller: hrefArgs['_controller'],
                    view: hrefArgs['_view'] || hrefArgs['_argument'],
                    startCommand: hrefArgs['_command'],
                    startArgument: hrefArgs['_argument'],
                    filter: args,
                    syncWith: hrefArgs['_syncWith']
                });
            }
            else
                return openHref(href);
        },
        syncData: function (pageInfo) {
            if (pageInfo) {
                var dataView = pageInfo.dataView;
                if (dataView)
                    performSyncKey(dataView);
            }
            findActivePage('.app-echo').filter(fnVisible).each(function () {
                var dataViewId = $(this).attr('data-for');
                performSyncKey(findDataView(dataViewId), true);
            });
        },
        notify: function (options) {

            function prefixNotificationWithDataViewFieldHeader(dataView, notification) {
                var filterSource = dataView._filterSource,
                    parent, master, dataViewField,
                    dataViewFieldParentId = dataView._dataViewFieldParentId;
                dataViewField = dataViewToField(dataView);
                if (!dataViewField && filterSource) {
                    master = findDataView(filterSource);
                    if (master) {
                        parent = dataView._dataViewFieldName ? dataView : dataView.get_parentDataView();
                        if (parent) {
                            dataViewField = master.findField(parent._dataViewFieldName);
                            if (!dataViewField) {
                                dataViewFieldParentId = parent._dataViewFieldParentId;
                                if (dataViewFieldParentId)
                                    dataViewField = findDataView(dataViewFieldParentId).findField(parent._dataViewFieldName);
                            }
                        }
                    }
                }
                if (dataViewField)
                    notification = dataViewField.HeaderText + ': ' + notification;
                return notification;
            }

            function create(dataView) {
                var lastArgs = dataView._lastArgs,
                    lastAction, actionPage, notification;
                if (lastArgs) {
                    lastAction = dataView.findAction(lastArgs.Path);
                    if (lastAction && lastAction.Notify) {
                        notification = lastAction.Notify;
                        if (notification)
                            if (notification === '$none')
                                notification = null;
                            else {
                                if (notification.match(/\{/))
                                    notification = dataView._parseText(notification, dataView.row());
                                else {
                                    actionPage = _app.touch.pageInfo(dataView);
                                    if (actionPage)
                                        notification += ' - ' + actionPage.text;
                                }
                                notification = prefixNotificationWithDataViewFieldHeader(dataView, notification);
                            }
                    }
                }
                return notification;
            }

            if (options != null) {
                if (notifyEnabled == null)
                    notifyEnabled = $settingsEnabled('ui.notify.enabled');

                if (options._controller)
                    return notifyEnabled ? create(options) : null;

                if (typeof options == 'number')
                    options = options.toString();
                else if (typeof options == 'object' && 'stack' in options) {
                    // stop the transition and indicate that the page is ready if an exception is passed as notification
                    isPageReady = true;
                    isInTransition = false;
                    options = { text: location.hostname === 'localhost' ? options.stack : options.message, duration: 60000 };
                }
                if (typeof options == 'string')
                    options = { text: options };
                else if (Array.isArray(options))
                    options = { text: options.join(', ') };
                if (options === false)
                    options = { text: false };
                var dataView = options.dataView;
                if (typeof options.text == 'number')
                    options.text = options.text.toString();

                var text = options.text;

                if (!notifyEnabled) {
                    if (options.force && text)
                        _app.alert(text);
                    return;
                }
                if (options.block) {
                    isPageReady = true;
                    touch.notify._force = false;
                }

                if (Array.isArray(text))
                    options.text = text = text.join(', ');
                if (dataView) {
                    options.dataView = null;
                    options.text = prefixNotificationWithDataViewFieldHeader(dataView, text);
                    dataView._pendingNotification = options;
                }
                else if (text === false || !isNullOrEmpty(text)) {
                    if (kiosk())
                        notifyQueue.splice(0);
                    if (options.force !== false)
                        options.force = touch.notify._force !== false;
                    notifyQueue.push(options);
                    setTimeout(touch.notify, 150);
                }
            }
            else {
                if (skipTap)
                    setTimeout(showNotification, 100);
                else
                    showNotification();
            }
        },
        stub: function (method, scrollable) {
            if (!scrollable)
                scrollable = findScrollable();
            if (scrollable.length && scrollable.scrollTop()) {
                var stub = scrollable.find('.app-stub,.app-stub-main'),
                    stubLength = stub.length;
                if (method === 'put') {
                    if (!stubLength) {
                        stub = $div().appendTo(scrollable).addClass('app-stub' + (activePageIdentifier('Main') ? '-main' : ''));
                    }
                    stub.height(stub.outerHeight() + scrollable[0].scrollHeight);
                }
                else if (stubLength) {
                    var stubRect = getBoundingClientRect(stub),
                        scrollableRect = getBoundingClientRect(scrollable);
                    if (stubRect.top > scrollableRect.bottom)
                        stub.height('');
                    else if (stubRect.bottom > scrollableRect.bottom)
                        stub.height(Math.round(scrollableRect.bottom - stubRect.top));
                }
            }
        },
        seeAll: function (options) {
            var dataView = options,
                dataViewField, dataViewFieldFilterSource,
                headerText = false, headerTextDataView;
            if (typeof dataView == 'string')
                dataView = findDataView(dataView);
            dataViewField = dataViewToField(dataView);
            if (dataViewField) {
                dataViewFieldFilterSource = findDataView(dataViewField._dataViewId)._filterSource;
                if (dataViewFieldFilterSource) {
                    headerTextDataView = findDataView(dataViewFieldFilterSource);
                    if (headerTextDataView.get_isForm())
                        headerTextDataView = headerTextDataView.get_parentDataView();
                    if (headerTextDataView)
                        headerText = headerTextDataView._dataText;
                }
            }
            touch.show({
                //id: dataView._id + '_all',
                controller: dataView._controller,
                view: dataView._viewId,
                _filter: dataView._filter || [],
                _externalFilter: dataView._externalFilter || [],
                sort: dataView.get_sortExpression(),
                headerText: headerText,
                useCase: 'seeAll',
                filterFields: dataView.get_filterFields(),
                filterSource: dataView.get_filterSource()
            });
        },
        details: function (options) {
            var field = options.field,
                dataView = field._dataView,
                aliasField = dataView._allFields[field.AliasIndex],
                row = dataView.editing() ? dataView.editRow() : dataView.commandRow(),
                key = options.key,
                headerText = aliasField.format(row[aliasField.Index]), valueList, valueIndex;
            key = key != null ? key : row[field.Index];
            if (field.ItemsTargetController) {
                $(field.DynamicItems || field.Items).each(function () {
                    var item = this;
                    if (item[0] == key) {
                        headerText = item[1];
                        return false;
                    }
                });
            }
            touch.show({
                controller: field.ItemsDataController,
                view: options.view || 'editForm1',
                filter: [{ name: field.ItemsDataValueField, value: key }],
                headerText: headerText != null ? headerText : aliasField.HeaderText,
                useCase: 'ObjectRef',
                done: function (lookupDataView) {
                    if (activePageIdentifier(dataView._id))
                        if (dataView.get_isForm()) {
                            if (!(lookupDataView._newRow && lookupDataView._newRow.length)) {
                                var values = _app.input.methods.lookup._rowToValues(field, lookupDataView, lookupDataView.editRow());
                                inputExecute({ dataView: dataView, values: values });
                            }
                            if (options.done)
                                options.done(lookupDataView);
                        }
                        else
                            dataView.sync();
                    else {
                        var currentDataView = activeDataView();
                        if (currentDataView && !currentDataView.get_isForm())
                            currentDataView.sync();
                    }
                },
                cancel: options.cancel
            });

        },
        syncWithOdp: function (dataView) {
            // switch "offline transaction root" to edit mode when possible
            var odp = dataView && dataView.odp;
            if (odp && odp.is(':dirty') && odp.root(dataView) && dataView.get_isForm() && !dataView.editing()) {
                isInTransition = true;
                touch.executeInContext(toMaterialIcon('edit'));
                isInTransition = false;
                pageResized();
            }
            return odp;
        },
        toDataView: function (child) {
            var echo = findEcho(child);
            if (echo.length)
                return findDataView(echo.data('for'));
            return activeDataView();
        },
        tooltip: function (options) {
            if (options === false)
                hideTooltip();
            else
                showTooltip(options.x, options.y, options.text, options.elem, options.autoHide === false);
        },
        lookup: function (options) {
            hideTooltip();

            if (options.field)
                saveLastFocusedField(options.field);
            if (options.create) {
                var field = options.field,
                    dataInput = options.dataInput,
                    value = options.value,
                    dataTextField = field.ItemsDataTextField,
                    lookupDataView = field._dataView;
                if (value == nullValueInForms)
                    value = null;
                touch.show({
                    controller: field.ItemsDataController, startCommand: 'New', startArgument: field.ItemsNewDataView, //headerText: String.format(resourcesLookup.NewToolTip, field._dataView._allFields[field.AliasIndex].HeaderText),
                    filter: lookupDataView.get_contextFilter(field, lookupDataView.extension().collect()),
                    defaultValues: value != null && dataTextField ? [{ name: dataTextField, value: value }] : null,
                    done: function (dataView) {
                        var editorDataView = field._dataView;
                        if (editorDataView._inlineEditor)
                            _edit.showField(editorDataView, field.Name); // restore the editor
                        var values = _input.methods.lookup._rowToValues(field, dataView, dataView.editRow()),
                            v = [];
                        $(values).each(function () {
                            v.push(this.value);
                        });
                        // ensure that the new value will be either auto-completed or inserted in the list of static items
                        var lastTestedIndex = 0,
                            lov = field.DynamicItems || field.Items,
                            testValue = v[1] ? v[1].toString().toLowerCase() : 'undefined';
                        if (field.ItemsStyle.match(/AutoComplete|Lookup/)) {
                            // reset cached lookup values
                            while (true) {
                                field._dataView.session(lovKey(field)/*field.Name + '_listOfValues_'*/ + testValue, null);
                                if (!testValue.length) break;
                                testValue = testValue.substring(0, testValue.length - 1);
                            }
                            clearFieldLookupCache(field);
                            //field._dataView.session(field.Name + '_listCache', null);
                            //field._dataView.sessionRemove(lovKey(field));
                        }
                        else {
                            // insert an item in the list
                            $(lov).each(function (index) {
                                if (this[0] == null || this[1].toString().toLowerCase() < testValue)
                                    lastTestedIndex = index;
                                else
                                    return false;
                            });
                            lov.splice(lastTestedIndex + 1, 0, v);
                        }
                        // set focus on the field
                        if (field.ItemsStyle.match(/AutoComplete|Lookup|DropDownList/)) {
                            _input.methods.lookup.focus(dataInput.data('autoComplete', false));
                            _input.methods.lookup._useItemValue(field, v);
                        }
                        else
                            _input.methods.listbox._useItemValue(field, v, true);
                    }
                });
                return;
            }

            var lastLookupDataView,
                //pageInfo = this.pageInfo(),
                lookupField = options.field,
                dataView = lookupField._dataView,
                //lookupFieldDataView = lookupField._dataView,
                filter = [],
                optionsFilter = createExternalFilter(dataView, lookupField, filter),//lookupFieldDataView.get_contextFilter(lookupField, lookupFieldDataView.extension().collect()),
                id,
                lookupPageInfo,
                query = options.query,
                aliasField = dataView._allFields[lookupField.AliasIndex],
                aliasFieldHeaderText = aliasField.HeaderText,
                pageHeaderText = aliasFieldHeaderText !== '&nbsp;' ? aliasFieldHeaderText : lookupField.AltHeaderText,
                row = dataView.editRow();

            revealStickyHeaderInstruction();

            if (!lookupField.ContextFields) {
                lastLookupDataView = touch._modalStack.length && touch._modalStack[0].dataView;
                if (lastLookupDataView && lastLookupDataView._lookupInfo && lastLookupDataView._lookupInfo.field == lookupField &&
                    (navigationStack('index') < navigationStack('length') - 1 && navigationStack('next').hash == '#' + lastLookupDataView._id)) {
                    lastLookupDataView._lookupInfo = options;
                    _history.go(1);
                    return;
                }
            }
            touch.modalDataView();
            id = lookupField.ItemsDataController.toLowerCase();
            if ($find(id))
                id += _msApp.getComponents().length;
            //if (query)
            //    pageVariable(id + '_' + (pageVariable(id + '_viewId') || lookupField.ItemsDataView || 'grid1') + '_filter', [String.format('_quickfind_:~%js%{0}', _msSys.Serialization.JavaScriptSerializer.serialize(query))]);
            var lookupFieldTags = lookupField.Tag || '';
            lookupDataView = $create(WebDataView, {
                id: id, baseUrl: dataView.get_baseUrl(), servicePath: dataView.get_servicePath(),
                controller: lookupField.ItemsDataController, viewId: lookupField.ItemsDataView,
                //externalFilter: lookupFieldDataView.get_contextFilter(lookupField, optionsFilter),
                externalFilter: optionsFilter,
                filter: filter,
                filterSource: optionsFilter.length > 0 ? 'options' : null,
                showSearchBar: true,
                tag: ((!$settingsEnabled('history.lookup.search') ? 'history-search-none' : '') + (findActivePage().is('.app-page-modal') && _screen.width <= toPhysicalWidth('sm') ? ' modal-fullscreen' : '')) + lookupFieldTags,
                showFirstLetters: lookupField.ItemsLetters,
                searchOnStart: lookupField.SearchOnStart,
                description: lookupField.ItemsDescription,
                lookupInfo: options
            }, null, null, $p()[0]);
            lookupPageInfo = touch.pageInfo(lookupDataView);
            if (query)
                lookupDataView.viewProp('quickFind', query);
            lookupPageInfo.headerText = options.value ? [options.text, pageHeaderText] : [pageHeaderText, resourcesMobile.LookupSelectAction];
            //lookupPageInfo.resolved = true;
            //lookupDataView._lookupInfo = options;
            if (options.value != null && !lookupField.ItemsValueSyncDisabled)
                requestDataViewSync(lookupDataView, [options.value]/*, false*/);
            lookupDataView._parentDataViewId = dataView._id;
            touch.modalDataView(lookupPageInfo.id, true);
        },
        show: function (options) {
            if (options.topics || options.questions)
                return showConfirmation({ name: '_form', survey: options, cancel: nop });

            var  //pageInfo = this.pageInfo(),
                controller = options.controller,
                view = options.view || 'grid1',
                id, //showSignature = JSON.stringify(options),
                dataView, pageInfo, //lastPage, lastPageDataView,
                //modalStack = touch._modalStack,
                parentDataView = activeDataView(),
                deferred = $.Deferred(),
                filter = options.filter,
                headerText = options.headerText;


            function doReject() {
                if (dataView._deferred)
                    if (parentDataView === activeDataView())
                        deferred.reject(dataView);
                    else
                        whenPageShown(doReject);
            }

            touch.modalDataView(); // clearn up the "forward" history

            //lastPage = modalStack.length && modalStack[modalStack.length - 1];
            //if (lastPage && lastPage.showSign === showSignature && options.cache !== false &&
            //    (navigationStack('index') < navigationStack('length') - 1 && navigationStack('next').hash === '#' + lastPage.id)) {
            //    lastPageDataView = findDataView(lastPage.id);
            //    if (!lastPageDataView || !lastPageDataView.odp && lastPageDataView._useCase !== 'seeAll') {
            //        _history.go(1);
            //        return deferred.promise();
            //    }
            //}

            revealStickyHeaderInstruction();

            if (filter) {
                if (!Array.isArray(filter)) {
                    var newFilter = [];
                    for (var key in filter)
                        newFilter.push({ Name: key, value: filter[key] }); // "value" is spelled in lower case on purpose
                    filter = newFilter;

                }
                filter.forEach(function (fv) {
                    if (fv.name) {
                        fv.Name = fv.name;
                        delete fv.name;
                    }
                    if ('value' in fv) {
                        fv.Value = '%js%' + JSON.stringify(fv.value);
                        delete fv.value;
                    }
                });
            }

            //touch.modalDataView();
            var loweredController = options.id || controller.toLowerCase(),
                index = 1;
            id = loweredController;
            while ($find(id))
                id = loweredController + index++;
            //if (query)
            //    pageVariable(id + '_' + (pageVariable(id + '_viewId') || lookupField.ItemsDataView || 'grid1') + '_filter', [String.format('_quickfind_:~%js%{0}', _msSys.Serialization.JavaScriptSerializer.serialize(query))]);
            dataView = $create(WebDataView, {
                id: id, baseUrl: appBaseUrl, servicePath: appServicePath,
                controller: controller, viewId: view,
                filter: options._filter || [],
                externalFilter: options._externalFilter || filter,
                sortExpression: options.sort,
                //filterSource: optionsFilter.length > 0 ? 'options' : null,
                showSearchBar: true,
                startCommandName: options.startCommand,
                startCommandArgument: options.startArgument,
                showActionButtons: options.showActionButtons,
                exitModalStateCommands: ['Cancel'],
                tag: options.tags,
                useCase: options.useCase,
                filterFields: options.filterFields,
                filterSource: options.filterSource
                //showFirstLetters: lookupField.ItemsLetters,
                //searchOnStart: lookupField.SearchOnStart,
                //description: lookupField.ItemsDescription
            }, null, null, $p()[0]);

            dataView._syncWith = options.syncWith;
            dataView._deferred = deferred;
            dataView._doneCallback = function (dataView) {
                //getPageInfo(dataView).showSign = null;
                goBack(function () {
                    if (options.done)
                        options.done(dataView);
                    deferred.resolve(dataView);
                });
            };
            if (parentDataView)
                dataView._parentDataViewId = parentDataView._id;

            var defaultValues = options.defaultValues;
            if (defaultValues) {
                if (!Array.isArray(defaultValues)) {
                    var defaultValueArrray = [];
                    for (var key in defaultValues)
                        defaultValueArrray.push({ name: key, value: defaultValues[key] });
                    defaultValues = defaultValueArrray;
                }
                dataView._ditto = defaultValues;
                dataView._defaultValues = defaultValues.slice(0);
            }


            dataView._cancelCallback = options.cancel || function (dataView) {
                goBack(doReject);
            };
            pageInfo = touch.pageInfo(dataView);
            if (typeof headerText == 'string')
                headerText = [headerText, ''];
            pageInfo.headerText = headerText;// options.value ? [options.text, pageHeaderText] : pageHeaderText;
            if (headerText)
                pageInfo.headerTextLocked = true;

            //pageInfo.showSign = showSignature;
            if (options.key) {
                //dataView._syncKey = [options.key];
                //dataView._selectedKey = [options.key];
                requestDataViewSync(dataView, [options.key]);
            }
            touch.modalDataView(pageInfo.id, true);
            return deferred.promise();
        },
        pageInit: function (id, indicateProgress) {
            var pageInfo = touch.pageInfo(id);
            if (pageInfo == null) return false;
            var dataView = pageInfo.dataView,
                initialized = pageInfo.initialized || (!pageInfo.dataView && pageInfo.initialized !== false);
            if (dataView && dataView._busy())
                return false;
            if (!pageInfo.initialized) {
                pageInfo.initialized = true;
                if (dataView) {
                    pageInfo.requiresInitCallback = true;
                    //if (indicateProgress != false)
                    //    busyIndicator(true);
                    if (pageInfo.refreshed === false) {
                        pageInfo.refreshed = true;
                        dataView.extension().refresh();
                    }
                    else {
                        dataView._loadPage();
                        //pageInfo.loading = true;
                        //$('<h1 class="app-page-loading"/>').appendTo(mobile.content(pageInfo.id)).text(loadingStatusText);
                    }
                }
            }
            return initialized;
        },
        pageShow: function (id) {
            if (!findActivePage())
                return;
            //findActivePage("[data-role='navbar'] a.app-tab-active").addClass("ui-btn-active");
            var pageInfo = touch.pageInfo(id);
            if (pageInfo == null)
                return;

            var dataView = pageInfo.dataView,
                extension = dataView ? dataView.extension() : null,
                stackIndex = touch._modalStack.indexOf(pageInfo);
            if (stackIndex >= 0)
                touch._modalStack.splice(stackIndex, 1);
            if (!pageInfo.initialized) {
                pageInfo.initialized = true;
                if (dataView)
                    dataView._loadPage();
            }
            if (extension && extension._reset)
                extension.refresh();
        },
        //screen: function () {
        //    var scrollTop = 0,//$mobile.window.scrollTop(),
        //        toolbarHeight = getToolbarHeight(),
        //        screenHeight = $mobile.getScreenHeight();
        //    return { top: scrollTop + toolbarHeight, bottom: scrollTop + $mobile.getScreenHeight(), height: screenHeight - toolbarHeight, width: _screen.width };

        //},
        callWhenVisible: function (selector, func) {
            var activePage = findActivePage(selector),
                elementList = typeof selector == 'string' ? activePage : selector;
            if (typeof selector == 'string' && selector.match(/^\.dv-load/) && isReadingPaneDetail())
                elementList = elementList.add('.app-reading-pane-master ' + selector);
            elementList.each(function () {
                var elem = $(this);
                if (elem.is(':visible') && elem[0].style.visibility !== 'hidden') {
                    var itemTop = elem.offset().top,
                        itemBottom = itemTop + elem.outerHeight(),
                        scroller = findScrollable(elem),
                        scrollerTop = scroller.offset().top,
                        scrollerBottom = scrollerTop + scroller.height() - 1;
                    if (scrollerTop <= itemTop && itemTop <= scrollerBottom || scrollerTop <= itemBottom && itemBottom <= scrollerBottom || itemTop <= scrollerTop && scrollerBottom <= itemBottom)
                        func(elem);
                }
            });
        },
        whenPageShown: function (callback) {
            whenPageShown(callback);
        },
        whenPageCanceled: function (callback) {
            whenPageCanceled(callback);
        },
        goBack: function (callback) {
            goBack(callback);
        },
        asyncJob: function () {
            return touch._asyncJob;
        },
        nextAsycJob: function () {
            return ++touch._asyncJob;
        },
        resetPageHeight: function () {
            resetPageHeight();
        },
        supports: function (feature) {
            switch (feature) {
                case 'Map':
                    return touch._supportsMap === true;
            }
            return false;
        },
        mapsApiKey: function () {
            var isLocalHost = !!_window.location.host.match(/^localhost\b/);
            return $settings('map.apiKey')/* settings.mapApiIdentifier*/ || (isLocalHost ? 'key=AIzaSyAhggwxCKiA2oEdxaRqap4t4-_96ajw_uw' : '');
        },
        registerAPI: function (name, callback) {
            var that = touch,
                url, isLocalHost, mapApiIdentifier, apiPromise = _apiLoadingPromises[name];

            if (apiPromise) {
                if (callback)
                    apiPromise.then(callback);
                return apiPromise.promise();
            }
            else {
                apiPromise = _apiLoadingPromises[name] = $.Deferred();
                apiPromise.then(callback);

                // register api
                if (name === 'Map') {
                    isLocalHost = !!_window.location.host.match(/^localhost\b/);
                    mapApiIdentifier = touch.mapsApiKey();
                    url = 'https://maps.googleapis.com/maps/api/js?&callback=appFactoryCallback';
                    if (mapApiIdentifier) {
                        url += '&' + mapApiIdentifier;
                        that._mapAPI = true;
                        _window.appFactoryCallback = function () {
                            that._supportsMap = true;
                            $document.trigger('map.init.app');
                            apiPromise.resolve();
                            _window.appFactoryCallback = null;
                        };
                        $.getScript(url);
                    }
                    else
                        apiPromise.resolve();
                }
                else if (name === 'Charts') {
                    touch.registerAPI('Map', function () {
                        $.getScript('https://www.google.com/jsapi', function () {
                            $.getScript('https://www.gstatic.com/charts/loader.js', function () {
                                that._chartsAPI = true;
                                $document.trigger('charts.init.app');
                                apiPromise.resolve();
                            });
                        });
                    });
                }

                return apiPromise.promise();
            }
        },
        fetchOnDemand: function () {
            if (!touchScrolling) {
                //var dataView = activeDataView();
                //if (dataView && dataView._calcNotify)
                //    dataView.extension().calcNotify();
                touch.callWhenVisible('.dv-load-at-bottom', buttonVClick);
                touch.callWhenVisible('.dv-load-at-top', buttonVClick);
            }
            return touch;
        },
        calendar: function (method, options) {
            var container = $('.app-calendar-plugin-container');
            if (container.length)
                switch (method) {
                    case 'keepOpen':
                        container.removeClass('app-visible app-hidden');
                        container.addClass(container.is(':visible') ? 'app-visible' : 'app-hidden');
                        clearTimeout(_window._keepCalOpenTimeout);
                        _window._keepCalOpenTimeout = setTimeout(function () {
                            container.removeClass('app-visible app-hidden');
                        }, options || 100);
                        break;
                    case ':visible':
                        return container.is(method);
                }
            return container;
        },
        callInAnimationFrame: function (callback) {
            if (requestAnimationFrame)
                var id = requestAnimationFrame(function () {
                    callback();
                    cancelAnimationFrame(id);
                });
            else
                callback();
        },
        stickyHeader: function (selector) {
            if (uiAutomation())
                return;
            var that = touch,
                hideInstruction = _window._stickyHeaderHideInstruction;
            _window._stickyHeaderHideInstruction = false;
            //requestAnimationFrame(function () {
            var scrollable = findScrollable(selector),
                page = scrollable.closest('.ui-page'),
                heading = stickyHeaderTemplate(page),
                textSelector = heading.attr('data-selector'),
                headingText = textSelector ? page.find(textSelector) : heading.find('.app-static-text'),
                stickyHeaderElement = stickyHeaderBar(selector),
                appBarText, //appBarLabel,
                doHide = true;
            if (!stickyHeaderElement || !stickyHeaderElement.length || !page.is('.ui-page-active') && !isReadingPaneMaster(page))
                return;
            if (!isInTransition && (headingText.length || textSelector)) {
                var isModal = page.is('.app-page-modal'),
                    scrollableOffsetY = parseCss(scrollable, 'top')/* + (isModal ? parseCss(page, 'top') + 1 : 0)*/,
                    headingTop = Math.ceil(headingText.length ? headingText.offset().top + (selector ? 1 : 0) : -1),
                    barText, /*barLabel, */barHtml;
                if (headingTop < scrollableOffsetY && (textSelector || headingText.height() > 0))
                    if (stickyHeaderElement.is(':visible') && stickyHeaderElement.data('screen-width') == _screen.width)
                        doHide = false;
                    else {
                        doHide = false;
                        if (isModal) {
                            if (!stickyHeaderElement.is('.app-bar-heading-modal'))
                                stickyHeaderElement.addClass('app-bar-heading-modal');
                        }
                        else
                            if (stickyHeaderElement.is('.app-bar-heading-modal'))
                                stickyHeaderElement.removeClass('app-bar-heading-modal');
                        stickyHeaderElement.data('screen-width', _screen.width)
                        stickyHeaderElement.show()[0].style.width = (calcWidth(scrollable) - parseCss(stickyHeaderElement, 'padding-left') - parseCss(stickyHeaderElement, 'padding-right')/* - 1*/ - (/*isModal && !isTouchPointer*/false ? 6 : (isModal && isTouchPointer ? -1 : 0))) + 'px';
                        // update bar text
                        appBarText = stickyHeaderElement.css({ 'top': scrollableOffsetY + (isModal ? -1 : -1)/*, left: parseCss(page, 'left') + (isModal ? 1 : 0) */ }).find('.app-bar-text');
                        if (textSelector) {
                            barHtml = heading.html();
                            if (barHtml != appBarText.data('html')) {
                                appBarText.data('html', barHtml).html(barHtml).css('white-space', 'normal');
                                if (hideInstruction)
                                    stickyHeaderElement.find('.app-view-instruction,.app-group:not(.app-group-fixed)').addClass('app-hidden').parent().addClass('app-bar-text-instruction-hidden');
                            }
                        }
                        else {
                            barText = headingText.text().trim();
                            if (!barText)
                                doHide = true;
                            else if (barText != appBarText.data('text'))
                                appBarText.data('text', barText).text(barText).css('white-space', '');
                        }
                        if (stickyHeaderElement.outerHeight() + parseCss(stickyHeaderElement, 'top') < headingText.outerHeight() + headingTop) {
                            stickyHeaderElement.hide();
                            doHide = true;
                        }
                    }
            }
            if (doHide || dataInputOf(activeElementOfDocument()).length && !isReadingPaneMaster(page))
                stickyHeaderElement.hide();
            // });
            return that;
        },
        wait: function (enable) {
        },
        build: function (pageTemplate, options, pageMenu) {
            var makeThemModal = touch._pages.length > 1,
                dataUrl = pageTemplate.attr('data-href'),
                linkCount = 0,
                userPages = pageTemplate.find('div[data-app-role="page"]'),
                mainPage;
            if (!options && userPages.length === 1 && userPages.attr('data-content-framework')) {
                options = { pageId: 'Main' };
                mainPage = $('#Main');
                userPages.data('mainPage', true);
            }
            userPages.each(function (index) {
                var userPage = $(this),
                    physicalPage = mainPage || userPage,
                    userPageContent = physicalPage.find('> div[data-role="content"]'),
                    framework = userPage.attr('data-content-framework'),
                    isDisplayFlow = framework === 'display-flow',
                    article;
                if (framework)
                    physicalPage.attr('data-enhance', 'false');
                if (!userPageContent.length) {
                    userPageContent = $div('', 'data-role="content"');
                    userPage.contents().appendTo(userPageContent);
                    userPageContent.appendTo(userPage);
                }
                physicalPage.attr({ 'data-role': 'page', 'data-app-role': null }).addClass('app-page-scrollable')
                if (!mainPage)
                    userPage.appendTo($body);
                var pageHeader = _app.eval(userPage.attr('data-page-header')),
                    activator = parseActivator(userPage),
                    pageInfo = { text: (pageHeader !== 'false' ? pageHeader : '') || activator.text || touch.title(), description: activator.description, activator: activator, url: dataUrl, transition: options && options.transition },
                    pageId = options && options.pageId || userPage.attr('id') || (pathToId(dataUrl || location.pathname) + (index > 0 || dataUrl ? (index + 1) : '')) || '_root',
                    pageButton,
                    scrollable,
                    pageContent;
                pageHeader = pageInfo.text.split(/\s*\|\s*/);
                pageInfo.headerText = pageHeader.length > 1 ? pageHeader : pageHeader[0];
                article = $htmlTag('article', 'app-page-content' + (framework ? ' app-content-framework app-' + framework : ''));
                if (mainPage) {
                    if (!isDisplayFlow)
                        userPage.contents().appendTo(article);
                    article.appendTo(userPageContent.empty());
                }
                else {
                    userPage.find('div[data-role="content"]').contents().wrapAll(article);
                    userPage.page().attr('id', pageId);
                }
                pageInfo.id = pageId;
                pageInfo.page = userPage;
                pageInfo.dynamic = options && options.dynamic;
                touch.pageInfo(pageInfo);
                if (framework)
                    physicalPage.attr('data-page-header', 'false')
                scrollable = pageInfo.scrollable = createScroller(physicalPage, false);
                pageContent = scrollable.find('.app-page-content');
                if (framework)
                    _app.configureFramework(framework, pageContent, function (config) {
                        contentFramework = config;
                    });
                if (!options || !options.dynamic)
                    createMainTabBar();
                if (makeThemModal)
                    touch.makeModal(pageInfo);
                userPage.each(function () {
                    $.each(this.attributes, function () {
                        var that = this;
                        if (that.specified) {
                            var name = that.name;
                            if (name.match(/^data\-/) && !name.match(/^(data-(content-framework|page-header|app-role|role|activator|enhance))$/))
                                pageContent.attr(name, that.value);
                        }
                    });
                });
                _app.dataBind(pageContent, []);
                if (activator.text) {
                    linkCount++;
                    pageButton = $a('app-action-navigate')
                        .attr('href', '#' + pageId).text(activator.text)
                        .appendTo($li().appendTo(pageMenu));
                    if (pageInfo.description)
                        $p().appendTo(pageButton).text(pageInfo.description);
                }
                $document.trigger($.Event('displayflow.app', { content: scrollable, page: userPage }));
                if (mainPage)
                    whenPageShown(function () {
                        if (isDisplayFlow && userPage.is('[data-editable="true"]'))
                            _app.display('designer');
                        userPage.remove();
                    });
            });
            userPages.data('linkCount', linkCount);
            return userPages;
        },
        start: function (options) {
            ensureFont();
            _edit = touch.edit;
            $touch.ignoreContentEnabled = true;
            _msApp._raiseInit();
            //_msSys.Observer.clearEventHandlers(_msApp);
            touch._appLoaded = true;

            registerPageContainerListeners();
            var pageMenu = touch.pageMenu(options && options.pageId),
                firstUserPage,
                pageTemplate = $(options && options.selector || '#PageContent'),
                dataUrl = pageTemplate.attr('data-href'),
                userPages = touch.build(pageTemplate, options, pageMenu),
                mainPage = userPages.data('mainPage'),
                linkCount = userPages.data('linkCount'),
                kioskElem = kiosk('get');
            if (!mainPage && userPages.length) {
                firstUserPage = userPages.first();
                if (!linkCount && firstUserPage.attr('data-activator') !== 'false')
                    $a('app-action-navigate')
                        .attr('href', '#' + firstUserPage.attr('id')).text(firstUserPage.attr('data-page-header') || resourcesMenu.SeeAlso)
                        .appendTo($li().appendTo(pageMenu));

                if (pageMenu.is('.ui-listview'))
                    pageMenu.listview().listview('refresh');
                if (kioskElem)
                    kioskElem.insertAfter(userPages[userPages.length - 1]);

            }
            // locate current node
            var rootNodes = menuNodes,
                currentNode;

            function findCurrentNode(nodes) {
                nodes.every(function (n) {
                    if (n.selected)
                        currentNode = n;
                    else if (n.children)
                        findCurrentNode(n.children);
                    return !currentNode;
                });
            }

            if (!options)
                findCurrentNode(rootNodes);
            // create  a table of contents if there is no "custom" pages
            if (currentNode && !userPages.length && !pageMenu.find('a').length)
                buildHierarchyLinks(currentNode.children, pageMenu, 1);
            var activePage = options ? touch.page(options.pageId) : findActivePage(),
                links = activePage.find('.app-action-navigate'),
                //anchor = location.href.match(/#(.+)$/),
                scrollable,
                tabs = [], tabbedContainer,
                firstPage = touch._pages[0],
                firstPageDataView = firstPage && firstPage.dataView;

            function appStart() {
                //try {
                //    var external = _window.external;
                //    if (external && external.TouchUI) {
                //        _app.embedded = true;
                //        switchPointerType('mouse');
                //    }
                //}
                //catch (ex) {
                //    // nothing
                //}
                var startupScript = options && $(options.selector).data('scripts');
                if (startupScript)
                    eval(startupScript);
                else if (menuNodes)
                    initializeMainMenu();

                try {
                    if (sessionStorage && sessionStorage['_clearUIState']) {
                        sessionStorage.removeItem('_clearUIState');
                        _app.storage.clearUIState();
                    }
                }
                catch (ex) { }

                $document.trigger('start.app');
                touch._started = true;
                //if (identityConfirmationRequested)
                //    touch.notify({ text: /*appName() + ' - ' + */resourcesDevice.DeviceLoginPrompt, duration: 60000 });
                $document.trigger('ifttt.app');
                if (/*!_app.host &&*/ !ie && $settingsEnabled('ui.theme.detect'))
                    $document.one('pagereadycomplete.app', function () {
                        var darkMatches = window.matchMedia('(prefers-color-scheme: dark)');
                        $(darkMatches).on('change', themeChanged);
                        themeChanged({ originalEvent: darkMatches }, true);
                    });
            }

            function themeChanged(e, keepUserSelection) {
                var theme = settings.ui.theme,
                    currentTheme = theme.name,
                    currentAccent = theme.accent,
                    matches = e.originalEvent.matches,
                    newTheme;
                if (!keepUserSelection || (!userVariable('userTheme') && (matches && currentTheme === 'Light' || !matches && currentTheme === 'Dark'))) {
                    theme.name = newTheme = matches ? 'Dark' : 'Light';
                    touch._changeThemeLink(currentTheme + '.' + currentAccent, newTheme + '.' + currentAccent, nop);
                    userVariable('userTheme', null);
                }
            }

            function createTabStrip() {
                touch.tabs('create', {
                    tabs: tabs, className: 'app-tabs-echo', scope: 'page', change: function () {
                        // fetchEchos();
                    }
                });
            }

            if (!mainPage & links.length === 1 && (options || $settings('ui.list.initialMode') === 'SeeAll' || $body.attr('class').match(/see-all-always/) || (!firstPageDataView || firstPageDataView.tagged('reading-pane-auto') && !isHosted || firstPageDataView.get_lastCommandName() || _window.location.href.match(/_controller=.+_commandName=.+/))))
                $(touch._pages).each(function () {
                    var pageInfo = this,
                        dataView = pageInfo.dataView;
                    rootDataViewId = dataView && dataView._id;
                    if ((!dataUrl || pageInfo.url === dataUrl && !pageInfo.root) && (!dataView || !dataView._hidden)) {

                        if (!dataUrl) {
                            pageInfo.home = true;
                            dataUrl = $touch.path.documentBase.pathname + _window.location.search;
                            //window.location.replace('#' + pageInfo.id);
                            //$mobile.navigate.navigator.squash(dataUrl);
                        }

                        appStart();

                        $touch.navigate.history.clearForward();

                        if (dataUrl)
                            pageInfo.replaceUrl = dataUrl;
                        //if (_webkitSuppressPageChangeOnStart == null) {
                        //    _webkitSuppressPageChangeOnStart = true;
                        //    setTimeout(function () {
                        //        _webkitSuppressPageChangeOnStart = false;
                        //    }, 1000);
                        //}
                        if (dataView) {
                            createScroller($('#Main'));
                            $htmlTag('h1', 'app-page-loading').appendTo(touch.content().empty()).text(loadingStatusText);
                            createMainTabBar();
                        }
                        resetPageHeight(pageInfo.page);
                        //_webkitSuppressPageChangeOnStart = true;
                        //$(document).one('pageready.app', function () {
                        //    _webkitSuppressPageChangeOnStart = false;
                        //});
                        touch.changePage(pageInfo.id);
                        contentScrollTop('restore');
                        return false;
                    }
                });
            else if (activePage.attr('id') === 'Main') {

                //if (location.hash && location.hash.length > 1) {
                //    window.location.replace('#');
                //    history.replaceState('', document.title, window.location.pathname);
                //}

                if (links.length)
                    activePage.find('a[rel="external"]').parent().remove();

                links.show();
                scrollable = createScroller(activePage);
                resetPageHeight();
                createMainTabBar();
                calcPageMinWidth(activePage.addClass('app-page-scrollable'));
                pageHeaderText(document.title);

                $(links).each(function () {
                    var link = $(this),
                        id = link.attr('href'),
                        pageInfo = id && getPageInfo(id.substring(1)),
                        t, echo,
                        activator;
                    if (pageInfo && pageInfo.dataView && pageInfo.activator.type !== 'Button') {
                        activator = pageInfo.activator;
                        if (activator && activator.type === 'Tab') {
                            $(tabs).each(function () {
                                if (this.text === activator.text) {
                                    t = this;
                                    return false;
                                }
                            });
                            if (!t) {
                                if (tabbedContainer != activator.container) {
                                    if (tabbedContainer) {
                                        createTabStrip();
                                        tabs = [];
                                    }
                                    tabbedContainer = activator.container;
                                }

                                t = { text: activator.text, content: [] };
                                tabs.push(t);
                            }
                        }
                        echo = echoCreate(pageInfo.id, scrollable);
                        if (t)
                            t.content.push(echo);
                        link.parent().remove();
                    }
                });
                if (tabbedContainer)
                    createTabStrip();
                //pageMenu = touch.pageMenu();
                if (pageMenu)
                    if (pageMenu.find('.app-action-navigate,a[rel="external"]').length)
                        pageMenu.listview().show();
                    else
                        pageMenu.remove();
                if (scrollable.find('.app-tabs').length > 1)
                    $div('app-stub-main').appendTo(scrollable);

                contentScrollTop('restore');
                touch.refreshAppButtons();
                appStart();
                pageReady({ toPage: activePage });
            }
        },
        pageMenu: function (pageId) {
            var content = touch.content(pageId),
                menu = content.find('ul.app-page-menu');
            if (content.parent().attr('id') === 'Main' && !menu.length) {
                menu = $ul('app-page-menu', 'data-role="listview" data-inset="false"').appendTo(content).hide().on('vclick', function (event) {
                    var link = $(event.target),
                        href,
                        hrefIsPageId;
                    if (!link.is('a'))
                        link = link.closest('a');
                    if (link.length) {
                        href = link.attr('href');
                        hrefIsPageId = href.match(/^#/);
                        //if (!hrefIsPageId)
                        //    busyBeforeUnload();
                        callWithFeedback(link, function () {
                            if (hrefIsPageId)
                                touch.changePage(href.substring(1));
                            else {
                                activeLink(link, false);
                                _window.location.href = href;
                            }
                        });
                    }
                    return false;
                });
            }
            return menu;
        },
        initialize: function () {
            settings = __settings;
            appBaseUrl = __baseUrl;
            appServicePath = __servicePath;
            $document.trigger('beforetouchinit.app');
            loggedIn = _app.loggedIn();
            initializeCoreAPI();
            isHosted = isHosted && $settingsEnabled('ui.embedding') && !appStudio();
            isKioskPage = $settings('ui.automation.enabled') && ($body.data('kiosk') || $settings('ui.automation.kiosk.enabled'));
            configureIconFonts();
            oauth2Request = settings.state;
            deviceRequest = oauth2Request && oauth2Request.type === "device";
            loginRequest = oauth2Request && oauth2Request.type === "login" && oauth2Request.redirect_uri;
            createStandardUserInteface();
            if (oauth2Request && oauth2Request.type !== "oauth2")
                oauth2Request = null;
            if (_membership)
                if (deviceRequest)
                    oauth2Concent();
                else
                    tryAutoLogin();
            //if (_app.host && !_app.host.embedded)
            //    mobile.progress('show');
            var currentNode,
                pathInfo = _window.location.pathname + _window.location.search.replace(/(\_(\w+)=(.*?)(&|$))/, ''),
                nodesWithIcons = _web.Menu.nodesWithIcons = [];

            if (pathInfo.match(/\?$/))
                pathInfo = pathInfo.substring(0, pathInfo.length - 1);

            _web.Menu.nodeCount = 0;

            function enumerateNodesWithIcons(nodes) {
                $(nodes).each(function () {
                    var n = this,
                        cssClass = n.cssClass,
                        m = cssClass && cssClass.match(iconFontIterator);
                    if (m) {
                        nodesWithIcons.push({ node: n, icon: m[0] });
                        n.icon = m[0];
                    }
                    if (n.children)
                        enumerateNodesWithIcons(n.children);
                    _web.Menu.nodeCount++;
                });
            }

            function enumerateSelectedNodes(nodes) {
                $(nodes).each(function () {
                    var n = this,
                        u = (n.url || '').toLowerCase();
                    if (u.startsWith('../'))
                        u = u.substring(3);
                    if (n.selected /*|| _app.host && pathInfo.indexOf(u) !== -1*/) {
                        currentNode = n;
                        currentNode.selected = true;
                        _web.Menu.currentNode = currentNode;
                        return false;
                    }

                    if (n.children) {
                        enumerateSelectedNodes(n.children);
                        if (currentNode) {
                            n.selected = true;
                            return false;
                        }
                    }
                });
                return null;
            }

            for (menuId in menu.Nodes) {
                // create a global variable with the list of main menu nodes
                if (appStudio() && _app.studio)
                    menu.Nodes[menuId] = _app.studio.menu();
                menuNodes = menu.nodes = menu.Nodes[menuId];
                enumerateSelectedNodes(menuNodes);
                enumerateNodesWithIcons(menuNodes);
                if (currentNode && currentNode.cssClass) {
                    currentNode.showPageHeaderTitle = !!currentNode.cssClass.match(/\bpage-header-title\b/);
                    currentNode.showPageHeaderDescription = !!currentNode.cssClass.match(/\bpage-header-description\b/);
                    currentNode.showPageHeaderIcon = !!currentNode.cssClass.match(/\bpage-header-icon\b/);
                }
                var menuInitEvent = $.Event('menuinit.app', { menu: menuNodes, menuId: menuId }),
                    newNodes, i, n;
                $document.trigger(menuInitEvent);
                newNodes = menuInitEvent.nodes;
                if (newNodes)
                    menuNodes = menu.nodes = menu.Nodes[menuId] = newNodes;
                for (i = 0; i < menuNodes.length; i++) {
                    n = menuNodes[i];
                    if (n.children != null && n.url != null)
                        showMenuLinksOnHover = true;
                }
                break;
            }

            var pulse = timeNow(),
                startUrl = $touch.path.parseUrl(location.href),
                startHash = startUrl && startUrl.hash,
                //firstPage,
                head = $('head'),
                dummy = $('<div class="app-scrollbar-info"><div></div></div>').appendTo($body);
            scrollbarInfo = { width: dummy[0].offsetWidth - dummy[0].clientWidth, height: dummy[0].offsetWidth - dummy[0].clientWidth, gridColumnPadding: 16 };
            dummy.remove();
            //if (!$body.is('.app-ms-tablet'))
            //    that._stickyHeaderBar.css('right', scrollbarInfo.width);

            initTouchUI();

            rtf.init();

            if (startHash && startHash !== '#' && (startHash.match(/\W/) || !$(startHash).length))
                location.replace(startUrl.hrefNoHash);
            //firstPage = navigationStack(0);
            //firstPage.url = startUrl.hrefNoHash;
            //firstPage.hash = '';
            //$mobile.path.documentBase.href = $mobile.path.documentBase.hrefNoHash;
            //location.replace($mobile.path.documentBase.hrefNoHash);
            //}

            if (iOS)
                $('<meta name="apple-mobile-web-app-capable" content="yes"/>' +
                    '<meta name="apple-mobile-web-app-status-bar-style" content="black' + (iOSMajorVersion >= 8 ? '-translucent' : '') + '"/>' +
                    '<link rel="apple-touch-icon" href="../images/logo-icon.png"/>').appendTo(head);
            else if (android) {
                $('<meta name="mobile-web-app-capable" content="yes"/>' +
                    '<link rel="icon" sizes="196x196" href="../images/logo-icon.png"/>').appendTo(head);
                // NOTE: It appears that the font is known to Android. There is no need to load
                //(function () {
                //    _window.WebFontConfig = {
                //        google: { families: ['Roboto::latin'] }
                //    };
                //    var wf = document.createElement('script');
                //    wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                //    wf.type = 'text/javascript';
                //    wf.async = 'true';
                //    var s = document.getElementsByTagName('script')[0];
                //    s.parentNode.insertBefore(wf, s);
                //})();
            }
            // This will hook up ROBOTO from the web
            //(function () {
            //    _window.WebFontConfig = {
            //        google: { families: ['Roboto::latin'] }
            //    };
            //    var wf = document.createElement('script');
            //    wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
            //    wf.type = 'text/javascript';
            //    wf.async = 'true';
            //    var s = document.getElementsByTagName('script')[0];
            //    s.parentNode.insertBefore(wf, s);
            //    $(document.body).addClass('app-android');
            //})();

            function appPulse() {
                var newPulse = timeNow();
                if (newPulse - pulse > 2500) {
                    var event = $.Event('awake.app');
                    $document.trigger(event);
                    if (event.isDefaultPrevented())
                        return;
                    else
                        newPulse = timeNow();
                }

                pulse = newPulse;
                setTimeout(appPulse, 1250);
            }
            setTimeout(appPulse, 10);
            if (!settings.appInfo.match(/\|$/))
                $('#app-welcome').remove();

            touch._logo.html(appName());
            //updateMenuStripPosition();
            //mobile.refreshMenuStrip();
            syncMenuStripWithVisibleTabBar();
            settingsButtonIsEnabled = $settingsEnabled('settings.enabled') && !($body.is('[data-offline="true"]') && appIsOffline());// && !$body.is('[data-offline="true"]'),
            var leftSideBarToolbar = appBars.left.toolbar,
                //nodesWithIcons = Web.Menu.nodesWithIcons,
                appsLocation = $settings('ui.menu.apps.location'),
                appsButtonIsEnabled = !appsLocation || appsLocation === 'sidebar',
                doesNotNeedAppsButton = nodesWithIcons.length <= 4 && nodesWithIcons.length === menu.nodeCount || !appsButtonIsEnabled,
                numberOfIconsInToolbar = Math.min(nodesWithIcons.length, (doesNotNeedAppsButton ? 4 : 3) + (settingsButtonIsEnabled ? 0 : 1)),
                btn;
            menu.nodeCountInSidebar = numberOfIconsInToolbar;
            if ($settingsEnabled('ui.sidebar.toolbar')) {
                var tabBarIsEnabled = $settings('ui.menu.tabbar') === true;
                if ($settingsEnabled('ui.sidebar.icons') && !tabBarIsEnabled) {
                    for (var inode = 0; inode < numberOfIconsInToolbar; inode++) {
                        var n = nodesWithIcons[inode],
                            btn = $a('ui-btn ui-btn-a app-btn-page app-btn' + inode).appendTo(leftSideBarToolbar).attr('title', n.node.title).data('context', n.node);
                        materialIcon(n.icon, btn);
                        if (n.node == menu.currentNode)
                            btn.addClass('app-selected');
                    }
                }
                else {
                    numberOfIconsInToolbar = 0;
                    doesNotNeedAppsButton = !appsButtonIsEnabled;
                }
                //if (Web.Menu.nodeCount > nodesWithIcons.length)
                if (!doesNotNeedAppsButton && appsButtonIsEnabled)
                    materialIcon('material-icon-apps', $a('ui-btn ui-btn-a app-btn-apps').appendTo(leftSideBarToolbar).attr('title', resourcesMobile.Apps));
                if (settingsButtonIsEnabled) {
                    btn = $a('ui-btn ui-btn-a app-btn-settings').appendTo(leftSideBarToolbar).attr('title', resourcesMobile.Settings);
                    materialIcon('material-icon-settings', btn);
                    $span('app-text').text(resourcesMobile.Settings).appendTo(btn);
                }
                else
                    leftSideBarToolbar.parent().addClass('app-settings-disabled');
                if (tabBarIsEnabled)
                    leftSideBarToolbar.addClass('app-has-tabbar');
                else if (numberOfIconsInToolbar)
                    leftSideBarToolbar.addClass('app-has-icons');
                if ($settings('ui.menu.location') === 'sidebar' || !appsButtonIsEnabled)
                    leftSideBarToolbar.addClass('app-has-optional-apps');
                updateMiniSiderInnerHeight();
                appBars.left.inner.closest('.ui-panel').addClass('app-has-toolbar-bottom');
                if (!leftSideBarToolbar.find('.ui-btn').length)
                    leftSideBarToolbar.css('visibility', 'hidden');
                syncMenuStripWithVisibleSidebar();
            }
            else {
                leftSideBarToolbar.hide();
                appBars.left.inner.css('bottom', 0);
            }
            enhanceScrolling(appBars.left.inner, false);

            _app.getScript.controllers[__settings.siteContent] = {
                url: '~/js/surveys/cms/site-content.js'
            };
            $document.trigger('touchinit.app');
        },
        presenter: function (method, options) {

            var presenters = touch._presenters;

            // register a view presenter
            function register() {
                presenters[options.name] = options;
            }

            function activate(info) {
                changeViewStyleWithFeedback(info.id, info.name);
            }

            function supports() {
                var p = presenters[typeof options == 'string' ? options : options.name];
                return p && (typeof options == 'string' || p.supports(findDataView(options.id), options.config));
            }

            function show() {
                var dataView = findDataView(options.id),
                    extension = dataView.extension(),
                    presenterContainer = options.container,
                    containerIsEcho = presenterContainer.is('.app-echo-inner'),
                    p = iyf(),
                    scrollable,
                    scrollTop,
                    me;

                if (!containerIsEcho && dataView != activeDataView())
                    echoRefresh(options.id);
                else {
                    p = presenters[options.name];
                    if (containerIsEcho && p.echo && !p.echo())
                        return false;
                    if (!containerIsEcho) {
                        scrollable = findScrollable(presenterContainer);
                        scrollTop = scrollable.scrollTop();
                        hidePresenters(presenterContainer, extension);
                        // disposeListViews(presenterContainer); // - this causes the main list view to re-create
                        presenterContainer.find('ul[data-role="listview"]').hide();
                        showPresenterInstruction(presenterContainer, extension);
                    }
                    me = $(presenterContainer).find('div[data-presenter="' + p.name + '"][data-scope="' + dataView._viewId + '"]');
                    if (!me.length) {
                        scrollTop = 0;
                        me = $div('app-presenter', 'data-role="presenter"').appendTo(presenterContainer).attr({ 'data-presenter': p.name, 'data-scope': dataView._viewId });
                    }
                    me.show();
                    options.container = me;
                    p.show(options);
                    if (scrollTop)
                        scrollable.scrollTop(scrollTop);
                }
                return true;
            }

            function hide() {
                $(options.container).find('div[data-role="presenter"]').each(function () {
                    var that = $(this),
                        name = that.attr('data-presenter'),
                        p = presenters[name];
                    if (p) {
                        options.container = that;
                        p.hide(options);
                        that.hide();
                    }
                });
            }

            function dispose() {
                $(options.container).find('div[data-role="presenter"]').each(function () {
                    var that = $(this),
                        name = that.attr('data-presenter'),
                        p = presenters[name];
                    if (p) {
                        options.container = that;
                        p.dispose(options);
                        that.remove();
                    }
                });
            }

            // enumerate a list of presenters
            function enumerate() {
                var dataView = findDataView(options.id),
                    echoMode = touch.contextDataView() != activeDataView();
                for (var name in presenters) {
                    var p = presenters[name];
                    if (p.supports(dataView) && (!echoMode || (!p.echo || p.echo())))
                        options.list.push({ name: name, text: p.text(), icon: p.icon(), context: { id: dataView._id, name: name }, callback: activate });
                }
            }

            // gets the presenter
            function find() {
                return presenters[options.name];
            }

            switch (method) {
                case 'supports':
                    return supports();
                case 'enumerate':
                    enumerate();
                    break;
                case 'register':
                    register();
                    break;
                case 'show':
                    return show();
                //break;
                case 'hide':
                    hide();
                    break;
                case 'dispose':
                    dispose();
                    break;
                case 'find':
                    return find();
                //break;
            }
        },
        showAccountManager: function (values, showLogins) {
            if (!_membership)
                return;
            var identities = _app.AccountManager.list(true),
                forceShow = location.href.match(/(\?|&)_accMan=(\w+)/),
                items = [], i;

            if (_membership._instance._rememberMeSet) {
                if (!values)
                    values = [];
                values.push({ name: 'RememberMe', value: true });
            }

            if (!_app.AccountManager.enabled()) {
                touch.showLogin(values);
                return;
            }

            for (i in identities)
                if (i != '_lastUser' && identities[i].name)
                    items.push({
                        text: i, callback: accountManagerChangeCurrentUser, context: identities[i]
                    });

            if (showLogins && (items.length || forceShow && forceShow[2] != 'login')) {
                if (forceShow || items.length) {
                    items.push({ text: oauth2Request ? resources.OAuth2.UseAnotherAccount : resourcesMobile.AddAccount, callback: touch.showLogin, icon: 'material-icon-add' });
                    accountManagerScreen(items, 'switch');
                }
                else
                    doChangeCurrentUser(items[0].context.name);
            }
            else
                touch.showLogin(values);
        },
        showLogin: function (values) {
            var identities = _app.AccountManager.list(),
                lastUser = identities._lastUser && identities[identities._lastUser];
            if (lastUser) {
                if (!values)
                    values = [];
                values.push({ name: 'OAuthProvider', value: lastUser.Handler ? lastUser.Handler.toLowerCase() : 'other' });
            }
            var membership = _membership && _membership._instance;
            if (membership && !membership.get_displayLogin() && !isDedicatedLoginPage()) {
                var loginUrl = appBaseUrl + 'login';
                if (_window.location.href.indexOf('.aspx') !== -1)
                    loginUrl += '.aspx';
                _window.location.href = loginUrl;
            }
            else {
                var screen = accountManagerScreen();

                if (!screen.is('.app-acc-man-inactive') && !screen.is('.app-acc-man-splash'))
                    screen.appendTo($body).addClass('app-acc-man-inactive');
                screen.insertBefore($('.app-page-modal-background'));
                if (!allowModal())
                    accountManagerScreen().fadeOut('slow');
                touch.show({
                    controller: 'MyProfile',
                    startCommand: 'New',
                    startArgument: 'loginForm',
                    //showActionButtons: 'Bottom',
                    defaultValues: values
                });
            }
        },
        openExternalUrl: function (href, isExternal) {
            var result,
                loc = $touch.path.parseUrl(href);
            if (loc.host)
                result = function () {
                    // external link
                    if (loc.host === 'maps.apple.com' || loc.host === 'maps.google.com' || isExternal)
                        openHref(href);
                    else {
                        var pageId = loc.pathname.replace(/\//g, '-').substring(1) || loc.host.replace(/\W/g, '-'),
                            pageInfo = touch.pageInfo(pageId),
                            page,
                            iframe,
                            isReadingPane = isReadingPaneDetail() || isReadingPaneMaster();
                        if (!pageInfo)
                            pageInfo = touch.pageInfo({ id: pageId, external: true, href: href });
                        page = pageInfo.page = touch.page(pageId);
                        if (findActivePage().is('.app-page-modal') || isReadingPane) {
                            touch.makeModal(pageInfo);
                            page.toggleClass('app-page-modal-max-lg', isReadingPane);
                        }
                        iframe = page.find('iframe');
                        isBusy(true);
                        if (iframe.length)
                            iframe.remove();
                        iframe = $htmlTag('iframe', 'app-page-external').attr('src', href).appendTo(findScrollable(page).addClass('app-wrapper-external'))
                            .one('load', function () {
                                if (activePageIdentifier(pageId))
                                    isBusy(false);
                                else
                                    setTimeout(touch.changePage, 0, pageId);
                            });
                        if (iOS)
                            findScrollable(page).css('overflow', 'auto');
                    }
                };
            return result;
        },
        getThemes: function () {
            var d = new $.Deferred();
            $.ajax({
                url: appServicePath + '/Themes',
                method: 'POST',
                cache: false
            }).done(function (result) {
                d.resolve(result.d || JSON.parse($(result).text()));
            });
            return d.promise();
        },
        startUrl: function () {
            return navigationStack(0).url;
        },
        returnUrl: function () {
            if (oauth2Request)
                return null;
            //identityConfirmationRequested = sessionStorage['identityConfirmationRequested'];
            //if (identityConfirmationRequested)
            //    return identityConfirmationRequested;

            var returnUrl = navigationStack(0).url.match(/\?ReturnUrl=(.+?)(#.+)?(&|$)/); //_window.location.href.match(/\?ReturnUrl=(.+?)(#.+)?$/);
            if (returnUrl)
                returnUrl = decodeURIComponent(returnUrl[1]);

            //if (returnUrl && returnUrl.indexOf('/_invoke/getidentity') !== -1)
            //    sessionStorage['identityConfirmationRequested'] = identityConfirmationRequested = returnUrl;

            return returnUrl;
        },
        initials: function (name) {
            return userNameToInitials(name);
        },
        _changeThemeLink: function (oldTheme, theme, callback) {
            _app.cookie('.COTTHEME' + _app.userName(), theme, 365);
            _app.cookie('.COTTHEME', theme, 365);
            isBusy(true)
            fetch(location.href).then(function (response) {
                return response.text();
            }).then(function (result) {
                isBusy(false);
                var newTheme = result.match(/href="([^"]+?)"((\s+\w+="[^"]+?")*?)\s+(class="app-theme").+?>/);
                if (newTheme)
                    $('link.app-theme').attr('href', newTheme[1]);
                callback();
            }).catch(function () {
                isBusy(false);
            });
        }
    };

    /* initialize mobile page */

    function switchPointerType(pointerType) {
        if (pointerType === 'touch') {
            if (!isTouchPointer)
                _app.userVar('mousePtr', null);
            isTouchPointer = true;
            $body.removeClass('app-desktop app-show-system-buttons-on-hover').addClass('app-touch');
        }
        else {
            if (!$body.is('.app-desktop'))
                _app.userVar('mousePtr', true);
            isTouchPointer = false;
            if ($settings('ui.showSystemButtons') !== 'Always')
                $body.removeClass('app-touch').addClass('app-show-system-buttons-on-hover');
            $body.addClass('app-desktop');
        }
        forceTouchPointerCheck = false;
    }

    function initializeCoreAPI() {
        $body = $('body');
        if (edge)
            $body.attr('x-ms-format-detection', 'none');

        // check the device capabilities

        var mq = _window.matchMedia("(min-resolution: 144dpi), (-webkit-min-device-pixel-ratio: 1.5)");
        if (mq.matches) {
            screenDPI = 144;
            mq = _window.matchMedia("(min-resolution: 240dpi), (-webkit-min-device-pixel-ratio: 2.5)");
            if (mq.matches)
                screepDPI = 240;
        }
        else if (screen.width > 1080 || screen.height > 1080)
            screenDPI = 144;

        // test if the browser is capable of touch

        isTouchPointer = 'ontouchstart' in _window;
        if (isTouchPointer) {
            if (isMac) // iPad platform is MacIntel 
                iOS = true;
            else if (!iOS && !android)
                $document.on('mousemove touchstart', function (e) {
                    if (!settings) return;
                    _lastTouch = null;
                    if (e.type.match(/^touch/)) {
                        if (!isTouchPointer)
                            switchPointerType('touch');
                    }
                    else
                        if (isTouchPointer)
                            switchPointerType('mouse');
                });
        }
        else {
            if (_window.PointerEvent) {
                isTouchPointer = false;
                forceTouchPointerCheck = true;
                // force isTouchPointer as false on chrome desktop browser
                if (chrome) {
                    isTouchPointer = false;
                    forceTouchPointerCheck = true;
                }
                $document.on('pointerdown pointermove', function (e) {
                    if (!settings) return;
                    var pointerType = e.originalEvent.pointerType;
                    if (pointerType === 'touch') {
                        if (!isTouchPointer || forceTouchPointerCheck)
                            switchPointerType('touch');
                    }
                    else if (pointerType === 'mouse')
                        if (isTouchPointer || forceTouchPointerCheck)
                            switchPointerType('mouse');
                });
            }
        }

        if (_app.userVar('mousePtr'))
            forceTouchPointerCheck = false;
    }


    /*
     * This is a sample configuration of Material Design Icons
     * 
     
    @import url('https://cdn.materialdesignicons.com/5.3.45/css/materialdesignicons.min.css');
     
    .app-icon.mdi,
    .app-icon.mdi::before {
    font-size: 24px;
    line-height: 24px;
    }
     
    .app-page-header .app-icon.mdi,
    .app-page-header .app-icon.mdi::before {
    font-size: 40px;
    line-height: 40px;
    }
     
     
    .app-page-header .app-icon.mdi.app-icon-background,
    .app-page-header .app-icon.mdi.app-icon-background::before {
        font-size: 240px;
        line-height: 240px;
    }
     
    */


    function configureIconFonts() {
        var fonts = $settings('ui.iconFonts'),
            font, fontName, fontSize, fontUrl, fontMarginLeft,
            names = ['material-icon', 'glyphicons', 'glyphicon', 'fa', 'ion'],
            css;
        if (fonts)
            for (fontName in fonts) {
                css = [];
                font = fonts[fontName];
                names.push(fontName);
                fontUrl = font.url;
                if (fontUrl)
                    css.push('@import url(\'' + fontUrl + '\');');
                fontSize = font.size;
                if (fontSize)
                    fontMarginLeft = (24 - fontSize) / 2;
                else {
                    fontSize = 24;
                    fontMarginLeft = 0;
                }
                css.push('.app-icon.' + fontName + ',.app-icon.' + fontName + ':before{font-size:' + fontSize + 'px;line-height:24px;' +
                    (fontMarginLeft ? 'margin-left:' + fontMarginLeft + 'px;' : '') + '}');
                css.push('.app-page-header .app-icon.' + fontName + ',.app-page-header .app-icon.' + fontName + '::before{font-size:40px;line-height:40px;}');
                css.push('.app-page-header .app-icon.' + fontName + '.app-icon-background,.app-page-header .app-icon.' + fontName + '.app-icon-background::before{font-size:240px;line-height:240px;}\n');
                createStyle().text(css.join(''));
            }
        names = names.join('|');
        iconFontIterator = new RegExp('\\b(((' + names + ')-([\\w-]+?)))(\\s|$|,)', 'g');
        iconFontRegex = new RegExp('^(' + names + ')-(.+)');
    }

    function createStandardUserInteface() {
        var appButtonMarkup = '<a class="ui-btn-right app-btn ui-btn ui-btn-icon-notext ui-shadow ui-corner-all"></a>',
            toolbar = $(
                '<div id="app-bar-toolbar" class="app-bar-toolbar ui-header ui-bar-a ui-header-fixed" data-role="header" data-position="fixed" data-theme="a" class="app-bar-toolbar">' +
                span('app-btn-menu-background') + //<span class="app-btn-menu-background"/>' +
                span('app-back-text') + //'<span class="app-back-text"/>' +
                span('app-logo') +//'<span class="app-logo"/>' +
                htmlTag('h1', 'ui-title') + // '<h1 class="ui-title">' +
                '<a id="app-btn-menu" class="app-btn-menu ui-btn ui-btn-icon-notext ui-shadow ui-corner-all ui-icon-bars ui-btn-left"></a>' +
                '<div class="app-btn-cluster-right">' +
                appButtonMarkup + appButtonMarkup + appButtonMarkup + appButtonMarkup + appButtonMarkup +
                '<a id="app-btn-context" class="app-btn-context ui-btn-right ui-link ui-btn ui-icon-dots ui-btn-icon-notext ui-shadow ui-corner-all"></a>' +
                '</div>' +
                '' +
                '</div>').appendTo($body);
        $('<div data-role="page" id="Main"><div data-role="content" class="app-content-main"></div></div>').appendTo($body);
        $a('ui-btn ui-btn-a ui-btn-icon-notext app-btn-float app-btn-promo').hide().appendTo($body).on('vclick', handleAppButtonClick);

        _readingPane = $settingsEnabled('ui.readingPane.enabled') && !isKioskPage ?
            {
                enabled: true,
                minLeft: $settings('ui.readingPane.minLeft') || 375,
                minRight: $settings('ui.readingPane.minRight') || 375,
                minTop: $settings('ui.readingPane.minTop') || 375,
                minBottom: $settings('ui.readingPane.minBottom') || 375,
                bkg: $settings('ui.readingPane.background'),
                divider: 1
            } :
            { enabled: false };

        if (isLocalHost() && __settings.appStudio && !appIsOffline() && !oauth2Request) {
            _device = virtualDevice();
            screenChanged({ isVirtual: _device.width != null, width: _device.width, height: _device.height, toolbar: toolbar });
            if (!appStudio() && !appIsOffline())
                _app
                    .getScript('~/js/sys/appstudio.[min].js', {
                        also: '~/css/sys/appstudio.[min].css'
                    })
                    .then(function () { // Do not replace with the "arrow" function. Designer must start on the current stack. Otherwise "touch" and other variables will be missing.
                        _app.studio.start();
                    });
        }
        else
            screenChanged({ isVirtual: false, toolbar: toolbar });



        toolbar.find('.app-btn').data('icon', 'gear').on('vclick', handleAppButtonClick);

        //toolbar = $('#app-bar-toolbar');
        if (isHosted)
            toolbar.css('visibility', 'hidden');
        touch._toolbar = toolbar;
        touch._logo = toolbar.find('.app-logo');
        touch._actionButton = $('.app-btn-promo');
        touch._toolbarButtons = toolbar.find('.app-btn');
        touch._title = toolbar.find('h1').addClass('app-hidden');
        touch._menuButton = $('#app-btn-menu');
        touch._backText = toolbar.find('.app-back-text').hide().attr('title', resourcesMobile.Back);
        touch._contextButton = $('#app-btn-context');
        $('#aspnetForm').hide();
    }

    touch = _app.touch = new _app.Mobile();
    touch.activeLinkBlacklist = '.ui-slider-handle,.dv-action-see-all,.app-do-not-activate';
    touch._presenters = {};
    touch.render = {};

    touch.calcWidth = calcWidth;
    touch.createLayout = createLayout;
    touch.prepareLayout = prepareLayout;
    touch.fnVisible = fnVisible;
    touch.hasFocus = hasFocus;
    touch.findInput = findInput;
    touch.autofillConfig = autofillConfig;
    touch.saveLastFocusedField = saveLastFocusedField
    touch.pageResized = pageResized;
    touch.observableAttr = observableAttribute;
    touch.scrollIntoView = scrollIntoView;
    touch.toSmartDate = toSmartDate;
    touch.generateLayout = generateLayout;
    touch.activeElement = activeElementOfDocument;

    // this was the original "slow" page rendering on start
    /*.on('pagecontainercreate', function (event) {
            mobile.start();
        })*/

    function registerPageContainerListeners() {
        $body.on('pagecontainerbeforeshow', function (event, ui) {
            var activePage = findActivePage(),
                pageInfo = getPageInfo(),
                headerText = pageInfo ? pageInfo.headerText : touch.title();
            if (headerText && typeof headerText != 'string')
                headerText = headerText[0];
            if (headerText === false)
                headerText = '';
            touch.toolbar(headerText);
            //if ($body.is('.app-page-header-hidden') || pageInfo && pageInfo.headerText == false)
            //    pageHeaderText(false);
            //else
            //    pageHeaderText(pageInfo && pageInfo.headerText || pageInfo && pageInfo.dataView && pageInfo.dataView.get_view().Label || document.title);
            displayPageHeader(pageInfo);
            touch.pageShow(activePageIdentifier());
            touch.unloadPage(ui.prevPage, activePage);
            userActivity();
            touch.contextScope(null);
        }).on('pagecontainerbeforehide', function (e, ui) {
            // before transition begings
            _input.ignoreErrors = false;
            isInTransition = true;
            isBusy(true);
        })/*.on('pagecontainerbeforechange', function (e, ui) {
            if (typeof ui.toPage == 'string' && ui.toPage.match(/^http/)) {
                // Webkit navigates to the current page one more time after we add the page ID (hash) to a URL.
                // We need to prevent any futher navigation - the page is ready to be used. This is not happening in IE.
                if (_webkitSuppressPageChangeOnStart) {
                    _webkitSuppressPageChangeOnStart = false;
                    return false;
                }
            }
        })*/.on('pagecontainerbeforetransition', function (e, ui) {
            // Safari triggers double transition
            if (ui.toPage && ui.prevPage) {
                var toPageId = $(ui.toPage).attr('id'),
                    toPageInfo = getPageInfo(toPageId),
                    prevPage = $(ui.prevPage),
                    prevPageId = prevPage.attr('id'),
                    prevPageInfo = getPageInfo(prevPageId),
                    prevDataView = prevPageInfo && prevPageInfo.dataView,
                    savePageTransitionCallback = touch.pageTransitionCallback,
                    autoPostInlineEditor;

                if (toPageId === prevPageId || toPageInfo && toPageInfo.deleted)
                    return false;
                if (prevDataView) {
                    dismissAll = prevDataView._dismissAll;
                    prevDataView._dismissAll = false;
                    if (ui.options.reverse && prevDataView.editing()) {
                        var canCancelInput = _input.cancel(),
                            canIgnoreChanges = prevDataView.changed('ignore');
                        if (!canCancelInput || !canIgnoreChanges) {
                            activeUrl = prevPage.attr('data-url');
                            touch.pageTransitionCallback = null;
                            setTimeout(function () {
                                isInTransition = false;
                                goForwardTo(prevPageId);
                                autoPostInlineEditor = prevDataView._inlineEditor && !prevDataView._inlineEditorCanceled;
                                delete prevDataView._inlineEditorCanceled;
                                if (autoPostInlineEditor) {
                                    setTimeout(function () {
                                        focusLastInput();
                                        touch.executeInContext();
                                    });
                                }
                                else
                                    _app.confirm(resourcesData.DiscardChanges)
                                        .then(function () {
                                            prevDataView.changed('ignore', true);
                                            if (savePageTransitionCallback && isReadingPaneDetail())
                                                savePageTransitionCallback = null;
                                            touch.pageTransitionCallback = savePageTransitionCallback;
                                            setTimeout(goBack);
                                        })
                                        .fail(focusLastInput);
                            });
                            e.preventDefault();
                            return false;
                        }
                        else if (canIgnoreChanges)
                            $document.trigger($.Event('dataviewignorechanges.app', { dataView: prevDataView, changed: prevDataView.changed() }));
                    }
                }
            }
            hideTooltip();
            //enablePointerEvents(false);
            touch.promo(false);
            saveScrolling(findActivePage());
            savePanelScrollTop(contextSidebar());
        }).on('pagecontainershow', function (e, ui) {
            if (findActivePage())
                restoreScrolling(findActivePage());
        }).on('pagecontainertransition', function (e, ui) {
            pageReady(ui);
        });
    }

    function touchPoint(e) {
        var originalEvent = e.originalEvent,
            touch = originalEvent;
        //scrollable = findScrollable(),
        //isScrollable = scrollable.length > 0;
        if (touch.pageY == null)
            touch = originalEvent.touches[0] || originalEvent.changedTouches[0];
        return { x: touch.pageX, y: touch.pageY, pointer: originalEvent.pointerType };
    }

    //function pointerIsTouch(event) {
    //    if (event.type.match(/^(MS)?pointer/))
    //        return event.originalEvent.pointerType == 'touch';
    //    return true;
    //}

    var lastTouchedLink, lastTouchedLinkTimeout, startTouch, movementTestIsRequired;

    function clearLastTouchedLink() {
        clearTimeout(lastTouchedLinkTimeout);
        if (lastTouchedLink) {
            lastTouchedLink.data('touch-start', null);
            lastTouchedLink = null;
        }
    }

    // drag & drop handling

    _app.dragMan = dragMan = new function () {
        return this.prototype = {
            active: function () {
                return dragMan._active === true;
            },
            call: function (method, e) {
                if (!e.drag) return;
                dragMan._dragged = false;
                var drag = e.drag,
                    handler = dragMan[drag.type],
                    methodImplementation = handler && handler[method],
                    dragDataView,
                    dragTarget;

                function triggerTaphold() {
                    dragMan._tapholdTimeout = null;
                    //$('.ui-btn-active').removeClass('ui-btn-active');
                    if (drag) {
                        if (drag.touch)
                            $document.one('vmouseup pointerup', function (event) {
                                event.preventDefault();
                                event.stopPropagation();
                                tappingTimeout();
                            });

                        $touch.skipTouchEnd = drag.touch;
                        $touch.skipMouseEnd = drag.mouse || drag.pointer;
                        var tapholdEvent = $.Event('taphold.app', { drag: drag });
                        drag.target = dragTarget;
                        drag.dataView = dragDataView;
                        $(dragTarget).trigger(tapholdEvent);
                        if (tapholdEvent.isDefaultPrevented())
                            dragMan._tapholdTimeout = setTimeout(triggerTaphold, 90);
                        else
                            dragEnd(tapholdEvent);
                    }
                }

                clearTimeout(dragMan._draggedTimeout);
                if (method === 'start') {
                    dragMan._keepTap = false;
                    dragMan._active = true;
                    dragTarget = drag.target;
                    dragDataView = touch.contextDataView(dragTarget);
                    drag.dataView = dragDataView;
                    if (handler && (!handler.options || handler.options.taphold != false))
                        dragMan._tapholdTimeout = setTimeout(triggerTaphold, 500);
                }
                else if (!dragMan._keepTap) {
                    if (dragMan._tapholdTimeout) {
                        clearTimeout(dragMan._tapholdTimeout);
                        dragMan._tapholdTimeout = null;
                    }
                }
                if (handler && methodImplementation && (!handler.options || (!handler.options.dataView || drag.dataView)) && !drag.cancel) {
                    if (method === 'cancel')
                        drag.cancel = true;
                    if (handler[method](drag) === false)
                        e.preventDefault();
                }
                if (method === 'end' || method === 'cancel') {
                    drag.dataView = null;
                    dragMan._active = false;
                    enablePointerEvents(true);
                }
            },
            dragged: function (value) {
                if (arguments.length) {
                    dragMan._dragged = value;
                    if (value)
                        clearTimeout(dragMan._draggedTimeout);
                    dragMan._draggedTimeout = setTimeout(dragMan._clear, 200);
                }
                return dragMan._dragged === true;
            },
            _clear: function () {
                dragMan._dragged = false;
            }
        };
    }();

    function dragStart(e) {
        saveTouchPoint(e);
        var eventType = e.type,
            isMouseDown = eventType === 'mousedown',
            lastTouchTime = dragMan.lastTouchTime || 0;

        if (isMouseDown) {
            //console.log(timeNow() - lastTouchTime);
            if ((timeNow() - lastTouchTime) < 100)
                return false; // FireFox triggers mousedown event after the drag is over - this ensures that no double cliks will be registered
        }

        if (isMouseDown && e.which !== 1 || pendingDragEvent || dragEvent)
            return;

        clearHtmlSelection();
        hideTooltip();
        var p = _lastTouch,
            target = $(this),
            dragType = target.attr('data-draggable'),
            handler = dragMan[dragType],
            pointerType = e.originalEvent.pointerType,
            handlerOptions = handler && handler.options;
        if (pointerType === 'mouse' && e.which === 3)
            return;
        // initialize the global pending drag event
        pendingDragEvent = {
            x: p.x,
            y: p.y,
            lastX: p.x,
            lastY: p.y,
            target: target,
            type: dragType,
            data: null,
            cancel: false,
            mouse: pointerType === 'mouse' || eventType === 'mousedown',
            pointer: !!eventType.match(/^pointer/),
            touch: pointerType === 'touch' || !!eventType.match(/^touch/),
            pen: pointerType === 'pen',
            tooltip: handlerOptions && handlerOptions.tooltip
        };
        $document.trigger($.Event('dragstart.app', { drag: pendingDragEvent }));
        if (dragType !== pendingDragEvent.type) {
            dragType = pendingDragEvent.type;
            handler = dragMan[dragType];
            handlerOptions = handler && handler.options;
        }
        if (pendingDragEvent.cancel)
            pendingDragEvent = null;
        else {
            if (/*(event.type == 'touchstart' || event.type == 'pointerdown') &&*/ (pendingDragEvent.dir === 'all' || handlerOptions && handlerOptions.immediate)) {
                e.preventDefault();
                if (handlerOptions && handlerOptions.immediate)
                    dragMove(e, true);
            }

            //$.event.special.swipe.eventInProgress = true;
            $document.on('pointermove touchmove mousemove', dragMove).on('pointerup pointercancel touchend touchcancel mouseup', dragEnd);
            if (e.isDefaultPrevented())
                return false;
        }
    }

    function dragEnd(e) {
        var eventType = e.type;
        if (eventType === 'pointercancel' || eventType === 'touchcancel')
            return;
        //if (dragEvent && (eventType === 'pointercancel' || eventType === 'touchcancel') && dragEvent.cancelable === false) {
        //    dragEvent.cancelable = false;
        //    return;
        //}
        saveTouchPoint(e);
        if (dragEvent) {
            var dropped = dragEvent.moved && (dragEvent.originalX !== dragEvent.x || dragEvent.originalY !== dragEvent.y);
            if (dropped) {
                dragEvent.swipeLeft = dragEvent.originalX > dragEvent.x;
                dragEvent.swipeRight = dragEvent.originalX < dragEvent.x;
                dragEvent.swipeUp = dragEvent.originalY > dragEvent.y;
                dragEvent.swipeDown = dragEvent.originalY < dragEvent.y;
                dragEvent.swipeHorizontalDistance = Math.abs(dragEvent.originalX - dragEvent.x);
                dragEvent.swipeVerticalDistance = Math.abs(dragEvent.originalY - dragEvent.y);
            }
            if (e.type === 'touchcancel' || (/*event.type == 'pointermove' || */e.type === 'mousemove') && !dragEvent.moved)
                dragMan._keepTap = true;
            $document.trigger($.Event(dropped ? 'dragend.app' : 'dragcancel.app', { drag: dragEvent }));
            if (dropped || e.type === 'taphold') {
                //event.preventDefault();
                //event.stopPropagation();
                dragMan.dragged(true); // always indicate drop to prevent default UI responses
            }
            else {
                if (dragEvent.dir === 'all' && e.type === 'touchend') {
                    _lastTouch = { x: dragEvent.x, y: dragEvent.y };
                    elementAt(dragEvent).trigger('vclick');
                }
            }
            dragEvent.target = null;
            dragEvent.data = null;
            dragEvent = null;
            //$.event.special.tap.setup();
        }
        if (pendingDragEvent) {
            dragEvent = pendingDragEvent;
            pendingDragEvent = null;
            e.stopPropagation();
            e.preventDefault();
            dragEnd(e);
        }
        $document.off('pointermove mousemove touchmove', dragMove).off('pointerup pointercancel mouseup touchend touchcancel', dragEnd);
        if (!eventType.match(/mouse/))
            dragMan.lastTouchTime = timeNow();
    }

    function dragMove(e, force) {
        var eventType = e.type,
            isPointerMove = eventType === 'pointermove';
        if (pendingDragEvent) {
            var p = touchPoint(e),
                deltaX = Math.round(Math.abs(p.x - pendingDragEvent.x)),
                deltaY = Math.round(Math.abs(p.y - pendingDragEvent.y)),
                isHorizontalDir = pendingDragEvent.dir === 'horizontal',
                handler;
            if (deltaX < 10 && deltaY < 10) {
                if (dragEvent)
                    dragEvent.moved = false;
                if (!force)
                    return;
            }
            if (isHorizontalDir) {
                handler = dragMan[pendingDragEvent.type];
                if (handler.canScroll && !handler.canScroll(pendingDragEvent.target, 'vertical'))
                    deltaY = 0;
            }
            if (pendingDragEvent.dir === 'all' || isHorizontalDir && deltaX > deltaY && deltaX > (pendingDragEvent.mouse ? 3 : (pendingDragEvent.pointer ? 5 : 1)) && deltaY < (pendingDragEvent.pointer && pendingDragEvent.touch ? 10 : 9)) {
                clearLastTouchedLink();
                //alert(deltaX + ', ' + deltaY);
                dragEvent = pendingDragEvent;
                if (eventType === 'touchmove' || isPointerMove) {
                    dragEvent.cancelable = false;
                    e.preventDefault();
                }
                pendingDragEvent = null;
                if (!isPointerMove)
                    enablePointerEvents(false);
            }
            else {
                if (isHorizontalDir && (deltaX || deltaY))
                    clearLastTouchedLink();
                if (!isHorizontalDir || deltaY >= 1)
                    dragEnd(e);
            }
        }
        if (dragEvent) {
            e.preventDefault();
            clearHtmlSelection();
            var p = touchPoint(e);
            if (!dragEvent.moved) {
                dragEvent.moved = true;
                dragEvent.originalX = dragEvent.x;
                dragEvent.originalY = dragEvent.y;
            }
            if (dragEvent.x != p.x || dragEvent.y != p.y) {
                dragEvent.lastX = dragEvent.x;
                dragEvent.lastY = dragEvent.y;
                dragEvent.x = p.x;
                dragEvent.y = p.y;

                dragEvent.dropTarget = eventType.match(/touch|pointer/) ? document.elementFromPoint(p.x, p.y) : e.target;
                $document.trigger($.Event('dragmove.app', { drag: dragEvent }));
            }
        }
    }

    $document.on('mousedown pointerdown touchstart', '[data-draggable]', dragStart)
        /*.on('mousedown', function (event) {
        var draggable = $(event.target).closest('.app-draggable');
        if (draggable.length) {
            $.event.special.swipe.eventInProgress = true;
        }
    })*/.on('dragstart.app', function (e) {
        dragMan.call('start', e);
    }).on('dragmove.app', function (e) {
        dragMan.call('move', e);
    }).on('dragend.app', function (e) {
        dragMan.call('end', e);
    }).on('dragcancel.app', function (e) {
        dragMan.call('cancel', e);
    }).on('taphold.app', function (e) {
        dragMan.call('taphold', e);
    });

    function enablePointerEvents(enable) {
        if (!isTouchPointer || enable)
            $body[0].style.pointerEvents = enable ? '' : 'none';
    }

    dragMan['modaltitle'] = {
        options: {
            taphold: false
        },
        start: function (drag) {
            var that = this,
                target = drag.target.closest('.ui-page').find('.app-page-modal-title'), // drag may start on the app-icon-background or the title itself
                elem,
                rect;
            elem = elementAt(drag);
            rect = getBoundingClientRect(target);
            _input.blur();
            if (!elem.is('.app-btn') && _input.valid()) {
                drag.dir = 'all';
                that._deltaX = drag.x - rect.left;
                that._deltaY = drag.y - rect.top;
                that._page = target.closest('.ui-page');
                that._rect = getBoundingClientRect(that._page);
                that._minVis = rect.height;
            }
        },
        move: function (drag) {
            var that = this,
                minVisible = that._minVis,
                newX = drag.x - that._deltaX,
                newY = drag.y - that._deltaY;
            if (newX + that._rect.width < _screen.left + minVisible)
                newX = _screen.left + minVisible - that._rect.width;
            if (newX > _screen.left + _screen.width - minVisible - 1)
                newX = _screen.left + _screen.width - minVisible - 1;
            if (newY < _screen.top - that._deltaY)
                newY = _screen.top - that._deltaY;
            if (newY > _screen.top + _screen.height - minVisible - 1)
                newY = _screen.top + _screen.height - minVisible - 1;
            that._page.css({ left: newX, top: newY });
        },
        cancel: function (drag) {
            resetPageHeight();
        },
        end: function (drag) {
            this._page.data('moved', true);
        }
    };

    /* Dragging: hscrollbar */
    dragMan['hscrollbar'] = {
        options: {
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            var that = this,
                handle = drag.target,
                handleWidth = handle.width(),
                scrollbar = handle.parent(),
                dataView = findDataView(scrollbar.attr('data-view')),
                availWidth, scrollbarWidth,
                scrollable, ratio;
            if (dataView) {
                // we are scrolling a grid of a dataview
                availWidth = dataView.session('grid-avail-width');
                scrollbarWidth = scrollbar.outerWidth(true);
                that._maxScroll = availWidth - scrollbarWidth;
                ratio = availWidth / scrollbarWidth;
                if (_edit._dataViewId === dataView._id)
                    _edit.detach();
            }
            else {
                // we are "h" scrolling a list input (listbox, checkboxlist, radiobuttonlist
                that._dataView = null;
                scrollable = scrollbar.prev();
                if (scrollable.css('overflow-x') !== 'auto')
                    scrollable = scrollable.children().first();
                that._scrollable = scrollable;
                ratio = scrollable[0].offsetWidth / handleWidth;
            }
            scrollbar.addClass('app-scrollbar-dragging');
            // shared scroll target properties
            drag.dir = 'all';
            that._dataView = dataView;
            that._ratio = ratio;
            that._rect = getBoundingClientRect(scrollbar);
            that._offset = drag.x - handle.offset().left;
        },
        move: function (drag) {
            var that = this,
                dataView = that._dataView,
                scrollLeft = (drag.x - that._rect.left - that._offset) * that._ratio;
            if (dataView) {
                if (scrollLeft < 0)
                    scrollLeft = 0;
                else
                    scrollLeft = Math.min(scrollLeft, that._maxScroll);
                touch.scrollGrid(dataView, scrollLeft);
            }
            else
                that._scrollable.scrollLeft(scrollLeft);

        },
        cancel: function (drag) {
            this.end(drag);
        },
        end: function (drag) {
            var scrollbar = drag.target.parent(),
                dataView = this._dataView;
            scrollbar.removeClass('app-scrollbar-dragging');
            if (dataView) {
                focusScrollable(); // set focus on the scrollable of the page
                if (_edit._dataViewId === dataView._id)
                    setTimeout(_edit.sync, 0, { dataView: dataView, scrollIntoView: false });
            }
            else
                scrollbar.prev().trigger('focus'); // set focus on the app-data-list
        }
    };

    /* Dragging: vscrollbar */
    dragMan['vscrollbar'] = {
        options: {
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            drag.dir = 'all';
            this._scrollable = drag.target.parent().prev();
            drag.target.parent().addClass('app-scrollbar-dragging');
            //enablePointerEvents(false);
            // calculatations
            this._rect = getBoundingClientRect(drag.target.parent());
            this._ratio = this._scrollable[0].scrollHeight / this._scrollable.height();
            this._offset = drag.y - drag.target.offset().top;
        },
        move: function (drag) {
            var that = this;
            that._scrollable.scrollTop((drag.y - that._rect.top - that._offset) * that._ratio);
        },
        cancel: function (drag) {
            this.end(drag);
        },
        end: function (drag) {
            var scrollbar = drag.target.parent().removeClass('app-scrollbar-dragging'),
                r = getBoundingClientRect(scrollbar);
            if ($settingsEnabled('ui.scrollbars.expand') && $body.is('.app-desktop'))
                scrollbar.data({ hover: r.left <= drag.x && drag.x <= r.right && r.top <= drag.y && drag.y <= r.bottom, time: timeNow() }).addClass('app-scrollbar-hover');
            //findScrollable().focus();
            focusScrollable();
            //enablePointerEvents(true);
        }
    };

    /* Dragging: grid header */
    dragMan['grid-header'] = {
        options: {
            dataView: true
        },
        start: function (drag) {
            if (isTouchPointer) {
                // delegate dragging to the closest field separator
                var lastSeparator;
                drag.target.find('.app-field-separator').each(function () {
                    var separator = $(this),
                        offset = separator.offset(),
                        distance = drag.x - offset.left;
                    if (Math.abs(distance) <= 22)
                        lastSeparator = separator;
                });
                if (lastSeparator) {
                    drag.originalType = drag.type;
                    drag.type = 'grid-header-separator';
                    drag.target = lastSeparator;
                    dragMan['grid-header-separator'].start(drag);
                }
            }
        }
    };

    /* Dragging: grid header field */

    dragMan['grid-header-field'] = {
        options: {
            dataView: true
        },
        start: function (drag) {
            var target = drag.target,
                targetWidth,
                targetOffset = target.offset(),
                targetChanged;
            if (!drag.mouse) {
                // delegate dragging to the next or previous field seperator 
                targetWidth = target.width();
                if (targetWidth > scrollbarInfo.gridColumnPadding * 2)
                    if (targetOffset.left + targetWidth - scrollbarInfo.gridColumnPadding < drag.x) {
                        drag.target = target.next();
                        targetChanged = true;
                    }
                    else if (targetOffset.left + scrollbarInfo.gridColumnPadding > drag.x) {
                        if (target.prev().is('.app-field-separator')) {
                            drag.target = target.prev();
                            targetChanged = true;
                        }
                    }
            }
            if (targetChanged) {
                drag.originalType = drag.type;
                drag.type = 'grid-header-separator';
                dragMan['grid-header-separator'].start(drag);
            }
            else {
                drag.dir = drag.mouse ? 'all' : 'horizontal';
            }
        },
        move: function (drag) {
            var that = this,
                dataView = drag.dataView,
                dropTarget = that._lastDropTarget,
                dragLineGuide,
                dragLine = that._dragLine,
                dragLineXOffset = 0,
                scrollable, scrollableOffset,
                echo = findEcho(drag.target),
                lastDataItem,
                lineBottom,
                dataFieldValue, dropTargetClass,
                instantFeedback,
                autoScrollTolerance = isTouchPointer ? 30 : 20,
                firstDataItem, firstDataItemOffset, firstDataItemWidth, frozenWidth,
                mirror = that._mirror;

            if (_edit._dataViewId === dataView._id)
                _edit.detach(true);

            firstDataItem = (echo.length ? echo : findActivePage('.app-grid')).find('.dv-item').first();
            firstDataItemOffset = firstDataItem.offset();
            frozenWidth = dataView.session('grid-frozen-width') || 0;
            // create a drag line if needed
            if (!that._dragLine) {
                scrollable = findScrollable();
                scrollableOffset = scrollable.offset();
                instantFeedback = true;
                dropTarget = that._lastDropTarget = drag.target;
                that._targetFieldName = dropTarget.attr('data-field-name');
                lastDataItem = echo.length ? echo.find('.dv-item').last() : null;
                lineBottom = _screen.height - (lastDataItem ? lastDataItem.offset().top + lastDataItem.outerHeight() : (scrollableOffset.top + scrollable.outerHeight()));
                dragLine = that._dragLine = $div('app-drag-line').appendTo($body);
                dragLine.css({ 'top': dropTarget.offset().top, 'bottom': lineBottom });
                drag.target.css('color', dragLine.css('background-color'));

                var leftSeparator = dropTarget.prevAll('.app-field-separator').first(),
                    rightSeparator = dropTarget.nextAll('.app-field-separator').first(),
                    mirrorLeft = leftSeparator.length ? (leftSeparator.offset().left + Math.ceil(leftSeparator.outerWidth() / 2)) : (dropTarget.offset().left - (!isTouchPointer ? 2 : scrollbarInfo.gridColumnPadding / 2)),
                    mirrorRight = rightSeparator.offset().left + Math.ceil(rightSeparator.outerWidth() / 2),
                    mirrorPaddingTop = dropTarget.css('padding-top'),
                    mirrorPaddingBottom = dropTarget.css('padding-bottom');
                mirror = that._mirror = $span('app-drag-header-field').appendTo($body).css({
                    //left: mirrorLeft, top: dropTarget.offset().top,
                    'font-size': dropTarget.css('font-size'), paddingLeft: scrollbarInfo.gridColumnPadding / 2, paddingRight: scrollbarInfo.gridColumnPadding / 2,
                    paddingTop: mirrorPaddingTop, paddingBottom: mirrorPaddingBottom, textAlign: dropTarget.css('text-align')
                })
                    .width(mirrorRight - mirrorLeft - scrollbarInfo.gridColumnPadding)
                    .height(dropTarget.closest('.app-grid-header').height() - parseCss(mirrorPaddingTop) - parseCss(mirrorPaddingBottom)).text(dropTarget.text());
                that._mirrorDispX = drag.x - mirrorLeft;
                that._mirrorDispY = drag.y - dropTarget.offset().top + (drag.mouse ? 0 : dropTarget.outerHeight());
                that._mirrorWidth = mirror.outerWidth();
            }
            // find the the drop target
            firstDataItem.find('.app-field').each(function () {
                var fieldValue = $(this),
                    offset = fieldValue.offset();
                if (fieldValue.is('.app-frozen') || offset.left > firstDataItemOffset.left + frozenWidth)
                    if (drag.x >= offset.left - scrollbarInfo.gridColumnPadding / 2 && drag.x < offset.left + fieldValue.width() + scrollbarInfo.gridColumnPadding / 2)
                        dataFieldValue = fieldValue;
            });
            if (dataFieldValue) {
                dropTargetClass = dataFieldValue.attr('class').match(/\bapp-field-([\w\_]+)\b/i);
                if (dropTargetClass) {
                    dropTarget = dataFieldValue;
                    that._targetFieldName = dropTargetClass[1]
                }
            }
            that._lastDropTarget = dropTarget;
            // move the drag line
            dragLineGuide = dropTarget.prev();
            if (dragLineGuide.is('.app-field-separator'))
                dragLineXOffset = Math.ceil(dragLineGuide.outerWidth(true) / 2) + 2;
            else {
                dragLineGuide = dropTarget;
                dragLineXOffset = -scrollbarInfo.gridColumnPadding / 2;
            }

            if (dragLineGuide.length)
                dragLine.css({ transform: 'translate3d(' + (dragLineGuide.offset().left + dragLineXOffset) + 'px,0,0)', transition: instantFeedback || drag.instantFeedback ? '' : 'transform 160ms ease-out' });

            //that._mirror.css({ transform: 'translate3d(' + (drag.x - that._mirrorDispX) + 'px,' + (drag.y - that._mirrorDispY) + 'px,0)' });
            that._mirror.css({ left: drag.x - that._mirrorDispX, top: drag.y - that._mirrorDispY });

            drag.instantFeedback = false;
            clearTimeout(that._gridScrollTimeout);

            firstDataItemWidth = firstDataItem.width();

            //document.title = firstDataItemOffset.left + firstDataItemWidth - (drag.x - that._mirrorDispX + that._mirrorWidth - 1);

            if (firstDataItemOffset.left + firstDataItemWidth - (drag.x - that._mirrorDispX + that._mirrorWidth - 1) <= autoScrollTolerance || (drag.x - that._mirrorDispX) - (firstDataItemOffset.left + frozenWidth) <= autoScrollTolerance)
                that._gridScrollTimeout = setTimeout(function () {
                    var availWidth = dataView.session('grid-avail-width'),
                        maxScroll = Math.ceil(availWidth - availWidth * (firstDataItem.width() / availWidth)),
                        scrollLeft = dataView.session('scroll-left') || 0,
                        x = drag.x - that._mirrorDispX,
                        x2 = x + mirror.outerWidth() - 1,
                        leftEdgeProximity = x - (firstDataItemOffset.left + frozenWidth),
                        doScroll;
                    if (scrollLeft < maxScroll && firstDataItemOffset.left + firstDataItemWidth - x2 <= autoScrollTolerance) {
                        scrollLeft = Math.min(scrollLeft + 32, maxScroll);
                        doScroll = true;
                    }
                    else if (scrollLeft > 0 && leftEdgeProximity > 0 && leftEdgeProximity <= autoScrollTolerance) {
                        scrollLeft = Math.max(scrollLeft - 32, 0);
                        doScroll = true;
                    }
                    else
                        clearTimeout(that._gridScrollTimeout);
                    if (doScroll) {
                        dataView.session('scroll-left', scrollLeft);
                        gridScrollStyle(dataView, -scrollLeft, false);//, false, true);
                        drag.instantFeedback = true;
                        drag.dropTarget = document.elementFromPoint(lastTouchX(), lastTouchY())
                        that.move(drag);
                    }
                }, 100);
        },
        end: function (drag) {
            var that = this,
                dataView = drag.dataView,
                allFields = dataView._allFields,
                gs = dataView.gridSettings(),
                sequence = gs.sequence,
                fieldName = drag.target.attr('data-field-name'),
                beforeFieldName = that._targetFieldName;
            fieldName = allFields[dataView.findFieldUnderAlias(fieldName).Index].Name;
            beforeFieldName = allFields[dataView.findFieldUnderAlias(beforeFieldName).Index].Name;
            if (!sequence.length)
                $(dataView._fields).each(function () {
                    sequence.push(this.Name);
                });
            sequence.splice(sequence.indexOf(fieldName), 1);
            sequence.splice(sequence.indexOf(beforeFieldName), 0, fieldName);
            this._removeDragState(drag);
            dataView.gridChanged();
            updateReadingPaneMaster();
            updateReadingPaneDetail();
        },
        cancel: function (drag) {
            this._removeDragState(drag);
        },
        taphold: function (drag) {
            showFieldContext(drag.target, { x: drag.x, samples: false, hide: true });
        },
        _removeDragState: function (drag) {
            var that = this;
            clearTimeout(that._gridScrollTimeout);
            drag.target.css('color', '');
            that._lastDropTarget = null;
            if (that._dragLine) {
                // remove drag line
                that._dragLine.remove();
                that._dragLine = null;
                // remove mirror
                that._mirror.remove();
                that._mirror = null;
            }
        }
    };

    /* Dragging: grid header separator */

    dragMan['grid-header-separator'] = {
        options: {
            dataView: true,
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            var that = this,
                scrollable = findScrollable(),
                columnHeader = drag.target.prevAll('[data-field-name]').first(),
                echo = findEcho(columnHeader),
                lastDataItem = echo.length ? echo.find('.dv-item').last() : null,
                lineBottom = _screen.height - (lastDataItem ? lastDataItem.offset().top + lastDataItem.outerHeight() : (scrollable.offset().top + scrollable.outerHeight()));
            that._columnHeader = columnHeader;
            that._left = Math.ceil(columnHeader.offset().left);
            that._minRight = that._left + displayDensity() /* fieldToMinWidth(field) */ + drag.target.outerWidth() + 2;
            if (columnHeader.next().is('.app-btn-more'))
                that._minRight += columnHeader.next().outerWidth();
            that._maxRight = that._left + (columnHeader.closest('.app-bar-heading').length ? findScrollable() : columnHeader.closest('.app-grid')).width() * .75;

            that._dragLine = $div('app-drag-line').appendTo($body)
                .css({ 'transform': 'translate3d(' + (drag.target.offset().left + Math.floor(drag.target.outerWidth() / 2)) + 'px,0,0)', 'top': drag.target.offset().top, 'bottom': lineBottom });
            that._leftLine = $div('app-drag-line').appendTo($body)
                .css({ 'left': that._left - Math.ceil(scrollbarInfo.gridColumnPadding / 2), 'top': columnHeader.offset().top, 'bottom': lineBottom });
            columnHeader.css('color', that._dragLine.css('background-color'));
            drag.dir = drag.mouse ? 'all' : 'horizontal';

        },
        move: function (drag) {
            var that = this,
                x = drag.x;
            if (x < that._minRight)
                x = that._minRight;
            if (x > that._maxRight)
                x = that._maxRight;
            that._right = x;
            //that._dragLine.css('left', x);
            that._dragLine.css('transform', 'translate3d(' + x + 'px,0,0)');
        },
        end: function (drag) {
            var that = this,
                w = that._right - that._left - drag.target.outerWidth() - 2,
                dataView = drag.dataView,
                settings = dataView.gridSettings(),
                columnHeader = that._columnHeader,
                field = dataView.findField(columnHeader.attr('data-field-name'));
            if (columnHeader.next().is('.app-btn-more'))
                w -= columnHeader.next().outerWidth();
            if (!settings.width[field.Name])
                columnHeader.parent('.app-grid-header').find('[data-field-name]').each(function () {
                    var c = $(this),
                        w = c.width();
                    settings.width[c.attr('data-field-name')] = w;
                });
            settings.width[field.Name] = w;
            dataView.gridSettings(settings);
            dragMan.dragged(true);
            that._removeLine(drag);
            // change UI
            dataGridIsFitted(dataView, false, true);
            dataView.gridChanged();
            updateReadingPaneMaster();
            updateReadingPaneDetail();
        },
        cancel: function (drag) {
            this._removeLine(drag);
        },
        _removeLine: function (drag) {
            var that = this;
            drag.target.prevAll('[data-field-name]').first().css('color', '');
            that._dragLine.remove();
            that._leftLine.remove();
            that._columnHeader = null;
        },
        canScroll: function () {
            return false;
        }
    };

    /* Dragging: dismissable screen blocks */

    dragMan['dismiss'] = {
        start: function (drag) {
            drag.dir = 'all';
        },
        move: function (drag) {
        },
        end: function (drag) {
            this.cancel(drag);
        },
        cancel: function (drag) {
            drag.target.trigger('vclick');
        }
    };

    /* Dragging: panels */

    dragMan['panel'] = {
        options: {
            taphold: false
        },
        start: function (drag) {
            var that = this;
            that._position = drag.target.is('.ui-panel-position-right') ? 'right' : 'left';
            drag.dir = 'horizontal';
            that._lastX = that._x = drag.x;
            that._time = +new Date();
        },
        move: function (drag) {
            var that = this,
                panel = drag.target,
                dir = that._dir,
                displacement = drag.x - that._x;
            if (!that._dir) {
                dir = that._dir = panel.is('.ui-panel-position-right') ? 'right' : 'left';
                dir === 'right' ? panel.offset().left : panel.outerWidth();
                panel.css({ position: 'absolute' }); // ensures smooth "linear" movement on iOS
                that._animated = panel.is('.ui-panel-animate');
            }
            that._displacement = displacement;
            that._movedBy = drag.x - drag.lastX;
            if (dir === 'right')
                panel.css({ right: (isVirtualScreen() ? _screen.right : 0) + Math.min(0, -that._displacement) });
            else
                panel.css({ left: (isVirtualScreen() ? _screen.left : 0) + Math.min(0, that._displacement) });
            that._lastX = drag.x;
        },
        end: function (drag) {
            var that = this,
                displacement = that._displacement,
                panel = drag.target,
                width = panel.outerWidth(),
                swipeAwayDir = that._dir,
                swipeAwayDisplacement = isTouchPointer ? 30 : 10,
                isSwipeAwayDuration = +new Date() - that._time <= 250,
                doClose;

            function transitionEndCallback() {
                if (doClose)
                    panelClose(panel.css('visibility', 'hidden'), true);
                else
                    panel.css({ transform: 'none', transition: 'transform 0 linear', right: swipeAwayDir == 'right' ? 0 : '', left: swipeAwayDir === 'left' ? 0 : '' });
                that._done(panel);
            }

            if (swipeAwayDir === 'right') {
                if (!parseCss(panel, 'right'))
                    that._done(panel);
                else {
                    doClose = that._movedBy >= 0 && ((isSwipeAwayDuration && displacement >= swipeAwayDisplacement) || Math.abs(displacement) >= width * .5);
                    panel.css({ transition: 'transform 300ms ease', transform: 'translate3d(' + (doClose ? width - displacement : -displacement) + 'px,0,0)' })
                        .removeClass('ui-panel-animate').one('transitionend', transitionEndCallback);
                }
            }
            else {
                if (!parseCss(panel, 'left'))
                    that._done(panel);
                else {
                    doClose = that._movedBy < 1 && ((isSwipeAwayDuration && -displacement >= swipeAwayDisplacement) || Math.abs(width + displacement) <= width * .5);
                    //alert(that._movedBy + ', ' + width + ', ' + displacement + ', ' + doClose);
                    panel.css({ transition: 'transform 300ms ease', transform: 'translate3d(' + (doClose ? -(width + displacement) : -displacement) + 'px,0,0)' })
                        .removeClass('ui-panel-animate').one('transitionend', transitionEndCallback);
                }
            }
        },
        cancel: function (drag) {
            this._done(drag.target);
        },
        _done: function (panel) {
            var that = this;
            that._dir = null;
            panel.css({
                position: '', transition: '', transform: '',
                left: isVirtualScreen() ? (that._position === 'left' ? _screen.left : '') : '',
                right: isVirtualScreen() ? (that._position === 'right' ? _screen.right : '') : ''
            });
            if (that._animated)
                setTimeout(function () {
                    panel.addClass('ui-panel-animate');
                    panelIsBusy = false;
                }, 100);
            else
                panelIsBusy = false;
        },
        canScroll: function (target, direction) {
            return direction === 'vertical' ? target.height() < target[0].scrollHeight : true;
        }
    };

    /* Dragging: grid row */

    dragMan['data-item'] = {
        options: {
            dataView: true
        },
        start: function (drag) {
            var that = this,
                dataView = drag.dataView,
                viewStyle = dataView.extension().viewStyle(),
                listview = drag.target.closest('.app-listview'),
                gridWidth = dataView.session('grid-avail-width'),
                width = listview.width(),
                checkBox,
                scale, maxScroll,
                itemDragDrop;
            that._itemDragDrop = itemDragDrop = listview.closest('.app-can-drag').length && elementAt().is('.app-btn-more');
            if (itemDragDrop) {
                clearTimeout(dragMan._tapholdTimeout);
                drag.dir = 'all';
                that._itemDragging = false;
                that._dragHandle = drag.target.find('.app-btn-more').css('cursor', 'grabbing');
                that._scrollerR = getBoundingClientRect(findScrollable());
            }
            else if (viewStyle === 'Grid' && gridWidth > width) {
                if (dataView.multiSelect()) {
                    checkBox = drag.target.closest('.ui-btn').find('.app-btn-check');
                    if (checkBox.length && drag.x < checkBox.offset().left + checkBox.outerWidth() + 8)
                        return;
                }
                scale = width / gridWidth;
                maxScroll = Math.ceil(gridWidth - gridWidth * scale);
                that._maxScroll = maxScroll;
                that._originalX = drag.x;
                that._lastX = drag.x;
                that._listViewWidth = width;
                that._scrollLeft = dataView.session('scroll-left') || 0;
                drag.dir = 'horizontal';
                that._minScroll = parseCss($('span.' + classNameOfFirstScrollableColumnInGrid(dataView)), 'margin-left') + that._scrollLeft;
                dataView.session('scroll-left-margin', that._minScroll);
            }
        },
        move: function (drag) {
            var that = this,
                dataView = drag.dataView,
                delta,
                scrollLeft = that._scrollLeft,
                selectedItem,
                tooltipY,
                tooltipR = that._tooltipR;

            if (_edit._dataViewId === dataView._id)
                _edit.detach(true);

            if (that._itemDragDrop) {
                // item dragging is activated after "more" button was moved
                that._at = { x: drag.x, y: drag.y };
                if (!that._itemDragging) {
                    that._itemDragging = true;
                    selectedItem = drag.target.closest('.ui-btn');
                    if (selectedItem.parent().is('.dv-item') && !selectedItem.is('.app-selected,.app-checked')) {
                        if (!checkIfMultiSelect(dataView, selectedItem, 'none')) {
                            dataView.extension().clearSelection(true);
                            dataView.extension().tap(selectedItem.data('data-context').row, 'none');
                        }
                    }
                    that._clipboard = _app.clipboard.data({});
                    _app.clipboard.copy({ dataView: dataView, drag: true });
                    that._screen = $div('app-screen-generic').appendTo($body);
                    showTooltip(0, 0, _app.clipboard.data().text);
                    tooltipR = that._tooltipR = getBoundingClientRect(tooltip);
                    tooltip.data('keep', true);
                }
                that._draggingOver();
                tooltipY = drag.y + 32;
                if (tooltipY + tooltipR.height > _screen.top + _screen.height - 1)
                    tooltipY = drag.y - 32 - tooltipR.height
                showTooltip(drag.x - tooltipR.width / 2 + 6, tooltipY, _app.clipboard.data().text);
                that._autoScroll(that);
            }
            else {
                // horizontal scrolling in the grid
                delta = Math.ceil(that._originalX - drag.x);
                scrollLeft += delta;
                if (scrollLeft < 0) {
                    scrollLeft = 0;
                    that._originalX = drag.x;
                    that._scrollLeft = scrollLeft;
                }
                else if (scrollLeft > that._maxScroll) {
                    scrollLeft = that._maxScroll;
                    that._originalX = drag.x;
                    that._scrollLeft = scrollLeft;
                }
                drag.time = +new Date();
                dataView.session('scroll-left', scrollLeft);
                gridScrollStyle(dataView, -scrollLeft, true);
            }
        },
        end: function (drag) {

            function resetClipboard() {
                dataView.clipboard('clear');
                _app.clipboard.data(that._clipboard);
            }

            var that = this,
                scrollLeft = that._scrollLeft,
                dropAcceptTarget = that._accept,
                dataView = drag.dataView,
                row,
                s1 = +new Date(),
                s0 = drag.time,
                sd = (s1 - s0) * 100,     // seconds
                vd = drag.x - drag.lastX; // diff in pixels
            if (that._itemDragDrop) {
                that._dragHandle.css('cursor', '');
                that._stopDragDrop();
                if (dropAcceptTarget) {
                    row = dropAcceptTarget.data('data-context');
                    if (row)
                        row = row.row;
                    _app.clipboard.paste({ dataView: uiElementToDataView(dropAcceptTarget), row: row, callback: resetClipboard });
                }
                else
                    resetClipboard();
            }
            else {
                if (sd > 0 && Math.abs(vd) > 5) {
                    that._stopAnimation(drag);
                    var left = vd < 0 ? 1 : -1,
                        newScrollLeft = scrollLeft + that._listViewWidth * left;
                    // clamp to visible screen
                    if (newScrollLeft < that._minScroll)
                        newScrollLeft = 0;
                    else if (newScrollLeft > that._maxScroll)
                        newScrollLeft = that._maxScroll;
                    dataView.session('scroll-left', newScrollLeft);
                    gridScrollStyle(dataView, -newScrollLeft, false, true);
                }
                setTimeout(_edit.sync, 0, { dataView: dataView, scrollIntoView: false });
            }
        },
        cancel: function (drag) {
            var that = this;
            that._stopAnimation(drag);
            if (that._itemDragDrop) {
                that._dragHandle.css('cursor', '');
                if (that._itemDragging) {
                    that._stopDragDrop();
                    drag.dataView.clipboard('clear');
                    _app.clipboard.data(that._clipboard);
                }
            }
        },
        taphold: function (drag) {
            drag.target.trigger(drag.target.is('.app-btn-more') ? 'vclick' : 'contextmenu');
        },
        _stopAnimation: function (drag) {
            if (dragMan.scrollingAnimationFrame != null) {
                cancelAnimationFrame(dragMan.scrollingAnimationFrame);
                dragMan.scrollingAnimationFrame = null;
            }
            if (drag.moved && drag.dataView._id === _edit._dataViewId)
                setTimeout(_edit.frame, 600, 'show');
        },
        _autoScroll: function (dataItemDragMan, doScroll) {
            var that = dataItemDragMan,
                y = that._at.y,
                scrollable,
                scrollTop,
                scrollDir,
                delta = _screen.height * .07;
            hideStickyHeader();
            if (doScroll) {
                scrollDir = that._scrollerR.bottom - y < delta / 2 ? 'down' : y - that._scrollerR.top < delta / 2 ? 'up' : null;
                if (scrollDir) {
                    scrollable = findScrollable();
                    scrollTop = scrollable.scrollTop();
                    if (scrollDir === 'up' && scrollTop || scrollDir === 'down' && scrollTop < (scrollable[0].scrollHeight - that._scrollerR.height)) {
                        //scrollable.scrollTop(scrollable.scrollTop() + delta * (scrollDir === 'up' ? -1 : 1));
                        animatedScroll(scrollable.stop(true, true), scrollTop + delta * (scrollDir === 'up' ? -1 : 1), function () {
                            that._dropTarget = null;
                            that.move(dragEvent);
                            hideStickyHeader();
                        }, 200);
                    }
                }
            }
            else {
                clearTimeout(that._autoScrollTimeout);
                that._autoScrollTimeout = setTimeout(that._autoScroll, 225, that, true);
            }
        },
        _stopDragDrop: function () {
            var that = this;
            that._screen.remove();
            that._frame = null;
            that._dropTarget = null;
            that._accept = null;
            clearTimeout(that._autoScrollTimeout);
            tooltip.removeData('keep').hide();
        },
        _draggingOver: function () {
            var that = this,
                screen = that._screen,
                dragOver, dropTarget,
                itemFrame = that._frame,
                showFrame,
                dataView,
                r, r2;
            screen.hide()
            dragOver = elementAt(that._at);
            screen.show();
            dropTarget = dragOver.closest('.ui-btn');
            if (!dropTarget.parent().is('.dv-item'))
                dropTarget = dragOver.closest('.app-echo');
            if (!dropTarget.length)
                dropTarget = dragOver.closest('.app-listview');
            if (dropTarget[0] !== that._dropTarget) {
                that._dropTarget = dropTarget[0];
                if (dropTarget.length && !dropTarget.parent().is('.app-clipboard-cut')) {
                    dataView = uiElementToDataView(dropTarget);
                    if (dataView.clipboard('drop'))
                        showFrame = true;
                    else if (dataView.clipboard('viewdrop')) {
                        dropTarget = dragOver.closest('.app-echo');
                        if (!dropTarget.length)
                            dropTarget = dragOver.closest('.app-listview');
                        if (dropTarget.length)
                            showFrame = true;

                    }
                }
                if (showFrame) {
                    if (!itemFrame)
                        itemFrame = that._frame = $div('app-focus-frame').appendTo(screen);
                    r = getBoundingClientRect(dropTarget);
                    r = { left: r.left, top: r.top, width: r.width, height: r.height, cursor: dropTarget.is('.ui-btn') && dataView._id === _app.clipboard.data().id ? 'move' : '' };
                    screen.css('cursor', r.cursor || 'copy');
                    if (dropTarget.is('.ui-btn')) {
                        r2 = getBoundingClientRect(dropTarget.closest('.app-listview'));
                        if (r2.right < r.left + r.width - 1)
                            r.width -= r.left + r.width - 1 - r2.right;
                    }
                    if (dropTarget.is('.app-echo')) {
                        r.left -= 4;
                        r.top -= 4;
                        r.width += 8;
                        r.height += 8;
                    }
                    if (r.left + r.width >= _screen.left + _screen.width - 4)
                        r.width -= r.left + r.width - (_screen.left + _screen.width - 4);
                    if (r.left < _screen.left + 3) {
                        r.width -= _screen.left + 3 - r.left;
                        r.left = _screen.left + 3;
                    }
                    if (dropTarget.is('.app-listview')) {
                        r.top += 6;
                        r.width -= 6;
                    }
                    if (r.top < that._scrollerR.top + 5) {
                        // prevent overlapping of the focus frame with the toolbar
                        r.height -= that._scrollerR.top - r.top - 5;
                        r.top = that._scrollerR.top + 5;
                    }
                    if (!dropTarget.is(that._accept)) {
                        itemFrame.css(r).hide();
                        itemFrame.fadeIn('fast');
                    }
                    that._accept = dropTarget;
                }
                else if (itemFrame) {
                    itemFrame.stop(true, true).hide();
                    that._accept = null;
                    screen.css('cursor', '');
                }
            }
        }
    };

    dragMan['inputslider'] = {
        options: {
            immediate: true,
            taphold: false
        },
        start: function (drag) {
            var that = this,
                slider = drag.target,
                value = slider.find('.app-input-slider-value');
            drag.dir = 'all';
            that._data = slider;
            value.addClass('app-dragging');
            _input.slider('tooltip', { container: value, autoHide: false }),
                that._x = drag.x;
        },
        move: function (drag) {
            var slider = drag.target,
                track = slider.find('.app-input-slider-track'),
                value = slider.find('.app-input-slider-value'),
                halo = slider.find('.app-input-slider-halo'),
                trackValue = slider.find('.app-input-slider-track-value'),
                trackRect = getBoundingClientRect(track),
                x = drag.x;
            if (x < trackRect.left)
                x = trackRect.left;
            if (x > trackRect.right)
                x = trackRect.right;
            x -= trackRect.left;
            trackValue.css('width', x);
            value.css('left', x);
            halo.css('left', x);
            // set "feedback" to true when the slider is configured with the tick marks
            _input.slider('value', { container: slider, at: drag, feedback: false, autoHide: false });
        },
        end: function (drag) {
            this.cancel(drag);
        },
        cancel: function (drag) {
            var slider = drag.target,
                value = slider.find('.app-input-slider-value');
            _input.slider('value', { container: slider, at: _lastTouch, feedback: this._x === drag.x });
            hideTooltip();
            if (_app.intersect(drag, slider.find('.app-input-slider-halo')))
                _input.slider('tooltip', value);
            value.removeClass('app-dragging');

        },
    };


    /* Dragging: reading panel splitter */

    dragMan['reading-pane'] = {
        options: {
            //dataView: true,
            taphold: false,
            immediate: true
        },
        start: function (drag) {
            var that = this,
                splitter = _readingPane.splitter,
                splitterOffset = splitter.offset(),
                splitterLeft = splitterOffset.left,
                splitterTop = splitterOffset.top;
            that._originalLeft = splitterLeft;
            that._originalTop = splitterTop;
            if (_screen.splitLeft) {
                that._minLeft = splitterLeft - (_screen.splitLeft - _readingPane.minLeft);
                that._maxLeft = splitterLeft + (_screen.splitRight - _readingPane.minRight);
                that._offset = Math.round(drag.x) - splitterOffset.left;
            }
            else {
                that._minTop = splitterTop - (_screen.splitTop - _readingPane.minTop);
                that._maxTop = splitterTop + (_screen.splitBottom - _readingPane.minBottom);
                that._offset = Math.round(drag.y) - splitterOffset.top;
            }
            that._placeholder = splitter.clone().insertBefore(splitter.addClass('app-dragging'));
            drag.dir = 'all';// drag.mouse ? 'all' : _screen.splitLeft ? 'horizontal' : 'vertical';

        },
        move: function (drag) {
            //that._dragLine.css('transform', 'translate3d(' + x + 'px,0,0)');
            var that = this,
                x = Math.round(drag.x),
                y = Math.round(drag.y);
            if (_screen.splitLeft) {
                x -= that._offset;
                if (x < that._minLeft)
                    x = that._minLeft;
                if (x > that._maxLeft)
                    x = that._maxLeft;
                that._left = x;
                _readingPane.splitter.css('left', x);
            }
            else {
                y -= that._offset;
                if (y < that._minTop)
                    y = that._minTop;
                if (y > that._maxTop)
                    y = that._maxTop;
                that._top = y;
                _readingPane.splitter.css('top', y);
            }
        },
        end: function (drag) {
            var that = this;
            that._restore();
            if (_screen.splitLeft)
                pageVariable('splitLeft', that._left - _screen.left - appBars.left.width - 1);
            else
                pageVariable('splitTop', that._top - _screen.top - _screen.toolbarHeight);
            setTimeout(that._resize, 100); // let the virtual click processing to unwind
        },
        cancel: function (drag) {
            this._restore();
        },
        _restore: function () {
            var that = this;
            that._placeholder.remove();
            _readingPane.splitter.removeClass('app-dragging').css({ left: that._originalLeft, top: that._originalTop });
        }
        ,
        _resize: function () {
            readingPaneSplitChanged();
            performWindowResize();
            resetPageHeight();
            if (isReadingPaneDetail())
                calcPageMinWidth($('.app-reading-pane-master'));
        }
    };

    function readingPaneSplitChanged(page) {
        if (isReadingPaneDetail(page) || isReadingPaneMaster(page))
            resetPageHeight($('.app-reading-pane-' + (isReadingPaneDetail(page) ? 'master' : 'detail')));
    }

    function executeTextAction(target) {
        if (target.is('.app-text-action')) {
            var clipboard = _window.navigator.clipboard,
                textToCopy,
                field = _input.elementToField(target),
                dataView;
            if (clipboard && field) {
                dataView = field._dataView;
                textToCopy = dataView.fieldValue(dataView._allFields[field.AliasIndex].Name);
                if (textToCopy != null) {
                    textToCopy = field.format(textToCopy);
                    clipboard.writeText(textToCopy).then(function () {
                        touch.notify(textToCopy);
                    });
                    callWithFeedback(target);
                    findActivePage().removeData('last-focused-field');
                }
                return true;
            }
        }
    }

    // document event handlers
    _window.addEventListener('DOMContentLoaded', function () {
        touch.initialize();
        $touch.initializePage();
        _app._parse();
        touch.start();
    });
    //$document.ready(function () {
    ////    touch.initialize();
    ////    $touch.initializePage();
    ////    _app._parse();
    ////    touch.start();
    //})

    $document.on('mousedown', function (e) {
        saveTouchPoint(e);
    }).on('touchstart pointerdown', function (e) {
        saveTouchPoint(e);
        var target = $(e.target);
        if (target.is(':input') || executeTextAction(target))
            return;
        //if (!pointerIsTouch(event))
        //    return;
        if (isInTransition) {
            e.preventDefault();
            return;
        }

        var link = target.closest('a,.app-feedback'),
            p = startTouch = touchPoint(e);

        movementTestIsRequired = !_lastTouch.isScrollable;

        if (link.length) {
            lastTouchedLink = link.data('touch-start', p);
            if (!link.is(p.activeLinkBlacklist))
                if (link.parent().is('li')) {
                    //if (!isTouchPointer)
                    //    activeLink(link, false);
                    clearTimeout(lastTouchedLinkTimeout);
                    lastTouchedLinkTimeout = setTimeout(function () {
                        if (lastTouchedLink)
                            activeLink(lastTouchedLink, false);
                    }, 250);
                }
                else if (isTouchPointer)
                    activeLink(link, false);
        }
    }).on('touchmove pointermove', function (event) {
        //if (!pointerIsTouch(event))
        //    return;
        var clearAndPreventDefault,
            target = $(event.target),
            link = $(lastTouchedLink),
            scrollable = target.closest('.ui-panel-inner,.app-wrapper'),
            touch = touchPoint(event),
            start = link.length && link.data('touch-start'),
            scrollInfo;

        if (iOS && !link.length && target.closest('.app-bar-toolbar').length/* && !target.closest('.ui-btn').length*/) {
            event.preventDefault();
            return;
        }

        if (target.is('.ui-panel-dismiss,.ui-popup-screen,.app-scrollable-cover')) {
            event.preventDefault();
            return;
        }

        if (movementTestIsRequired) {
            movementTestIsRequired = false;
            if (scrollable.length) {
                if (touch.y > startTouch.y)
                    clearAndPreventDefault = scrollable.scrollTop() == 0;
                else if (touch.y < startTouch.y) {
                    scrollInfo = getScrollInfo(scrollable);
                    clearAndPreventDefault = scrollInfo.height >= scrollInfo.maxHeight - 1;
                }
            }
            if (clearAndPreventDefault) {
                clearLastTouchedLink();
                activeLink();
                event.preventDefault();
                if (iOS)
                    touchScrolling = false;
                return;
            }
        }
        if (link.length) {
            if (start && (start.scrollTop !== touch.scrollTop || Math.abs(start.x - touch.x) > 4 || Math.abs(start.y - touch.y) > 4))
                activeLink();
            clearLastTouchedLink();
        }
    }).on('touchend pointerup', function (e) {
        saveTouchPoint(e);
        //if (!pointerIsTouch(event))
        //    return;

        //var link = $(e.target).closest('a'),
        //    touch = touchPoint(e),
        //    start = link.length && link.data('touch-start');
        //if (link.length) {
        //    if (!start || (start.scrollTop != touch.scrollTop || Math.abs(start.x - touch.x) > 0 || Math.abs(start.y - touch.y) > 0))
        //        e.preventDefault();
        //}
        clearLastTouchedLink();
    }).on('touchcancel pointercancel', function (event) {
        //var touch = touchPoint(event);
        //alert(String.format('{0},{1} - {2}, {3} {4}', startTouch.x, startTouch.y, touch.x, touch.y, event.type));
        //if (!pointerIsTouch(event))
        //    return;
        activeLink();
        clearLastTouchedLink();
    }).on('scrollstart.app', function (e) {
        userActivity();
        if (!isReadingPaneMaster())
            whenStickyHeaderInForm(e, hideStickyHeader);
        lookupHidePopup();
    }).on('scrolldir.app scrollstop.app', function (e) {
        if (!e.relatedTarget)
            return;

        // identify top group if any
        var scrollable = $(e.relatedTarget),
            visibleLists = scrollable.find('> .app-listview').filter(fnVisible),
            groupList = visibleLists.find('.app-group'),
            dvHeading, scrollableTop, topVisibleGroup, newGroupHtml;
        if (groupList.length) {
            dvHeading = stickyHeaderTemplate(findPage(scrollable));
            if (dvHeading.length) {
                group = dvHeading.find('.app-group');
                if (!group.length) {
                    group = $div('app-group').appendTo(dvHeading);
                    if ($(groupList[0]).is('.app-group-fixed'))
                        group.addClass('app-group-fixed');
                }
                scrollableTop = scrollable.offset().top + stickyHeaderBar(scrollable).outerHeight(true);
                groupList.each(function () {
                    var g = $(this);
                    if (g.offset().top + g.outerHeight(true) / 2 > scrollableTop)
                        return false;
                    topVisibleGroup = g;
                });
                newGroupHtml = (topVisibleGroup || $(groupList[0])).html();
                if (newGroupHtml !== group.html()) {
                    group.html(newGroupHtml);
                    stickyHeaderBar(scrollable).find('.app-group').html(newGroupHtml);
                }
            }
        }

        // show/hide heading on demand
        var
            scrollDir = scrollable.data('scroll-dir'),
            visibleGrids = visibleLists.filter('.app-grid'),
            fixedGroups = visibleLists.find('.app-group-fixed').first(),
            alwaysShowHeading = visibleGrids.length > 0 || fixedGroups.length,
            header = scrollable.data('sticky-header'),//  stickyHeaderBar(scrollable),
            gridDesc = alwaysShowHeading ? header.find('.app-view-instruction,.app-group:not(.app-group-fixed)') : null,
            gridDescParent = gridDesc && gridDesc.parent();

        function doShowStickyHeader() {
            stickyHeader(scrollable);
        }

        if (scrollDir === 'up') {
            if (alwaysShowHeading && gridDesc.length && !gridDesc.is(':visible'))
                gridDesc/*.show()*/.removeClass('app-hidden');
            revealStickyHeaderInstruction(header);

            if (!whenStickyHeaderInForm(e, doShowStickyHeader, 200))
                doShowStickyHeader();
        }
        else if (scrollDir === 'down' || !scrollDir && alwaysShowHeading) {
            if (alwaysShowHeading) {
                gridDesc.addClass('app-hidden');
                gridDescParent.addClass('app-bar-text-instruction-hidden');
                _window._stickyHeaderHideInstruction = true;
                stickyHeader(scrollable);
            }
            else if (header)
                header.hide();
        }

        // handle scroll stop
        if (e.type === 'scrollstop') {
            _input.restoreLastPopup();
            clearInterval(scrollStopTimeout);
            scrollStopTimeout = setTimeout(function (relatedTarget) {
                var scrollInfo = getScrollInfo(relatedTarget);
                if (scrollInfo.top <= 0 && scrollInfo.height <= scrollInfo.maxHeight + 1) {
                    fetchOnDemand();
                    fetchEchos(null, null, scrollable.find('.app-echo'));
                }
            }, 250, scrollable);
        }
    }).on('contextmenu MSHoldVisual selectstart', function (e) {
        if (isInTransition)
            e.preventDefault();
        else if (e.type === 'contextmenu') {
            var target = $(e.target);
            if (target.is('.ui-popup-screen')) {
                var activePopupListView = $('.ui-popup-active .ui-popup.app-popup-listview'),
                    p, elem;
                if (activePopupListView.length)
                    if (isTouchPointer)
                        return false; // FireFox will trigger the "contextmenu" on the popup screen after taphold with touch
                    else {
                        closePopupWithoutTransition(activePopupListView);
                        //destroyPopup(activePopupListView);
                        e.preventDefault();
                        if (e.originalEvent) {
                            p = touchPoint(e);
                            elem = elementAt(p);
                            setTimeout(function () {
                                //var target = $(elem);
                                elem.trigger(elem.closest('.app-control-helper').length ? 'vclick' : 'contextmenu');
                            }, 75);
                        }
                    }
            }
            else if (target.closest('.ui-popup').length)
                e.preventDefault();
            else if (target.is('.app-has-children')) {
                e.preventDefault();
                setTimeout(function () {
                    target.trigger('vclick');
                }, 50);
            }
            else if (target.closest('.app-logo').length) {
                showAppMenu($(), true);
                return false;
            }
            else if (target.closest('[data-context-menu="true"]').length)
                return;
            else if (!(target.is(':input') || target.closest('article').length)) {
                var id = findEcho(target).attr('data-for'),
                    pageInfo = getPageInfo(id || target.closest('.ui-page').attr('id'));
                if (pageInfo) // pageInfo is null if user right-clicks the background of an active popup menu
                    return handleFieldContextMenu(pageInfo.dataView, e);
            }
        }
        else if (e.type === 'MSHoldVisual')
            e.preventDefault();
    })/*.on('selectstart', function (event) {
        if (!isDesktop() && !($(event.target).is(':input')))
            event.preventDefault();
    })*//*.one('pagecreate', '#Main', function () {
            mobile._pageCreated = true;
        })*/.on('vclick', 'a, .ui-btn', handleLinkClick
    ).on('vclick', '.app-input-value', function (event) {
        $(event.target).prev().trigger('focus');
        return false;
    }).on('vclick', '.app-btn-toggle', handleToggleClick
    ).on('vclick', '.app-has-depth .app-btn', function (e) {
        if (skipTap)
            return;
        var btn = $(this);
        touch.toggleTooltip(btn, btn.text() === 'expand_less');
        expandCollapseMenuItem(btn.closest('.app-has-depth'), true);
        return false;
    }).on('vclick', '.app-filter', function (event) {
        var echo = findEcho(event.target);
        if (echo.length)
            touch.contextScope(echo.attr('data-for'));
        configureFilter({ mode: 'everything' });
        return false;
    }).on('vclick', '[data-href]', function (e) {
        if (!e.isDefaultPrevented()) {
            var target = $(this),
                focusTarget = target.closest('.app-field');
            if (target.is('.app-control-inner') && target.parent().attr('data-input') !== 'none')
                return;
            focusTarget.addClass('app-selected');
            setTimeout(function () {
                focusTarget.removeClass('app-selected');
            }, feedbackDelay);
            _app.odp.blob('download', { dataView: uiElementToDataView(target), href: target.attr('data-href') });
            return false;
        }
    }).on('vclick', '.app-filter-clear', function (e) {
        var dataView = uiElementToDataView(e.target);
        clearDataFilter(dataView);
        return false;
    }).on('vclick', '.app-form-clear-all', function (e) {
        var target = $(e.target),
            form = target.closest('[data-layout="form"]'),
            dataView = uiElementToDataView(target),
            values = {};
        form.find('[data-control][data-field]').each(function () {
            var f = dataView.findField($(this).attr('data-field'));
            if (f && f.Type !== 'DataView' && !f.OnDemand) {
                values[f.Name] = null;
                if (f.Index !== f.AliasIndex) {
                    f = dataView._allFields[f.AliasIndex];
                    values[f.Name] = null;
                }
            }
        });
        inputExecute(values);
        form.find('.app-has-clear-all').removeClass('app-form-clear-all-visible');
        dataView._showClearAll = true;
        return false;
    }).on('vclick contextmenu', '.app-grid-header', function (e) {
        //  > span:not(.app-btn-more)
        if (dragMan.dragged() || skipTap) {
            e.preventDefault();
            e.stopPropagation();
            return;
        }
        clearHtmlSelection();
        var target = $(e.target),
            options = { x: e.pageX, y: null };
        if (target.is('.app-btn-more')) return;
        if (e.type === 'contextmenu' && target.is('u'))
            target = target.parent();
        if (!isTouchPointer && target.is('.app-btn-sort,u') && e.type === 'vclick') {
            newSortExpression = target.closest('[data-field-name]').data('field-name') + ' ' + (target.data('sort') === 'asc' ? 'desc' : 'asc');
            updateSortExpressionIfChanged(target);
            return;
        }
        if (target.is('.app-icon,.app-grid-header-text,.app-field-menu'))
            target = target.parent();
        if (isMultiSelectCheckBoxClick(e))
            toggleSelectedRows(uiElementToDataView(target), null, true);
        else {
            if (!target.attr('data-field-name')) {
                $(this).find('span').each(function () {
                    var elem = $(this),
                        x = elem.offset().left;
                    if (!elem.is('.app-btn-check,.app-btn-more,.app-frozen-spacer') && x <= e.pageX && e.pageX < x + elem.outerWidth(true)) {
                        target = elem;
                        return false;
                    }
                });
            }
            if (target.is('.app-frozen-spacer'))
                target = target.next();
            if (target.is('span') && !target.is('.app-btn-check,.app-field-separator')) {
                target.addClass('ui-btn-active');
                if (options.x)
                    options.y = target.offset().top + target.outerHeight() * .75;
                if (e.type === 'contextmenu' || e.type === 'vclick' && e.ctrlKey) {
                    options.samples = false;
                    //options.hide = true;
                }
                e.preventDefault();
                setTimeout(function () {
                    target.removeClass('ui-btn-active');
                    showFieldContext(target, options);
                }, feedbackDelay);
            }
        }
        return false;
    }).on('vclick contextmenu', '.app-bar-heading', function (e) {
        var target = $(e.target);
        if (target.closest('.app-group').length && !target.is('.app-group')) {
            configureGroupBy(true);
            return false;
        }
    }).on('vclick', '.app-kiosk .app-btn-scan', showScannerForm
    ).on('notifymore.app', function (e) {
        _app.alert(e.notifyData.text);
    });


    /*.on('keydown keypress', function (event) {
        var target = $(event.target),
            toolbar = mobile._toolbar,
            isKeyDown = event.type == 'keydown',
            text, key = event.key, keyCode = event.keyCode,
            searchButton, searchInput,
            isF3 = isKeyDown && (keyCode == 114 || keyCode == 70 && event.ctrlKey),
            isEsc = isKeyDown && keyCode == 27,
            scrollable, scrollableTop, scrollableBottom,
            dataView;

        if (isKeyDown && !(isEsc || isF3))
            return;

        if (findActivePage()[0].className.match(/\bapp-page-modal\b/))
            return;

        if (!target.is('#app-input-search')) {
            text = String.fromCharCode(event.which);
            if (text.match(/[\w\-\"]/) || isEsc || isF3) {
                if (advancedSearchPageIsActive() && !_pendingQueryText) {
                    if (isF3) {
                        setTimeout(function () {
                            switchToQuickFind(mobile._contextButton);
                        });
                        return false;
                    }
                    if (isEsc && !$body.find('.ui-popup-active').length) {
                        clickMenuButton();
                        return false;
                    }
                }
                else if (getActivePageId() == 'taskassistant' && isEsc) {
                    clickMenuButton();
                    return false;
                }

                if (!searchButton) {
                    searchButton = toolbar.find('.ui-icon-search:visible');
                    dataView = activeDataView();
                }
                if (searchButton.length) {

                    if (isEsc) {
                        if (dataView && dataView.extension().quickFind()) {
                            quickFind(dataView, '');
                            resetInstruction(dataView);
                            higlightButton(searchButton);
                        }
                        else
                            return false;
                    }
                    else if (isF3) {
                        searchButton.trigger('vclick', false);
                        higlightButton(searchButton);
                    }
                    else if (event.type == 'keypress') {
                        if (advancedSearchPageIsActive())
                            return;
                        if (_pendingQueryText != null)
                            text = _pendingQueryText + text;
                        _pendingQueryText = text;
                        if (_pendingQueryText.length == 1) {
                            searchButton.trigger('vclick', false);
                            higlightButton(searchButton);
                        }
                    }
                    return false;
                }
            }
        }
        if (isF3)
            return false;
    })*//*.on(' ', '[data-field-name]+[data-draggable]', function () {
        // TODO: consider auto-sizing columns to content in future released
    }).on('editorstart.app', editorStart
        ).on('editorstop.app', editorStop
        )*/;

    // window event handlers

    function fitSummaryToolbars(container) {
        if (container) {
            container.find('[data-control="dataview"]').each(function () {
                var controlId = $(this).attr('id'), pageInfo, echo;
                if (controlId) {
                    pageInfo = getPageInfo(controlId.substring(0, controlId.length - 3)),
                        echo = findEcho(pageInfo.id);// $('#' +  + '_echo');
                    if (echo.is(':visible') && pageInfo.echoId && !pageInfo.dataView._busy())
                        echoRefreshToolbar(pageInfo.dataView, echo);
                }
            });
        }
        else
            findActivePage('.app-echo-toolbar').each(function () {
                echo = $(this).parent();
                if (echo.is(':visible')) {
                    pageId = echo.attr('data-for');
                    pageInfo = getPageInfo(pageId);
                    if (pageInfo.echoId && !pageInfo.dataView._busy())
                        echoRefreshToolbar(pageInfo.dataView, echo);
                }
            });
    }

    var resizeStarted;

    function startToResize() {
        if (!resizeStarted) {
            resizeStarted = true;
            touch.promo(false);
            if (_screen.splitLeft != null && _screen.toolbarWidthChanged || _screen.splitLeft == null && _screen.physicalWidth != $window.width())
                hideMenuStrip();
            _screen.toolbarWidthChanged = false;
            hideTooltip();
            lookupHidePopup();
            if (findModalRoot().length)
                touch.promo(false);
            updateMenuStripState(false);
            if (!_input.keyboard('virtual')) {
                var popup = $('.ui-popup');
                if (popup.is('.app-popup-message,.app-popup-listview'))
                    closePopupWithoutTransition(popup);
                else
                    popup.popup('reposition', { positionTo: 'window' });
            }
            $document.trigger('resizing.app');
        }
    }

    function calcPageMinWidth(page) {
        if (!page)
            page = findActivePage();
        var pageClasses = page.attr('class').split(/\s+/),
            pageSize = screenBreakpoints.indexOf(toLogicalWidth(page.width())),
            pageSizeClasses = [], i;
        if (!pageSize)
            pageSize++; // do not assign "tn"
        if (pageSize === screenBreakpoints.length - 1)
            pageSize--; // do not assign "xxl"
        for (i = 1; i <= pageSize; i++)
            pageSizeClasses.push('app-min-' + screenBreakpoints[i]);

        while (i < pageClasses.length)
            if (pageClasses[i].match(/^app\-min\-/) && pageSizeClasses.indexOf(pageClasses[i]) === -1)
                pageClasses.splice(i, 1)
            else
                i++;
        for (i = 0; i < pageSizeClasses.length; i++)
            if (pageClasses.indexOf(pageSizeClasses[i]) === -1)
                pageClasses.push(pageSizeClasses[i]);

        page.attr('class', pageClasses.join(' '))
        //page.addClass(pageSizeClasses.join(' '));
        //    pageSizeClasses = [];
        //    for (i = pageSize + 1; i < screenBreakpoints.length - 1; i++)
        //        pageSizeClasses.push('app-min-' + screenBreakpoints[i]);
        //    page.removeClass(pageSizeClasses.join(' '));
    }

    function pageResized(doRefreshContext, container) {
        if (isInTransition) return;
        _edit.detach();
        tapping();
        var pageInfo = getPageInfo(),
            scrollable = findScrollable(container);
        if (doRefreshContext) {
            resizeStarted = false;
            updateSidebarVisibility();
            $('.ui-panel-dismiss').height(_screen.height);
            var modalRoot = findModalRoot(),
                activePage = findActivePage();
            resetPageHeight(activePage);
            readingPaneSplitChanged(activePage);
            if (modalRoot.length) {
                resetPageHeight(modalRoot);
                if (isReadingPaneDetail(activePage))
                    resetPageHeight(activePage);
                else if (isReadingPaneMaster(activePage))
                    updateReadingPaneDetail();
                configurePromoButton(pageInfo ? pageInfo.dataView : null);
                arrangeModalPages();
                //if (activePage.is('.app-modal-keyboard'))
                //    resetPageHeight(activePage);
            }
            refreshContext(false, null, function () {
                gridStyleChanged();
                updateReadingPaneMaster();
                syncEmbeddedViews(scrollable);
                setupGridHeaderStyle();
                stickyHeader();
                fitTabs();
                _edit.sync({ scrollIntoView: false });
                fetchOnDemand();
            });
        }
        hideTooltip();

        calcPageMinWidth(container);
        syncEmbeddedViews(scrollable);
        resizeSignatures(scrollable);
        if (!doRefreshContext)
            fetchOnDemand(null, container);
        configurePromoButton();
        updateSidebarVisibility();

        if ($('.app-reading-pane-detail:not(.app-hidden)').length) {
            if (_screen.splitTop)
                $body.addClass('app-has-reading-pane app-has-reading-pane-bottom').removeClass('app-has-reading-pane-right');
            if (_screen.splitLeft)
                $body.addClass('app-has-reading-pane app-has-reading-pane-right').removeClass('app-has-reading-pane-bottom');
        }

        if (appBars.left.visibile)
            appBars.left.inner.trigger('scroll');
        moveFooterAboveNotificationBar();
        showHideTabBar(pageInfo, true);
        resetStickyHeader(scrollable);
        if (pageInfo && isReadingPaneDetail())
            resetStickyHeader('.app-reading-pane-master');
        if (doRefreshContext)
            updateScrollbars(scrollable);
        else
            setTimeout(updateScrollbars, 0, scrollable);
        clearTimeout(echoTimeout);
        echoTimeout = setTimeout(function () {
            if (isInTransition) return;
            fetchEchos();
            touch.refreshMenuStrip();
            showPresenters(scrollable);
            if (isReadingPaneDetail())
                showPresenters(findScrollable('.app-reading-pane-master'));
        }, 1000);
        scrollTextInputIntoView(scrollable);
        if (doRefreshContext) {
            fitSummaryToolbars();
            fitTabs();
            tapping();
            $document.trigger('resized.app');
            _input.restoreLastPopup();
            if (tooltip && tooltip.is('.app-tooltip-message')) {
                var data = tooltip.data();
                if (data && data.fieldName)
                    setTimeout(inputFocus, 100, data);
            }
        }
    }

    $window.on('resize', function () {
        _input.keyboard('detect');
        startToResize();
        screenChanged();
        if (_screen.isVirtual)
            closePopupsAndPanels(true);
    }).on('throttledresize', function () {
        screenChanged();
        pageResized(true);
    }).on('orientationchange', function () {
        _input.keyboard('detect');
        screenChanged();
        pageResized(true);
    }).on('popstate', function () {
        // back button has been pressed
        _input.ignoreErrors = true;
    }).on('focus', function (e) {
        barcodeResetMonitor();
        if ($touch.activePage && (!isInDesignMode() || appStudio()) && !findInput().length && _windowAutoFocus && !uiAutomation() && !findActivePage().data('moved'))
            focusLastInput();
    }).on('beforeunload', function (e) {
        if (findActivePage().is('#Main'))
            contentScrollTop('save');
    }).one('beforeinstallprompt', function (e) {
        touch.installPrompt = e.originalEvent;
        var clientInstallPrompt = settings.client.prompt || 'always';
        if (clientInstallPrompt !== 'system')
            e.preventDefault();
        if (clientInstallPrompt === 'authenticated')
            clientInstallPrompt = _app.userName() ? 'always' : 'none';
        if (clientInstallPrompt === 'always' && userVariable('installPrompt?') !== false)
            installApp._interval = setInterval(installApp, 100, true);
    });

    function canInstallApp() {
        return touch.installPrompt && !isBusy() && !location.hash.match(/^#myprofile/) && !accountManagerScreen().is(':visible');
    }

    function installApp(prompt) {

        var installPrompt = touch.installPrompt;

        function doInstall() {
            touch.progress('show', { text: resources.Mobile.Wait });
            installPrompt.prompt();
            installPrompt.userChoice.then(function (choiceResult) {
                touch.progress('hide');
                touch.installPrompt = null;
                //    if (choiceResult.outcome === 'accepted') {
                //        // the app is being installed
                //    }
                //    else {
                //    }
            });
        }

        if (canInstallApp())
            if (prompt) {
                touch.installPrompt = null;
                clearInterval(installApp._interval);
                whenPageShown(function () {
                    whenPageCanceled(function () {
                        touch.installPrompt = installPrompt;
                    });
                });
                _app.survey({
                    context: 'install',
                    text: resources.PWA.Install,
                    text2: touch.appName(),
                    questions: [
                        {
                            name: 'Choice',
                            text: false,
                            required: true,
                            value: 'install',
                            items: {
                                style: 'RadioButtonList',
                                list: [
                                    { value: 'install', text: resources.PWA.InstallApp.replace(/XXXXX/, '<b>' + touch.appName() + '</b>') },
                                    { value: 'stop', text: resources.PWA.DoNotPrompt }
                                ]
                            },
                            htmlEncode: false
                        }
                    ],
                    options: {
                        modal: {
                            fitContent: true,
                            max: 'xxs',
                            always: true,
                        },
                        contentStub: false,
                        materialIcon: 'install_' + (isTouchPointer ? 'mobile' : 'desktop'),
                        discardChangesPrompt: false
                    },
                    submitText: resources.OAuth2.Continue,
                    //submit: 'installprompt.app'
                    submit: function (e) {
                        if (e.dataView.data().Choice === 'install')
                            doInstall();
                        else
                            userVariable('installPrompt', false);
                    }
                });

            }
            else {
                closePopupsAndPanels(true);
                doInstall();
            }
    }

    function contentScrollTop(method) {
        if (method === 'restore') {
            if (performance && performance.getEntriesByType)
                performance.getEntriesByType("navigation").forEach(function (entry) {
                    if (entry.type === "back_forward")
                        contentScrollTop();
                });
        }
        else {
            var instance = _app.storage.instance;
            if (instance) {
                instance('session');
                if (method === 'save')
                    pageVariable('_scrollTop', findScrollable().scrollTop());
                else
                    findScrollable().scrollTop(pageVariable('_scrollTop'));
                instance('default');
            }
        }
    }

    touch.contentScrollTop = contentScrollTop;

    function windowAutoFocus(enable) {
        if (enable == null)
            _windowAutoFocus = true;
        else if (enable && !_windowAutoFocus)
            setTimeout(windowAutoFocus, 50);
        else
            _windowAutoFocus = enable;
    }

    // tooltip API

    $document.on('mousedown', function () {
        var tt = tooltip && tooltip[0];
        if (tt && tt.display !== 'none' && !tt.className.match(/\bapp-tooltip-message\b/))
            hideTooltip();
    }).on('mousemove', function (e) {
        if (e.pageX != null) {
            mouseX = e.pageX;
            mouseY = e.pageY;
        }
    }).on('vclick', '.app-tooltip-message', function () {
        hideTooltip();
        focusLastInput();
    }).on('mouseenter'/* mousemove*/, '[title],[data-title]', function (e, delay) {
        var elem = $(this),
            dataTitle = elem.attr('data-title'),
            hasDataTitle = typeof dataTitle == 'string' && dataTitle.length,
            title = elem.attr('title'),
            hasTitle = typeof title == 'string' && title.length,
            originalMouseX = mouseX,
            originalMouseY = mouseY,
            target = e.target;
        if (hasDataTitle)
            title = dataTitle;
        if (hasTitle)
            elem.attr('data-title', title).removeAttr('title');
        if (!hasTitle && !hasDataTitle)
            return;
        //if (preventMouseEnter) {
        //    if (title) {
        //        elem.removeAttr('title');
        //        setTimeout(function () {
        //            elem.attr('data-title', title);
        //        }, 1000);
        //    }
        //    return;
        //}
        //elem.removeAttr('title').attr('data-title', title);
        clearTimeout(tooltipTimeout);
        //tooltipTimeout = setTimeout(showHideTooltip, delay != null ? delay : tooltipDelay, elem, title, originalMouseX, mouseX, originalMouseY, mouseY);
        tooltipTimeout = setTimeout(function () {
            tooltipTimeout = null;
            //delay = 10;
            if (dragEvent && !dragEvent.tooltip) return;
            var pos = elem.offset();
            if ((elem[0].namespaceURI === nsSVG && Math.abs(originalMouseX - mouseX) <= 11 && Math.abs(originalMouseY - mouseY) <= 11) || (mouseX >= pos.left && mouseX < (pos.left + elem.outerWidth()) && mouseY >= pos.top && (mouseY < pos.top + elem.outerHeight())) || tooltip && !tooltip.is(':visible')) {
                if (!(tooltip && tooltip.is('.app-tooltip-message:visible') && tooltipDate > new Date()))
                    showTooltip(mouseX, mouseY + 23, title, elem); // 23 is the size of the mouse cursor?
                // TODO: raise tooltip.app event here
            }
            else
                if (tooltip && !tooltip[0].className.match(/\bapp-tooltip-message\b/)/*!tooltip.is('.app-tooltip-message')*/)
                    tooltip.hide();
        }, delay != null ? delay : tooltipDelay);

    }).on('mouseleave', '[data-title]', function (event) {
        //if (dragEvent && dragEvent.tooltip == false) return;
        //var elem = $(this),
        //    title = elem.attr('data-title');
        //if (title)
        //    elem.attr('title', title).removeData('title');
        if (tooltip && !tooltip[0].className.match(/\bapp-tooltip-message\b/)/* !tooltip.is('.app-tooltip-message')*/)
            hideTooltip();
    });

    function hideTooltip() {
        if (tooltip && tooltip[0].style.display !== 'none' && !tooltip.data('keep'))
            tooltip.hide();
        if (tooltipTimeout) {
            clearTimeout(tooltipTimeout);
            tooltipTimeout = null;
        }
    }

    function showTooltip(x, y, text, elem, isMessage) {
        if (isTouchPointer && !isMessage)
            return;
        var lines = text.split(/\n/g),
            targetScreen = elem && elem.parent().is('.studio-toolbar') ? { top: 0, left: 0, width: _screen.physicalWidth, height: _screen.physicalHeight } : _screen,
            screenWidth = targetScreen.width,
            screenLeft = targetScreen.left,
            tbl;
        //y += 23 - this is from the model builder
        if (!tooltip) {
            tooltip = $div('app-tooltip');
            if (highScreenDPI())
                tooltip.addClass('app-large');
            tooltip.insertBefore('.ui-page:first');
            tooltip._outer = tooltip.outerWidth();
            tooltip._maxw = parseCss(tooltip, 'max-width');
        }
        tooltip.css({ left: '', top: '', maxWidth: Math.min(tooltip._maxw, screenWidth - tooltip._outer) }).text(text);
        if (lines)
            if (text.match(/\t/)) {
                tbl = $htmlTag('table').appendTo(tooltip.empty());
                $(lines).each(function () {
                    var cells = this.split(/\t/g),
                        tr = $htmlTag('tr').appendTo(tbl);
                    $(cells).each(function () {
                        var s = this,
                            td = $htmlTag('td').appendTo(tr);
                        if (s.match(/"/))
                            td.html(s.replace(/"(.+?)"/g, '<b>$1</b>'));
                        else
                            td.text(s);
                    });
                });
            }
            else {
                tooltip.empty().removeClass('app-tooltip-message');
                $(lines).each(function (index) {
                    var s = _app.safeHtml(this);
                    if (index)
                        $('<br/>').appendTo(tooltip);
                    if (s.match(/"/))
                        s = s.replace(/"(.+?)"/g, '<b>$1</b>');
                    $span().appendTo(tooltip).html(s);
                });
            }
        tooltip.show();
        var scrollLeft = $window.scrollLeft(),
            scrollTop = $window.scrollTop(),
            tooltipWidth = tooltip.outerWidth(),
            tooltipHeight = tooltip.outerHeight(),
            elemOffset, positioned, elemWidth,
            elemClassName = elem && elem[0].className, oldX;
        if (isMessage)
            y += 2;
        if (typeof elemClassName == 'string') {
            var tooltipLocation = elem.attr('data-tooltip-location');
            if (elemClassName.match(/\bapp-btn-float\b/)) {
                elemOffset = elem.offset();
                x = elem.css('right') !== 'auto' ? elemOffset.left - tooltipWidth - 8 : elemOffset.left + elem.outerWidth() + 12;
                y = elemOffset.top + elem.outerHeight() / 2 - tooltipHeight / 2 + 1;
                positioned = true;
            }
            else if (elemClassName.match(/\bapp-btn-tooltip\b/) || tooltipLocation === 'left') {
                elemOffset = elem.offset();
                elemWidth = elem.outerWidth();
                oldX = x;
                x = elemOffset.left + elemWidth + 12;
                if (x + tooltipWidth > screenWidth + screenLeft) {
                    x = elemOffset.left - 12 - tooltipWidth;
                    if (x >= screenLeft)
                        positioned = true;
                    else
                        x = oldX;
                }
                else
                    positioned = true;
                if (positioned)
                    y = elemOffset.top + elem.outerHeight() / 2 - tooltipHeight / 2 + 1;
            }
            else if (elemClassName.match(/\bui-btn\b/) && elem.closest('.app-sidebar').length) {
                if (appBars.left.mini) {
                    x = appBars.left.width + 6 + screenLeft;
                    y = elem.offset().top + elem.outerHeight() / 2 - tooltipHeight / 2 + 1;
                    positioned = true;
                }
                else if (elem.parent().is('.app-bar-toolbar-bottom')) {
                    tooltipLocation = 'above';
                }
            }
            if (tooltipLocation === 'above') {
                elemOffset = elem.offset();
                y = elemOffset.top - tooltipHeight - 6;
                x = elemOffset.left + (elem.attr('data-tooltip-align') === 'left' ? 0 : elem.outerWidth() / 2 - tooltipWidth / 2);
                var bar = elem.closest('.app-bar-buttons');
                if (bar.length)
                    y -= elemOffset.top - getBoundingClientRect(bar).top;
                if (x < 0)
                    x = 2;
                if (x + tooltipWidth > screenLeft + screenWidth)
                    x = screenLeft + screenWidth - tooltipWidth - 2;

                positioned = true;
            }
        }
        if (!positioned) {
            if (scrollLeft + x + tooltipWidth >= scrollLeft + screenWidth + screenLeft)
                x = scrollLeft + screenWidth + screenLeft - tooltipWidth - 2;
            if (scrollTop + y + tooltipHeight >= scrollTop + targetScreen.height + targetScreen.top)
                y = y - 24 - tooltipHeight;
        }
        tooltip.css({ left: Math.max(screenLeft, positioned ? x : x - 5), top: y });
        if (isMessage) {
            tooltipDate = new Date();
            tooltipDate.setSeconds(tooltipDate.getSeconds() + 10);
            tooltip.addClass('app-tooltip-message');
        }
    }

    /***********************/
    /* Universal Input API */
    /***********************/

    _input = _app.input = {
        methods: {
            'none': { render: nop },
            'text': {
                render: function (options) {
                    var container = options.container,
                        inner = options.inner,
                        row = options.row,
                        field = options.field,
                        dataView = field._dataView,
                        allFields = dataView._allFields,
                        textMode,
                        originalField = options.originalField,
                        item, v, t,
                        itemsStyle;
                    if (!originalField && field.Index !== field.AliasIndex)
                        field = allFields[field.AliasIndex];
                    itemsStyle = field.ItemsStyle;
                    textMode = field.TextMode;
                    v = row[field.Index];
                    if (typeof v == 'string' && !v.length)
                        v = null;
                    _input.methods.text._checkIfChanged(field, v, container);
                    container.removeClass('app-has-helper');
                    if (v == null) {
                        t = options.editing ? _input.fieldToPlaceholder(originalField || field) : '';//nullValueInForms;
                        container.addClass('app-null');
                    }
                    else {
                        if (itemsStyle && itemsStyle !== 'Lookup' && itemsStyle !== 'AutoComplete') {
                            item = dataView._findItemByValue(field, v);
                            if (item)
                                t = item[1];
                        }
                        else
                            t = field.text(v, true);
                        if (textMode === 1)
                            t = new Array(t.length + 1).join('&#9679;');
                        container.removeClass('app-null');
                    }
                    if (textMode === 2)
                        inner.addClass('app-field-data-rtf');
                    if (field.Rows && !field.ItemsTargetController && !itemsStyle)
                        inner.css({ 'min-height': field.Rows + 'em'/*, 'white-space': 'pre-line' */ }).addClass('app-text-multiline');

                    if (isNullOrEmpty(t))
                        inner.html('&nbsp;');
                    else {
                        t = t.trim();
                        if (field.HtmlEncode && textMode !== 1)
                            inner.text(t);
                        else
                            inner.html(t);
                    }
                    if (setSmartValue(inner, field, v, t, true))
                        inner.attr('title', t);
                    if (allFields[field.OriginalIndex].is('text-action-copy')) {
                        container.attr('data-text-action', 'copy');
                        if (!container.find('.app-text-action').length)
                            materialIcon('material-icon-content_copy', container).addClass('app-text-action').attr('title', resourcesEditor.Copy);
                    }
                    var textStyle = field.tagged(/\btext-style-(\w+)\b/);
                    if (textStyle)
                        container.attr('data-text-style', textStyle[1]);
                    if (options.editing) {
                        var dataType = field.tagged(/\bkbd-([\w\-]+)\b/),
                            fieldType = field.Type;
                        if (dataType)
                            dataType = dataType[1];
                        else if (fieldType.match(_app._numericTypeRegex))
                            dataType = 'number';
                        else if (fieldType.match(/Date(Time)?/))
                            dataType = fieldType.toLowerCase();
                        else if (isPhoneField(field))
                            dataType = 'tel';
                        else if (isEmailField(field))
                            dataType = 'email';
                        else if (isUrlField(field))
                            dataType = 'url';
                        if (dataType)
                            container.attr('data-type', dataType);
                    }
                    else
                        if (field.HyperlinkFormatString)
                            inner.attr('data-href', toHyperlink(field, row));
                    var inputEnhancement = field.tagged(/input\-(\w+)(\-size)?(\-(\d+\%?)x(\d+\%?))/) || field.tagged(/input\-(\w+)/),
                        inputValueHidden,
                        enhancementType,
                        enhancementPlaceholder,
                        enhancementImpl;
                    if (inputEnhancement) {
                        enhancementType = inputEnhancement[1];
                        inputValueHidden = field.tagged(/input\-(\w+)\-value\-hidden/);
                        container.attr('data-input-enhancement', enhancementType);
                        if (inputValueHidden && inputValueHidden[1] === enhancementType) {
                            container.attr('data-input', 'none');
                            inner.hide();
                        }
                        enhancementPlaceholder = container.find('.app-control-after .app-enhancement');
                        if (!enhancementPlaceholder.length)
                            enhancementPlaceholder = $span('app-enhancement').css({ width: inputEnhancement[4], height: inputEnhancement[5] }).appendTo($span('app-control-after').appendTo(container));
                        enhancementImpl = _input.methods[enhancementType];
                        if (enhancementImpl)
                            enhancementImpl._init(field, v, t, enhancementPlaceholder);
                        else
                            _app.getScript('~/js/daf/input-' + enhancementType)
                                .then(function () {
                                    _input.methods[enhancementType]._init(field, v, t, enhancementPlaceholder);
                                });
                    }
                    this._createFooter(options);
                },
                focus: function (target) {
                    _input.beforeFocus(target);
                    var dataInput = dataInputOf(target),// target.closest('[data-input]'),
                        textInput = findInput(dataInput),
                        field = _input.elementToField(target),
                        isRtf = field.TextMode === 2, editor;
                    if (isRtf) {
                        editor = field.is('rtf-editor');
                        if (editor) {
                            rtf.editor({ field: field.Name, type: editor });
                            return;
                        }
                        else
                            rtf.toolbar('create', dataInput);
                    }
                    else
                        rtf.range('clear');
                    saveLastFocusedField(field);
                    if (textInput.length)
                        textInput.trigger('focus');
                    else
                        return activateTextInput(target);
                },
                blur: function (e) {
                    var target = $(e.target),
                        dataInput = dataInputOf(target),// target.closest('[data-input]'),
                        inner = dataInput.find('.app-control-inner'),
                        restoreText = target.data('restoreText');
                    rtf.range('save'); //saveSelectedRange();
                    if (restoreText != null)
                        inner.text(restoreText);
                    rtf.toolbar('remove', dataInput);
                },
                setup: function (e) {
                    var notify = $(e.target).data('notify');
                    if (notify)
                        e.change = _input.methods.text._textChange;
                },
                _textChange: function (data) {
                    var notify = data.input.closest('[data-notify]').data('notify'),
                        notifyEvent = $.Event(notify);
                    notifyEvent.inputData = data;
                    $document.trigger(notifyEvent);
                },
                _createFooter: function (options) {
                    var container = options.container,
                        //inner = options.inner,
                        field = options.field,
                        originalField = options.originalField,
                        footer;
                    if (!originalField)
                        originalField = field;
                    if (originalField.FooterText) {
                        footer = container.find('.app-control-footer');
                        if (!footer.length)
                            footer = $span('app-control-footer');
                        footer.appendTo(container.addClass('app-has-footer'));
                        footer.html(originalField.FooterText);
                    }
                    else
                        if (container.is('.app-has-footer'))
                            container.removeClass('app-has-footer').find('.app-control-footer').remove();
                },
                _checkIfChanged: function (field, v, container) {
                    if ('_defVal' in field)
                        container.toggleClass('app-has-changed', v != field._defVal);
                }
            },
            'checkbox': {
                render: function (options) {
                    var dataInput = options.container,
                        inner = options.inner,
                        checkboxContainer,
                        field = options.field,
                        items = field.Items,
                        isChecked,
                        editing = options.editing,
                        v = options.row[field.Index];
                    //dataInput.attr({ 'data-text-true': items[items.length - 1][1], 'data-text-false': items[items.length - 2][1] });
                    isChecked = items[items.length - 2][0] == v;
                    if (v == null)
                        inner.html(nullValueInForms);
                    else {
                        //$(String.format('<span class="glyphicon glyphicon-{0}"/>', isChecked ? 'check' : 'unchecked')).appendTo(inner.empty());
                        materialIcon('material-icon-' + (isChecked ? 'check-box' : 'check-box-outline-blank'), inner.empty()).addClass('app-icon-checkbox');
                        dataInput.addClass('app-has-checkbox');
                    }
                    inner.css('visibility', editing ? 'hidden' : '');
                    if (editing) {
                        checkboxContainer = $div('app-checkbox-container', 'tabindex="0"').appendTo(_input.createContainer(dataInput));
                        if (isChecked)
                            checkboxContainer.addClass('app-checkbox-on');
                        //$(iconCheck).appendTo($('<a class="app-checkbox-button" />').appendTo(checkboxContainer));
                        $a('app-checkbox-button').appendTo(checkboxContainer);
                    }
                    else
                        dataInput.find('.app-data-input-container').remove();
                    _input.methods.text._createFooter(options);
                },
                focus: function (target, source) {
                    _input.beforeFocus(target);
                    findInput().trigger('blur');
                    hasFocus(target);
                    var container = target.find('.app-checkbox-container').trigger('focus');
                    if (source && source.is('[data-control="label"]'))
                        this._toggleState(container);
                    saveLastFocusedField(target);
                    //_input.labelState(target);
                    return true;
                },
                blur: function (e) {
                    hasFocus(e.target, false);
                },
                click: function (event) {
                    var x = lastTouchX(event.clientX),
                        checkbox = dataInputOf(event.target, '.app-checkbox-container'); //$(event.target).closest('[data-input]').find('.app-checkbox-container');
                    if (checkbox.offset().left - 8 <= x && x <= checkbox.offset().left + checkbox.outerWidth() + 8) {
                        this._toggleState(checkbox);
                        this.focus(checkbox);
                        //if (!isTouchPointer)
                        //    _input.labelState(checkbox.focus());
                        event.preventDefault();
                    }
                },
                _toggleState: function (checkbox) {
                    var state = checkbox.is('.app-checkbox-on'),
                        dataInput = dataInputOf(checkbox),
                        style = dataInput.attr('data-checkbox-style'),
                        field;
                    if (!_input.cancel() || checkbox.is('.app-animation')) return;
                    hideTooltip();
                    checkbox.toggleClass('app-checkbox-on');
                    field = _input.elementToField(checkbox);
                    if (style !== 'circle' && style !== 'square')
                        if (state) {
                            checkbox.addClass('app-animation app-checkbox-on');
                            setTimeout(function () {
                                checkbox.addClass('app-animate-off').one('transitionend', function () {
                                    checkbox.removeClass('app-animation app-checkbox-on app-animate-off');
                                });
                            });
                        }
                        else {
                            checkbox.addClass('app-animation');
                            setTimeout(function () {
                                checkbox.addClass('app-animate-on').one('transitionend', function () {
                                    checkbox.removeClass('app-animation app-animate-on');
                                });
                            });
                        }

                    saveLastFocusedField(field);
                    inputExecute({ dataView: field._dataView, values: { field: field, value: !state }, skipDrawingInput: dataInput });
                    if (!isTouchPointer && !state) {
                        var advanceInContainer = field.is('lookup-auto-advance');
                        if (advanceInContainer)
                            setTimeout(_input.move, 0, dataInput, 'right', 9, advanceInContainer);
                    }
                }
            },
            'lookup': {
                render: function (options) {
                    var originalField = options.originalField = options.field,
                        targetController = originalField.ItemsTargetController;
                    options.field = options.dataView._allFields[options.field.AliasIndex];
                    var inner = options.inner,
                        container = options.container,
                        button = container.find('.app-data-input-button'),
                        node = container.data('node'),
                        editing = options.editing,
                        itemsStyle, listBefore, lov, list, v, ul;
                    if (!editing && targetController)
                        _input.methods.listbox.render(options);
                    else {
                        v = options.row[originalField.Index];
                        _input.methods.text._checkIfChanged(originalField, v, container);
                        itemsStyle = originalField.ItemsStyle;
                        if (editing && !button.is('.app-data-input-button')) {
                            button = $span('app-data-input-button', span('app-caret')).attr('title', resourcesActionsScopesGrid.Select.HeaderText).insertAfter(inner);
                            button.css('marginTop', (inner.text('w').outerHeight() - button.outerHeight()) / 2);
                            // fix the position of the butotn to ensure that it stay aligned to the top line of the wrapping inner text
                            //button[0].style.marginTop = inner.outerHeight() - button.outerHeight()) / 2); 
                            if (itemsStyle === 'Lookup')
                                button.addClass('app-caret-r');
                            else if (itemsStyle === 'DropDownList') {
                                $span('app-caret app-caret2').appendTo(button.addClass('app-caret-u-d'));
                                if (originalField.tagged('open-on-tap'))
                                    container.css('cursor', 'pointer');
                            }
                        }
                        if (editing)
                            inner.css('max-width', container.attr('data-size') !== '' ? 'none' : node.self.width() - (button.outerWidth() || 22) - parseCss(inner, 'padding-left') * 2);
                        else {
                            if (button.length && button.is('.app-data-input-button'))
                                button.remove();
                            inner.find('.app-control-before').remove();
                            container.removeClass('app-null app-has-helper');
                        }
                        listBefore = container.find('.app-control-before');
                        if (targetController) {
                            if (!listBefore.length) {
                                inner.text(_input.fieldToPlaceholder(originalField));
                                container.addClass('app-has-helper');
                                listBefore = $span('app-control-before app-control-helper').attr('tabindex', 0).insertBefore(inner);
                                ul = $ul().appendTo(listBefore);
                            }
                            else
                                ul = listBefore.find('ul');
                            lov = originalField.DynamicItems || originalField.Items;
                            list = v;
                            if (list == null) {
                                list = '';
                                if (itemsStyle !== 'CheckBoxList') {
                                    ul.empty();
                                    listBefore.css('display', 'none');
                                    _input.fitContainer(container);
                                }
                            }
                            if (typeof list != 'string')
                                list = list.toString();
                            if (lov.length) {
                                if (list.length) {
                                    var itemsToRemove = ul.find('li'),
                                        addGroupCount = originalField.is('lookup-distinct');
                                    list = _app.csv.toArray(list);
                                    $(lov).each(function () {
                                        var item = this,
                                            v = item[0],
                                            li;
                                        if (v != null && list.indexOf(v.toString()) != -1) {
                                            li = $li().text(item[1]).attr('data-value', v).appendTo(ul);
                                            if (addGroupCount)
                                                _input.addCount(item[item.length - 1], li);
                                        }
                                    });
                                    itemsToRemove.remove();
                                }
                                listBefore.css('visibility', '');
                            }
                            else
                                listBefore.css('visibility', 'hidden');
                            container.toggleClass('app-null', /*!lov.length*/isNullOrEmpty(list));
                            //$('<span class="app-control-before app-control-helper" tabindex="0">The list goes here. This is a very long list with lots of items and things. It will definitely wrap. Very likely this will happen more than ones. You will see.</span>').insertBefore(inner);

                        }
                        else {
                            listBefore.remove();
                            _input.methods.text.render(options);
                        }
                        if (!editing && originalField.ItemsDataController && v != null && !originalField.tagged('lookup-details-hidden'))
                            $span('app-field-object-ref app-feedback').appendTo(inner).attr('title', resourcesMobile.LookupViewAction)/*)*/;
                    }
                },
                focus: function (target) {
                    _input.beforeFocus(target);
                    var helper = target.find('.app-control-helper'),
                        skipHelperFocus = helper.data('focus') === false || _input._buffer != null,
                        items = target.find('li');
                    helper.removeData('focus');
                    var dataInput = dataInputOf(target);// target.closest('[data-input]');
                    hasFocus(dataInput);
                    saveLastFocusedField(dataInput);
                    if (!skipHelperFocus && items.length) {
                        if (!_input.valid()) return false;
                        helper.trigger('focus');
                        items.removeClass('app-focus').first().addClass('app-focus');
                        //_input.labelState(dataInput);
                        return true;
                    }

                    var result = _input.methods.text.focus(target),
                        field, row;
                    if (skipHelperFocus)
                        hasFocus(dataInput);
                    if (result) {
                        field = _input.elementToField(target);
                        row = field._dataView.editRow();
                        if (target.data('autoComplete') === false)
                            target.removeData('autoComplete');
                        else if (row[field.Index] == null) {
                            _input.elementToButton(target).removeClass('app-caret-r');
                            if (field.ItemsStyle === 'Lookup') {
                                var lookupInput = findInput(dataInputOf(target)).trigger('focus');
                                setTimeout(function () {
                                    _input.methods.lookup._showList({ field: field, value: null, input: lookupInput/*.find('.app-data-input')*/ });
                                }, isTouchPointer ? 300 : 10);
                            }
                        }
                    }
                    var autoOpen = dataInput.data('autoOpen');
                    if (autoOpen) {
                        dataInput.removeData('autoOpen');
                        setTimeout(function () {
                            _input.popup('hide');
                            $('.app-data-input').trigger($.Event('keydown', { altKey: true, which: 40 }));
                        }, isTouchPointer ? 310 : 20);
                    }
                    return result;
                },
                click: function (e) {
                    var button = _input.eventToButton(e),
                        buttonOffset = button.offset(),
                        x = e.pageX,
                        target = $(e.target),
                        dataInput = dataInputOf(target);// target.closest('[data-input]');

                    function removeFocus() {
                        hasFocus(dataInput, false);
                        target.removeClass('app-focus');
                    }

                    if (target.is('li,.app-muted')) {
                        target = target.closest('li');
                        // basket item is clicked
                        if (!_input.cancel()) {
                            e.preventDefault();
                            return false;
                        }

                        if (findInput(dataInput).length) {
                            // touch interfaces will may have an input
                            e.preventDefault();
                            findInput(dataInput).trigger('blur');
                            setTimeout(function () {
                                target.trigger('vclick');
                            }, 100);
                            return;
                        }

                        if (!target.is('.app-focus'))
                            target.parent().find('li').removeClass('app-focus');
                        findInput(dataInput).trigger('blur');
                        var helper = dataInput.find('.app-control-helper').trigger('blur'),
                            field = _input.elementToField(target),
                            items = [{
                                text: resourcesActionsScopesGrid.Delete.HeaderText, icon: 'trash', callback: function () {
                                    _input.methods.lookup._removeBasketItem(target, true);
                                    helper.trigger('focus');
                                }
                            }];
                        if (!field.is('lookup-details-hidden') && !field.is('lookup-distinct'))
                            items.push({
                                text: resourcesMobile.LookupViewAction, icon: 'carat-r', callback: function () {
                                    removeFocus();
                                    touch.details({ field: field, key: target.attr('data-value') });
                                }
                            });
                        hasFocus(dataInput);
                        target.addClass('app-focus');
                        showListPopup({
                            anchor: target, items: items, autoFocus: false,
                            afterclose: function (popup, item) {
                                if (isTouchPointer)
                                    removeFocus();
                                else if (!item)
                                    helper.trigger('focus');
                            }
                        });
                        e.preventDefault();
                    }
                    else if (target.closest('.app-control-helper').length) {
                        // do nothing
                        target.closest('.app-control-helper').trigger('focus');
                    }
                    else if (dataInput.attr('data-input') === 'dropdownlist' && !findInput(dataInput).length && (isTouchPointer || _input.elementToField(target).tagged('open-on-tap'))) {
                        e.preventDefault();
                        var existingDataInput = findInput();//$('.app-data-input');
                        if (existingDataInput.length)
                            existingDataInput.trigger('blur');
                        if (isTouchPointer) {
                            //tapping(false);
                            saveLastFocusedField(dataInput.data('field'));
                            //setTimeout(function () {
                            //    tapping();
                            _input.methods.lookup.lov(dataInput);
                            //}, 100);
                        }
                        else
                            this.clickButton(e);
                        //this.lov(dataInput);
                    }
                    else if (button.length && (buttonOffset.left <= x && x < buttonOffset.left + button.outerWidth() + 8) || kiosk())
                        if (this.clickButton(e))
                            e.preventDefault();
                },
                clickButton: function (e, feedback) {
                    var button = _input.eventToButton(e),
                        inputMethod = _input.elementToMethod(button),
                        dataInput = dataInputOf(button),// button.closest('[data-input]'),
                        inputIsActive = findInput(dataInput).length > 0,
                        field = _input.eventToField(e),
                        dataView,
                        aliasField,
                        showValue = !field.ItemsTargetController,
                        row;

                    if (!inputIsActive && !_input.cancel()) return false;

                    function showLookupView() {
                        button.removeClass('ui-btn-active');
                        dataView = field._dataView;
                        aliasField = dataView._allFields[field.AliasIndex];
                        row = dataView.editRow();
                        touch.lookup({
                            field: field,
                            value: showValue ? row[field.Index] : null,
                            text: showValue ? aliasField.format(row[aliasField.Index]) : null,
                            change: function (values) {
                                if (dataView._inlineEditor)
                                    _edit.showField(dataView, field.Name);
                                if (field.ItemsTargetController) {
                                    if (values.length >= 2) {
                                        if (_input.methods.lookup._useItemValue(field, [values[0].value, values[1].value])) {
                                            if (!isTouchPointer)
                                                dataInput.find('.app-control-helper').data('focus', false);
                                        }
                                        else {
                                            hasFocus(dataInput).find('.app-control-helper').trigger('focus');
                                            return;
                                        }
                                    }
                                }
                                else
                                    inputExecute({ dataView: dataView, values: values });
                                if (!isTouchPointer)
                                    setTimeout(function () {
                                        inputMethod.focus(dataInput);
                                    }, 100);
                            }
                        });
                    }


                    if (inputIsActive && _input.popup(':visible') && (isTouchPointer || e.type !== 'vclick')) {
                        _input.popup('hide');
                        _input.methods.lookup._buttonUp(button);
                    }
                    else
                        if (field.ItemsStyle !== 'Lookup' && (!kiosk() || $('.app-kiosk').nextAll('.ui-page-active').length)) {
                            button.removeClass('ui-btn-active');
                            if (!inputIsActive) {
                                dataInput.find('.app-control-helper').data('focus', false);
                                inputMethod.focus(dataInput);
                            }
                            findInput(dataInput).trigger($.Event('keydown', { ctrlKey: true, which: 32 }));
                        }
                        else {
                            if (feedback !== false)
                                button.addClass('ui-btn-active');
                            _input.blur();
                            setTimeout(_input.keyboard, 0, showLookupView);
                        }
                    tappingTimeout();
                    return true;
                },
                blur: function (e) {
                    var target = $(e.target),
                        dataInput = dataInputOf(target),// target.closest('[data-input]'),
                        inner = dataInput.find('.app-control-inner'),
                        restoreText = target.data('restoreText'),
                        field = _input.eventToField(e);
                    if (field.ItemsTargetController) {
                        restoreText = _input.fieldToPlaceholder(field);
                        inner.text(restoreText);
                        _input.fitContainer(dataInput, null, restoreText);
                    }
                    else if (restoreText != null)
                        inner.text(restoreText);
                    //_input.eventToButton(event).addClass('app-caret-r').removeClass('app-caret-u');
                    this._buttonUp(target);
                    _input.popup('hide');
                    clearTimeout(field._showListTimeout);
                },
                setup: function (e) {
                    //var field = _input.eventToField(e);
                    e.change = _input.methods.lookup._lookupChange;
                },
                _lookupChange: function (data) {
                    var input = data.input,
                        field = _input.elementToField(input),
                        //dataView = field._dataView,
                        cleared,
                        button,
                        showArgs;
                    _input.methods.lookup._preventList();
                    if (!input || !field) return; // it appears that sometimes there is no input or field
                    input.removeData('keepFocus');
                    if (data.value) {
                        if (field.AllowAutoComplete === false) {
                            input.val(input.data('original')).trigger('select');
                            data.value = '';
                        }
                    }
                    else if (_input.popup(':visible') || field.AllowAutoComplete === false || field.ItemsStyle === 'DropDownList') {
                        clearTimeout(field._showListTimeout);
                        var dataInput = dataInputOf(input),// input.closest('[data-input]'),
                            original = input.data('original') || '';
                        input.val('');
                        input.removeData('restoreText');
                        if (original !== '') {
                            setTimeout(_input.clearValue, 0, field);
                            cleared = true;
                        }
                        input.data('original', '');
                        dataInput.find('.app-control-inner').text(_input.fieldToPlaceholder(field));
                        _input.fitContainer(dataInput);
                    }
                    button = _input.elementToButton(input);
                    button.removeClass('app-caret-r');
                    if (input.data('autoComplete') === false) {
                        input.removeData('autoComplete');
                        clearTimeout(field._showListTimeout);
                    }
                    else {
                        if (!data.value) {
                            if (!cleared && input.data('original') !== '')
                                _input.clearValue(field);
                            if (field.ItemsTargetController && data.keyCode)
                                return;
                        }
                        showArgs = { field: field, value: data.value, originalValue: input.data('original'), input: input };
                        if ('keyCode' in data)
                            showArgs.keyCode = data.keyCode;
                        _input.methods.lookup._showList(showArgs);
                    }
                },
                lov: function (dataInput) {
                    var field = _input.elementToField(dataInput),
                        dataView = field._dataView,
                        aliasField = dataView._allFields[field.AliasIndex],
                        row = dataView.editRow(),
                        lov = field.DynamicItems || field.Items,
                        v = row[field.Index],
                        hasSeparator,
                        list = [];

                    function callback(index) {
                        if (index === 'Clear')
                            _input.clearValue(field);
                        else if (index === 'New')
                            touch.lookup({ field: field, create: true, dataInput: dataInput/*, value: inputValue*/ });
                        else {
                            var item = lov[index];
                            _app.input.methods.lookup._useItemValue(field, item);
                        }
                    }

                    $(lov).each(function (index) {
                        var item = this,
                            isSelected = v == item[0];
                        list.push({ text: aliasField.format(item[1]), icon: isSelected ? 'check' : false, visible: isSelected, callback: callback, context: index });
                    });
                    if (_input.canCreateItems(field)) {
                        if (list.length) {
                            list.push({});
                            hasSeparator = true;
                        }
                        list.push({ text: resourcesLookup.GenericNewToolTip, icon: 'material-icon-add', callback: callback, context: 'New' });
                    }
                    if (v != null && field.AllowNulls) {
                        if (!hasSeparator)
                            list.push({});
                        list.push({ text: resourcesMobile.LookupClearAction, icon: 'material-icon-cancel', callback: callback, context: 'Clear' });
                    }
                    var title = aliasField.HeaderText,
                        innerRect = getBoundingClientRect(dataInput.find('.app-control-inner'));
                    showListPopup({ x: innerRect.left + innerRect.width / 2, y: innerRect.top + innerRect.height * .66, y2: innerRect.top, title: title !== '&nbsp;' ? title : null, anchor: dataInput.find('.app-control-inner'), items: list });
                },
                _hidePopup: function () {
                    if (!isTouchPointer) {
                        if (_input.popup(':visible')) {
                            var input = _input._lastInputBeforeScroll = findInput(),
                                button = dataInputOf(input, '.app-data-input-button');//input.closest('[data-input]').find('.app-data-input-button');
                            if (button.length)
                                this._buttonUp(button);
                            _input.popup('hide');
                        }
                        else
                            _input._lastInputBeforeScroll = null;
                    }
                },
                _buttonUp: function (button) {
                    var field = _input.elementToField(button);
                    if (!button.is('.app-data-input-button'))
                        button = _input.elementToButton(button);
                    if (field && field.ItemsStyle === 'Lookup')
                        button.addClass('app-caret-r');
                    button.removeClass('app-caret-u app-caret-d');
                },
                _getCopyFields: function (field) {
                    var copy = field.Copy,
                        dataView, copyFields, copyInfo, copyToField, copyFromField;
                    if (copy) {
                        dataView = field._dataView;
                        copyFields = copyFields = dataView.session(field.Name + '_copyFields');
                        if (!copyFields) {
                            copyFields = [];
                            while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                                copyToField = copyInfo[1];
                                copyFromField = copyInfo[2];
                                if (dataView.findField(copyToField) || copyFromField === 'null')
                                    copyFields.push({ fromField: copyFromField, toField: copyToField });
                            }
                            dataView.session(field.Name + '_copyFields', copyFields);
                        }
                    }
                    return copyFields;
                },
                _preventList: function () {
                    var that = this;
                    clearTimeout(that._popupTimeout);
                    clearTimeout(that._searchTimeout);
                    that._searchTimeout = null;
                    that._popupTimeout = null;
                },
                _showList: function (options) {
                    var field = options.field,
                        dataView = field._dataView,
                        itemsDataController = field.ItemsDataController,
                        itemsStyle = field.ItemsStyle,
                        isDropDown = itemsStyle === 'DropDownList',
                        isAutoComplete = itemsStyle === 'AutoComplete',
                        isLookup = itemsStyle === 'Lookup',
                        itemsTargetController = field.ItemsTargetController,
                        preFetched = !isLookup && !isAutoComplete,
                        hasSeparator,
                        copyFields = this._getCopyFields(field),
                        cachedPropertyItemsDataTextField, cachedPropertyItemsDataValueField,
                        typeToSearch = resourcesMobile.TypeToSearch,
                        aliasField = dataView._allFields[field.AliasIndex],
                        matchOperation = aliasField.AutoCompleteAnywhere ? 'contains' : 'beginswith',
                        matchForContains = matchOperation === 'contains',
                        testValue = options.value,
                        value = testValue == null ? '' : testValue,
                        selectedValue,
                        popup = _input.popup(),
                        input = options.input,
                        scrollable = findScrollable(input),
                        inputParent = input.parent(),
                        button = _input.elementToButton(input),
                        doSearch, lov, lov2, keyOfLov,
                        autoCompletePrefixLength = field.AutoCompletePrefixLength,
                        prefixIsLongEnough = !autoCompletePrefixLength || value.length >= autoCompletePrefixLength,
                        list = [];
                    hideTooltip();
                    if (!inputParent.length) return;

                    function createSeparator() {
                        if (!hasSeparator) {
                            list.push({ text: '$separator' });
                            hasSeparator = true;
                        }
                    }

                    if (itemsTargetController)
                        dataInputOf(input, '.app-control-before .app-focus').removeClass('app-focus');

                    if (preFetched)
                        list = field.DynamicItems || field.Items;
                    else {
                        if (field.AllowAutoComplete !== false)
                            if (value && prefixIsLongEnough || isAutoComplete && (!autoCompletePrefixLength || (/*!value || */prefixIsLongEnough))) {
                                testValue = value;//.toLowerCase();
                                //if (!field.ContextFields  || input.data('ignoreContextFields')) {
                                input.data('ignoreContextFields', false);
                                keyOfLov = lovKey(field);
                                lov = dataView.session(keyOfLov/*field.Name + '_listOfValues_'*/ + testValue);
                                while (!lov && testValue.length) {
                                    testValue = testValue.substring(0, testValue.length - 1);
                                    lov = dataView.session(keyOfLov/*field.Name + '_listOfValues_'*/ + testValue);
                                    if (lov && lov.length >= autoCompleteMaxRowCount/* && originalTestValue.length*/) {
                                        lov = null;
                                        break;
                                    }
                                }
                                // try to find a matching list for a shorter test value
                                while (lov && testValue.length) {
                                    testValue = testValue.substring(0, testValue.length - 1);
                                    lov2 = dataView.session(keyOfLov/*field.Name + '_listOfValues_'*/ + testValue);
                                    while (!lov2 && testValue.length) {
                                        testValue = testValue.substring(0, testValue.length - 1);
                                        lov2 = dataView.session(keyOfLov/*.Name + '_listOfValues_'*/ + testValue);
                                        if (lov2 && lov2.length >= autoCompleteMaxRowCount) {
                                            lov2 = null;
                                            break;
                                        }
                                    }
                                    if (lov2 && lov2.length < autoCompleteMaxRowCount)
                                        lov = lov2;
                                }
                                //}
                                if (lov)
                                    list = list.concat(lov);
                                else {
                                    list.push({ text: loadingStatusText, instruction: true });
                                    if (value)
                                        list.push({ text: value, selected: true, command: 'None' });
                                    doSearch = true;
                                }
                            }
                            else
                                list.push({ value: null, text: typeToSearch, instruction: true });

                        if (isLookup) {
                            if (field._doSearch) {
                                field._doSearch = false;
                                //lov = field.ContextFields ? null : dataView.session(field.Name + '_listOfValues_');
                                lov = input.data('ignoreContextFields') ? dataView.session(lovKey(field)/*field.Name + '_listOfValues_'*/) : null;
                                if (lov)
                                    list = list.concat(lov);
                                else {
                                    doSearch = true;
                                    list.splice(1, 0, { value: null, text: loadingStatusText, instruction: true });
                                }
                            }
                            else if (!value)
                                list.push({ text: resourcesMobile.ShowOptions, command: 'ShowOptions' });
                            createSeparator();
                            list.push({ text: resourcesMobile.SeeAll, command: 'SeeAll' });
                        }
                    }
                    if (_input.canCreateItems(field)) {
                        if (preFetched)
                            list = list.slice(0);
                        createSeparator();
                        list.push({ text: resourcesLookup.GenericNewToolTip, command: 'New' });
                    }
                    if (!preFetched && options.originalValue && options.value) {
                        createSeparator();
                        list.push({ text: resourcesMobile.LookupClearAction, command: 'Clear' });
                    }

                    function renderListOfValues(list) {
                        value = input.val();
                        if (value === '' && isDropDown && list.length && list[0] instanceof Array && list[0][0] == null)
                            value = list[0][1];
                        var valueIsBlank = value === '',
                            valueLowered = valueIsBlank ? value : value.toLowerCase(),
                            ul = popup.data('ul'),
                            ulBuilder = [], itemDef, classDef,
                            dataInput = inputParent.parent(),
                            stylesToBorrow = toStyleAttribute(borrowDataInputStyle(dataInput)),
                            controlInner,
                            inputOffset,
                            inputHeight = input.outerHeight(),
                            scrollerWidth = calcWidth(scrollable),
                            selectedItem, selectedText, selectedItemIndex, hasLoading, hasNoMatch, dataItemCount = 0,
                            escapedValue = value && RegExp.escape(value),
                            testRegex = value ? new RegExp(matchForContains ? escapedValue : ('^' + escapedValue + '.*'), 'i') : null,
                            testMatch, matchCount = 0, stopMatching, firstCommandItem, separatorItem,
                            w, x, y, spaceAbove, spaceBelow, h, showAbove,
                            addGroupCount = field.is('lookup-distinct'),
                            previousText, hasDuplicates, itemDetails, lov, lovNoMatchCount = 0;
                        popup.data('list', list);//.css({ width: '', maxWidth: '', minWidth: '', maxHeight: '', height: '', minHeight: '', maxHeight: '', left: '', top: '' });
                        //ul.empty();
                        //popup/*.appendTo(scroller)*/.show();
                        if (itemsTargetController)
                            lov = _app.csv.toArray(dataView.row()[field.Index]);
                        var li;
                        $(list).each(function (index) {
                            var item = this,
                                itemText = item.text,
                                itemValue,
                                itemTotalRowCount = item.totalRowCount,
                                itemCommand;
                            if (itemTotalRowCount) {
                                if (value.length >= item.value.length && matchCount < itemTotalRowCount)
                                    // $('<li class="app-instruction"/>').appendTo(ul).text(String.format(resourcesMobile.ShowingItemsRange, matchCount, item.totalRowCount));
                                    ulBuilder.push({ before: 'class="app-instruction"', text: String.format(resourcesMobile.ShowingItemsRange, matchCount, itemTotalRowCount) });
                            }
                            else if (itemText === '$separator') {
                                if (index > 0)
                                    //$('<li class="app-instruction app-separator"/>').appendTo(ul);
                                    ulBuilder.push({ before: 'class="app-instruction app-separator"' });
                            }
                            else if (itemText) {
                                //li = $('<li/>').appendTo(ul).text(item.text);
                                ulBuilder.push(itemDef = { before: '', text: htmlEncode(itemText) });
                                classDef = '';
                                if (item.instruction) {
                                    //li.addClass('app-instruction');
                                    classDef = 'app-instruction';
                                    if (itemText === loadingStatusText)
                                        hasLoading = true;
                                }
                                else if (!firstCommandItem)
                                    firstCommandItem = itemDef;

                                if (item.selected)
                                    //li.addClass('app-selected');
                                    classDef += ' app-selected';
                                if (classDef)
                                    itemDef.before = 'class="' + classDef + '"';
                                itemCommand = item.command;
                                if (itemCommand) {
                                    //li.attr('data-command', item.command);
                                    itemDef.before += ' data-command="' + itemCommand + '"';
                                    if (itemCommand.match(/SeeAll|New/))
                                        //$('<span class="app-icon app-caret-r"><span class="app-caret"/></span>').appendTo(li);
                                        itemDef.after = span('app-icon app-caret-r', span('app-caret'));
                                }
                            }
                            else {
                                itemValue = item[0];
                                itemText = item[1];
                                if (itemText != null && typeof itemText != 'string')
                                    itemText = field.format(itemText);
                                testMatch = itemText ? itemText.toString().match(testRegex) : null;
                                if (itemText === '$separator')
                                    //separatorItem = $('<li class="app-instruction app-separator"/>').appendTo(ul);
                                    ulBuilder.push(separatorItem = { before: 'class="app-instruction app-separator"' });
                                else if (field.AllowNulls || (itemValue != null || (valueIsBlank || value === itemText))) // exclude "null" option for mandatory fields
                                    if (preFetched || valueIsBlank && (isAutoComplete || isLookup) && itemText !== '' || !valueIsBlank && itemText && (testMatch || itemText === value || value === options.originalValue)) {
                                        matchCount++;
                                        if (lov)
                                            if (itemValue != null && lov.indexOf(itemValue.toString()) !== -1)
                                                return;
                                            else
                                                lovNoMatchCount++;
                                        //li = $('<li/>').appendTo(ul).attr('data-index', index);
                                        ulBuilder.push(itemDef = { before: 'data-index="' + index + '"', text: '' });
                                        dataItemCount++;
                                        if (stylesToBorrow)
                                            //li.css(stylesToBorrow);
                                            itemDef.before += ' ' + stylesToBorrow;
                                        if (!stopMatching && testMatch) {
                                            var exactMatch = valueLowered === itemText.toString().toLowerCase();
                                            if ((!selectedItem || exactMatch) && !valueIsBlank) {
                                                selectedText = itemText;
                                                //selectedItem = li;
                                                selectedItem = itemDef;
                                                selectedValue = itemValue;
                                                selectedItemIndex = ulBuilder.length - 1;
                                            }
                                            stopMatching = itemValue != null && (itemsDataController || exactMatch);
                                        }
                                        if (testMatch && matchForContains && value !== options.originalValue) {
                                            if (testMatch.index)
                                                //$('<span/>').text(text.substring(0, testMatch.index)).appendTo(li);
                                                itemDef.text = '<span>' + htmlEncode(itemText.substring(0, testMatch.index)) + '</span>';
                                            //$('<b/>').text(text.substring(testMatch.index, testMatch.index + testMatch[0].length)).appendTo(li);
                                            itemDef.text += '<b>' + htmlEncode(itemText.substring(testMatch.index, testMatch.index + testMatch[0].length)) + '</b>';
                                            if (testMatch.index + testMatch.length <= itemText.length - 1)
                                                //$('<span/>').text(text.substring(testMatch.index + testMatch[0].length)).appendTo(li);
                                                itemDef.text += '<span>' + htmlEncode(itemText.substring(testMatch.index + testMatch[0].length)) + '</span>';
                                        }
                                        else if (testMatch && !matchForContains) {
                                            //$('<span class="app-text-normal"/>').text(text.substring(0, value.length)).appendTo(li);
                                            itemDef.text = '<span class="app-text-normal">' + htmlEncode(itemText.substring(0, value.length)) + '</span>';
                                            //$('<span class="app-text-bold"/>').text(text.substring(value.length)).appendTo(li);
                                            itemDef.text += '<span class="app-text-bold">' + htmlEncode(itemText.substring(value.length)) + '</span>';
                                        }
                                        else
                                            //li.text(text == null ? resourcesHeaderFilter.EmptyValue : text);
                                            itemDef.text = itemText == null || itemText === '' ? labelEmptyValue : htmlEncode(itemText);
                                        if (itemText === previousText && item.length > 2) {
                                            itemDetails = _input.methods.lookup._itemToDetails(field, item);
                                            if (itemDetails)
                                                //$('<i/>').text(itemDetails).appendTo(li);
                                                itemDef.text += '<i>' + htmlEncode(itemDetails) + '</i>';
                                            if (!hasDuplicates) {
                                                itemDetails = _input.methods.lookup._itemToDetails(field, list[index - 1]);
                                                if (itemDetails)
                                                    //$('<i/>').text(itemDetails).appendTo(li.prev());
                                                    ulBuilder[ulBuilder.length - (hasDuplicates ? 1 : 2)].text += '<i>' + htmlEncode(itemDetails) + '</i>';
                                                hasDuplicates = true;
                                            }
                                        }
                                        else
                                            hasDuplicates = false;
                                        if (addGroupCount/* && text != null*/)
                                            //_input.addCount(li, item[item.length - 1]);
                                            itemDef.text += _input.addCount(item[item.length - 1]);
                                        previousText = itemText;
                                    }
                            }
                        });

                        if (!selectedItem && (!valueIsBlank || lov && !lovNoMatchCount && !isLookup) && list[0].text !== loadingStatusText && list[0].text !== labelNoMatches) {
                            //var noMatchesItem = $('<li class="app-instruction"/>').text(resourcesMobile.NoMatches),
                            //    firstLi = ul.find('li:first');
                            //if (firstLi.length)
                            //    noMatchesItem.insertBefore(firstLi);
                            //else
                            //    noMatchesItem.appendTo(ul);
                            if (prefixIsLongEnough)
                                ulBuilder.splice(0, 0, { before: 'class="app-instruction"', text: labelNoMatches });
                            hasNoMatch = true;
                            controlInner = dataInput.find('.app-control-inner');
                            if (controlInner.length && input.data('restoreText') == null)
                                input.data('restoreText', controlInner.text());
                            if (!valueIsBlank) {
                                controlInner.text(value + '\xa0\xa0');
                                _input.fitContainer(dataInput, inputParent);
                            }
                        }

                        if (itemsTargetController && matchCount && lovNoMatchCount > 1) {
                            //li = $('<li data-command="SelectAll"/>').text(resourcesEditor.SelectAll);
                            itemDef = { before: 'data-command="SelectAll"', text: resourcesEditor.SelectAll };
                            if (firstCommandItem)
                                //li.insertBefore(firstCommandItem);
                                ulBuilder.splice(ulBuilder.indexOf(firstCommandItem), 0, itemDef);
                            else {
                                if (!separatorItem)
                                    //$('<li class="app-instruction app-separator"/>').appendTo(ul);
                                    ulBuilder.push({ before: 'class="app-instruction app-separator"' });
                                //li.appendTo(ul);
                                ulBuilder.push(itemDef);
                            }
                        }

                        // dump out the HTML of the list popup
                        if (selectedItem) {
                            selectedItem.before += ' class="app-selected"';
                            selectedText = selectedText.trim();
                            var isPartialMatch = value.length < selectedText.length, inputKeyCode;
                            if (isPartialMatch && !matchForContains && options.keyCode !== 8) {
                                dataInput = dataInputOf(input);// input.closest('[data-input]');
                                controlInner = dataInput.find('.app-control-inner');
                                if (controlInner.length && input.data('restoreText') == null)
                                    input.data('restoreText', controlInner.text());
                                selectedText = value + selectedText.substring(value.length);
                                _input.fitContainer(dataInput, input, selectedText);
                                //adjustPopupSize();
                                if (!android) {
                                    inputKeyCode = input.data('keyCode');
                                    if (inputKeyCode !== 8 && inputKeyCode !== 46) {
                                        input.data('autoComplete', false);
                                        input.val(selectedText);
                                        input[0].setSelectionRange(value.length, selectedText.length);
                                        input.removeData('autoComplete');
                                    }
                                }
                            }
                        }

                        function displayLookupPopup() {
                            if (barcodeInputMode(/*input*/) || !input.parent().length)
                                return;
                            var lastState = popup.data('state'), lastSelectedItem, j, def, nextItemText, lastSelectedItemText;
                            if (!matchForContains && lastState && lastState.id === dataView._id && lastState.f === field.Name && lastState.v == selectedValue && !lastState.loading && lastState.c === dataItemCount && popup.is(':visible')) {
                                lastSelectedItem = ul.find('.app-selected');
                                if (selectedItem) {
                                    lastSelectedItem.html(selectedItem.text)//.css('background-color', 'yellow');
                                    while (++selectedItemIndex < ulBuilder.length) {
                                        nextItemText = ulBuilder[selectedItemIndex].text;
                                        lastSelectedItem = lastSelectedItem.next();
                                        lastSelectedItemText = lastSelectedItem.html();
                                        if (nextItemText != null && nextItemText.match(/\"app\-text\-\w+/) || lastSelectedItemText && lastSelectedItemText.match(/\"app\-text\-\w+/))
                                            lastSelectedItem.html(nextItemText);
                                        else {
                                            break;
                                        }
                                    }
                                    return;
                                }
                                else if (!lastSelectedItem.length && lastState.noMatch && value.length) //{
                                    // ul.find('li:first').css('background-color', 'lime');
                                    return;
                                //}
                            }
                            for (j = 0; j < ulBuilder.length; j++) {
                                def = ulBuilder[j];
                                ulBuilder[j] =
                                    '<li ' + (def.before ? def.before : '') + '>' +
                                    (def.text == null ? '' : def.text) +
                                    ((def.after ? def.after : '') + '</li>');
                            }
                            ul.html(ulBuilder.join(''));
                            if (selectedItem)
                                selectedItem = ul.find('.app-selected');
                            popup.data('state', { id: dataView._id, f: field.Name, v: selectedValue, loading: hasLoading, c: dataItemCount, noMatch: hasNoMatch });
                            popup.css({ width: '', maxWidth: '', minWidth: '', maxHeight: '', height: '', minHeight: '', left: '', top: '', display: '' });

                            inputOffset = input.offset();
                            var inputFontSize = parseCss(input, 'font-size');
                            if (parseCss(popup, 'font-size') != inputFontSize)
                                popup.css('font-size', inputFontSize);
                            var sampleLi = li || ul.find('li').first(),
                                inlineEditor = dataView._inlineEditor && !itemsTargetController,
                                inlineEditorOverlay = inlineEditor && scrollable.closest('.app-page-inlineeditor-overlay').length > 0,
                                buttonIsFloating = button.css('right') == 'auto',
                                horizAdjustment = parseCss(sampleLi, 'padding-left') + parseCss(popup, 'border-left-width') + (inlineEditorOverlay ? -1 : 0),
                                allowDropDownList = isDropDown && (!sampleLi.length || inputOffset.top > sampleLi.outerHeight() * 2.5),
                                fullSelection;

                            //popup.addClass('app-wrap');

                            function adjustPopupSize() {
                                popup.css({ 'min-width': inlineEditor ? dataInput.width() - horizAdjustment * 2 : '', 'max-width': '', width: '' });
                                w = Math.max(getBoundingClientRect(ul).width, (button.length ? (button.offset().left - inputOffset.left + button.outerWidth() + (inlineEditorOverlay ? 1 : 0)) : 0)) + horizAdjustment;
                                w = Math.min(w, (buttonIsFloating ? scrollerWidth : _screen.width) * .9);
                                popup.css({ width: w, 'max-width': w, 'min-width': w });
                            }

                            adjustPopupSize();

                            x = inputOffset.left;
                            if (allowDropDownList)
                                fullSelection = !input[0].selectionStart && selectedText != null && input[0].selectionEnd === selectedText.length;
                            var edgeProximity = button.length && (_screen.left + _screen.width - getBoundingClientRect(button).right <= 4) ? 0 : 8 + 2; // max scrollbar width is "8", singline line border on both sides is "2"
                            if (!allowDropDownList || !fullSelection)
                                x -= horizAdjustment;
                            spaceAbove = inputOffset.top - 1 - _screen.top;// - $body.scrollTop();
                            y = inputOffset.top + inputHeight;
                            spaceBelow = _screen.height - (inputOffset.top + inputHeight - _screen.top);
                            h = popup.outerHeight();
                            if (isTouchPointer && spaceAbove > 100) {
                                showAbove = true;
                                if (spaceAbove < h)
                                    h = spaceAbove;
                                else
                                    h = '';
                            }
                            else if (spaceBelow < h)
                                if (spaceAbove > spaceBelow) {
                                    showAbove = true;
                                    if (spaceAbove < h)
                                        h = spaceAbove;
                                    else
                                        h = '';
                                }
                                else
                                    h = spaceBelow;
                            else
                                h = '';
                            if (h)
                                h -= 4;//20;
                            h = h || popup.outerHeight();
                            if (showAbove) {
                                y = inputOffset.top - (h);// - scrollerOffset.top + scroller.scrollTop();
                                //var btn = _input.elementToButton(input);
                                //if (!btn.is('.app-caret-u-d'))
                                //    btn.addClass('app-caret-u');
                                //var btn = _input.elementToButton(input);
                                if (!button.is('.app-caret-u-d'))
                                    button.addClass('app-caret-u');
                            }
                            else
                                button.removeClass('app-caret-u');
                            if (x + w - horizAdjustment > _screen.width + _screen.left - edgeProximity)
                                x = _screen.width + _screen.left - 1 - w - edgeProximity;
                            popup.css({ left: x, top: y, 'max-height': h, height: h });
                            if (selectedItem) {
                                selectedItem.addClass('app-selected');
                                var newPopupScrollTop = selectedItem.position().top - (h - selectedItem.outerHeight()) / 2;
                                selectedText = selectedText.trim();
                                var isPartialMatch = value.length < selectedText.length, inputKeyCode;
                                if (isPartialMatch && !matchForContains && options.keyCode != 8) {
                                    //dataInput = dataInputOf(input);// input.closest('[data-input]');
                                    //controlInner = dataInput.find('.app-control-inner');
                                    //if (controlInner.length && input.data('restoreText') == null)
                                    //    input.data('restoreText', controlInner.text());
                                    //selectedText = value + selectedText.substring(value.length);
                                    //_input.fitContainer(dataInput, input, selectedText);
                                    adjustPopupSize();
                                    //if (!android) {
                                    //    inputKeyCode = input.data('keyCode');
                                    //    if (inputKeyCode != 8 && inputKeyCode != 46) {
                                    //        input.data('autoComplete', false);
                                    //        input.val(selectedText);
                                    //        input[0].setSelectionRange(value.length, selectedText.length);
                                    //        input.removeData('autoComplete');
                                    //    }
                                    //}
                                }
                                else if (allowDropDownList && !isPartialMatch && fullSelection) {
                                    newPopupScrollTop = popup.css('left', -10000).scrollTop(newPopupScrollTop).scrollTop();
                                    inputOffset = input.offset();
                                    var selectedItemTop = selectedItem.offset().top,
                                        newPopupTop = Math.max(_screen.top, y - (selectedItemTop - inputOffset.top) - (parseCss(selectedItem, 'padding-top') - parseCss(input, 'padding-top'))),
                                        popupHeight = popup.outerHeight();
                                    if (newPopupTop < 0) {
                                        newPopupTop -= 4;
                                        popup.find('li').last().css('margin-bottom', -newPopupTop);
                                        newPopupScrollTop = Math.ceil(newPopupScrollTop - newPopupTop);
                                        newPopupTop = 4;
                                    }
                                    else if (newPopupTop + popupHeight > _screen.height + _screen.top) {
                                        var newPopupTop2 = Math.max(_screen.top, _screen.height - popupHeight - 4 + _screen.top),
                                            delta = newPopupTop - newPopupTop2;
                                        newPopupTop = newPopupTop2;
                                        popup.find('li').first().css('margin-top', delta);
                                        //newPopupScrollTop = Math.floor(newPopupScrollTop - delta); / don't need that at all.
                                    }
                                    popup.css({ top: newPopupTop, left: x - /*parseCss(selectedItem, 'padding-left')*/horizAdjustment + (inlineEditorOverlay ? 5 : 0) });
                                    //input[0].setSelectionRange(0, selectedText.length);
                                }
                                popup.scrollTop(newPopupScrollTop);
                            }
                            else if (!input.val().length) {
                                dataInput = dataInputOf(input);// input.closest('[data-input]');
                                controlInner = dataInput.find('.app-control-inner');
                                if (controlInner.length && input.data('restoreText') == null)
                                    input.data('restoreText', controlInner.text());
                                _input.fitContainer(dataInput, input.closest('.app-data-input-container').width(''));
                                adjustPopupSize();
                            }
                            if (itemsDataController) {
                                var inlineEditorPage = input.closest('.app-page-inlineeditor');
                                if (inlineEditorPage.length)
                                    resetPageHeight(inlineEditorPage);
                            }
                        }

                        //clearTimeout(lookupPopupTimeout);
                        _input.methods.lookup._preventList();
                        if ('keyCode' in options)
                            _input.methods.lookup._popupTimeout = setTimeout(displayLookupPopup, 100);
                        else
                            displayLookupPopup();
                    }

                    if (!list.length)
                        list.push({ text: labelNoMatches, instruction: true });
                    renderListOfValues(list);

                    function executeError(e) {
                        if (popup.is(':visible') && popup.data('field') === dataView._id + '_' + field.Name) {
                            list.splice(0, 1);
                            renderListOfValues([[null, e.get_message()]].concat(list));
                        }
                    }

                    function doShowList() {
                        var searchController = itemsDataController,
                            searchFieldName = field.ItemsDataTextField,
                            primaryKeyField = field.ItemsDataValueField,
                            editRow = dataView.editRow(), searchCache = dataView.session(field.Name + '_listCache'),
                            fieldFilter = [searchFieldName],
                            filter = value !== options.originalValue && value !== '' ? [searchFieldName + ':$' + matchOperation + '$%js%' + _app.serializer.serialize(value)] : [],
                            contextFilter = createExternalFilter(dataView, field, filter),
                            populateExternalFilterEvent = $.Event('populateexternalfilter.dataview.app')/*,
                            externalFilterLength = contextFilter.length, externalFilterValue*/;
                        popup.data('field', dataView._id + '_' + field.Name);
                        populateExternalFilterEvent.externalFilter = contextFilter;
                        $document.trigger(populateExternalFilterEvent);
                        //while (externalFilterLength < contextFilter.length) {
                        //    externalFilterValue = contextFilter[externalFilterLength++];
                        //    filter.splice(0, 0, externalFilterValue.Name + ':=' + externalFilterValue.Value);
                        //}
                        contextFilter.forEach(function (cf) {
                            var matched;
                            filter.every(function (fe) {
                                if (fe.startsWith(cf.Name + ':'))
                                    matched = fe;
                                return !matched;
                            });
                            if (!matched)
                                filter.splice(0, 0, cf.Name + ':=' + cf.Value);
                        });

                        $(_input.methods.lookup._getCopyFields(field) /*dataView.session(field.Name + '_copyFields')*/).each(function () {
                            if (this.fromField !== 'null')
                                fieldFilter.push(this.fromField);
                        });

                        if (!searchCache)
                            dataView.session(field.Name + '_listCache', searchCache = {});

                        var searchArgs =
                        {
                            odp: true, //inputValue: input.val(),
                            controller: searchController, view: field.ItemsDataView, sync: editRow[aliasField.Index] == value ? editRow[field.Index] : null,
                            lookupContext: { Controller: dataView._controller, View: dataView._viewId, FieldName: field.Name },
                            _filter: filter, sort: searchFieldName, pageSize: field.tagged('lookup-fetch-all') ? 100000 : autoCompleteMaxRowCount, fieldFilter: fieldFilter, pageIndex: 0, requiresRowCount: true,
                            externalFilter: contextFilter,
                            distinct: field.is('lookup-distinct')//,// DistinctValues == true,
                            //success: 
                            //error: executeError
                        },
                            cacheKey = JSON.stringify(searchArgs),
                            cachedResult = searchCache[cacheKey];

                        function searchDone(result) {
                            searchController = searchArgs.controller; // AppStudio uses the base64-encoded controller names that change to the 'path' of the self link in the response'
                            searchCache[cacheKey] = result;
                            if (!getPageInfo(dataView) || // wrong page
                                !input.parent().length || // input has been destroyed
                                //input.val() !== searchArgs.inputValue || // the text of input is not the same
                                searchArgs.searchTimeout && _input.methods.lookup._searchTimeout !== searchArgs.searchTimeout // a different search is in progress
                            )
                                return;
                            input.data('ignoreContextFields', true);
                            var listOfValues = [],
                                data = result[searchController];
                            data.forEach(function (r) {
                                var values = [r[primaryKeyField || result.primaryKey[0]], r[searchFieldName]],
                                    distinctCount = r['group_count_'];
                                if (copyFields)
                                    $(copyFields).each(function () {
                                        values.push(r[this.fromField]);
                                    });
                                if (distinctCount != null)
                                    values.push(distinctCount);
                                listOfValues.push(values);
                            });
                            //if (!field.ContextFields)
                            dataView.session(lovKey(field)/*.Name + '_listOfValues_'*/ + (editRow[aliasField.Index] == value ? '' : value)/*.toLowerCase()*/, listOfValues);
                            list.splice(0, 1);
                            if (list.length && list[0].selected)
                                list.splice(0, 1);
                            if (data.length < result.totalRowCount)
                                listOfValues.push({ totalRowCount: result.totalRowCount, value: value });
                            if (popup.data('field') === dataView._id + '_' + field.Name) {
                                if (isLookup && !value) {
                                    list.splice(0, 1);
                                    list = listOfValues.concat(list);
                                    list.splice(0, 0, { text: typeToSearch, instruction: true });
                                }
                                else
                                    list = listOfValues.concat(list);
                                if (!list.length)
                                    list = [{ text: labelNoMatches, instruction: true }];
                                renderListOfValues(list);
                            }
                        }



                        if (!cachedResult) {
                            searchArgs.popupTimeout = _input.methods.lookup._popupTimeout;
                            _input.methods.lookup._preventList();
                            _input.methods.lookup._searchTimeout = searchArgs.searchTimeout = setTimeout(function searchExecute() {
                                _app.execute(searchArgs).done(searchDone).fail(executeError);
                            }, ie || edge ? 200 : 100);
                        }
                        else
                            searchDone(cachedResult);

                    }

                    if (doSearch) {
                        clearTimeout(field._showListTimeout);
                        if (!field.ItemsDataValueField) {
                            cachedPropertyItemsDataValueField = itemsDataController + '_' + field.ItemsDataView + '_DataValueField';
                            field.ItemsDataValueField = _app.cache[cachedPropertyItemsDataValueField];
                        }
                        if (!field.ItemsDataTextField) {
                            cachedPropertyItemsDataTextField = itemsDataController + '_' + field.ItemsDataView + '_DataTextField';
                            field.ItemsDataTextField = _app.cache[cachedPropertyItemsDataTextField];
                        }
                        if (!field.ItemsDataTextField || !field.ItemsDataValueField) {
                            _app.execute({
                                controller: itemsDataController, view: field.ItemsDataView, requiresData: false
                            }).done(function (result) {
                                field.ItemsDataValueField = result.primaryKey[0].Name;
                                field.ItemsDataTextField = result.fields[0].Name;
                                _app.cache[cachedPropertyItemsDataValueField] = field.ItemsDataValueField;
                                _app.cache[cachedPropertyItemsDataTextField] = field.ItemsDataTextField;
                                doShowList();

                            }).fail(executeError);
                        }
                        else
                            if (options.keyCode != null)
                                field._showListTimeout = setTimeout(doShowList, 300);
                            else
                                doShowList();
                    }
                },
                _itemToDetails: function (field, item) {
                    var s = [], i = 2,
                        copy = field.Copy, f, m, v;
                    if (copy)
                        while (m = _app._fieldMapRegex.exec(copy)) {
                            f = field._dataView.findField(m[1]);
                            if (f && !f.Hidden && !f.OnDemand && f.Index == f.AliasIndex && item && item[i] !== undefined) {
                                v = item[i];
                                v = v == null ? v = nullValueInForms : field.format(item[i]);
                                s.push(v);
                            }
                            i++;
                        }
                    return s.join('; ');
                },
                _rowToValues: function (lookupField, lookupDataView, row) {
                    var aliasField = lookupField._dataView._allFields[lookupField.AliasIndex],
                        copy = lookupField.Copy,
                        dataValueField = lookupField.ItemsDataValueField,
                        dataTextField = lookupField.ItemsDataTextField,
                        valueField, textField,
                        copyInfo, copyField, copyFromField,
                        value = null,
                        text = null,
                        values;

                    if (!dataValueField)
                        $(lookupDataView._allFields).each(function () {
                            if (this.IsPrimaryKey) {
                                dataValueField = this.Name;
                                return false;
                            }
                        });
                    if (!dataTextField)
                        $(lookupDataView._allFields).each(function () {
                            var field = this;
                            if (!field.Hidden && !field.OnDemand) {
                                dataTextField = field.Name;
                                return false;
                            }
                        });
                    valueField = lookupDataView.findField(dataValueField);
                    textField = lookupDataView.findField(dataTextField);

                    if (!valueField)
                        _app.alert('Invalid value field ' + dataValueField);
                    else if (!textField)
                        _app.alert('Invalid text field ' + dataTextField);
                    else {
                        if (row) {
                            text = row[textField.Index];
                            value = row[valueField.Index];
                        }
                        if (lookupField.ItemsTargetController && textField) {
                            if (valueField)
                                values = [{ name: valueField.Name, value: value }];
                            if (textField)
                                values.push({ name: textField.Name, value: text });
                        }
                        else {
                            values = [{ name: lookupField.Name, value: value }];

                            if (lookupField.Index != lookupField.AliasIndex)
                                values.push({ name: aliasField.Name, value: text });
                            if (copy)
                                while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                                    copyFromField = copyInfo[2];
                                    copyField = lookupDataView.findField(copyFromField);
                                    if (copyField || copyFromField == 'null')
                                        values.push({ name: copyInfo[1], value: copyField && row ? row[copyField.Index] : null });
                                }
                        }
                    }
                    return values;
                },
                _removeBasketItem: function (li, shiftToNext) {
                    if (!li.length) return;
                    var dataInput = dataInputOf(li),// li.closest('[data-input]'),
                        field = _input.elementToField(li),
                        dataView = field._dataView,
                        row = dataView.editRow(),
                        newValue = _app.csv.toArray(row[field.Index]),// (row[field.Index] || '').split(_app._simpleListRegex),
                        //item = (field.DynamicItems || field.Items)[parseInt(li.attr('data-index'))],
                        nextListItem;
                    // shift focus to the next item
                    if (shiftToNext) {
                        nextListItem = li.next();
                        if (!nextListItem.length)
                            nextListItem = li.prev();
                    }
                    else {
                        nextListItem = li.prev();
                        if (!nextListItem.length)
                            nextListItem = li.next();
                    }
                    nextListItem.addClass('app-focus');
                    // update the basket value
                    //newValue.splice(newValue.indexOf((item[0] || '').toString()), 1);
                    newValue.splice(newValue.indexOf(li.attr('data-value')), 1);
                    newValue = _app.csv.toString(newValue);
                    if (!newValue.length)
                        newValue = null;
                    li.remove();
                    dataInput.toggleClass('app-null', newValue == null);
                    inputExecute({ dataView: dataView, values: { field: field, value: newValue }, skipDrawingInput: dataInput });
                    // focus on the input text box if the basket is empty
                    if (!newValue) {
                        dataInput.find('.app-control-helper').hide();
                        _input.methods.lookup.focus(dataInput);
                    }
                },
                _createItemFromText: function (field, dataInput, text, delay) {
                    if (delay !== false) {
                        setTimeout(function () {
                            if (!_input.barcode(':input'))
                                _input.methods.lookup._createItemFromText(field, dataInput, text, false);
                        }, 32);
                        return;
                    }
                    var view = field.ItemsNewDataView,
                        dataValueField = field.ItemsDataValueField,
                        dataTextField = field.ItemsDataTextField;

                    function createNewInForm() {
                        touch.lookup({ field: field, create: true, dataInput: dataInput, value: text });
                    }

                    //field._dataView.sessionRemove(lovKey(field/*.Name + '_listOfValues_'*/));
                    //field._dataView.session(field.Name + '_listCache', null);
                    clearFieldLookupCache(field);
                    if (!isBusy() && text && field.ItemsDataController)
                        if (view && dataValueField && dataTextField && !field.Copy) {
                            _input.popup('hide');
                            _app.execute({
                                odp: true,
                                controller: field.ItemsDataController, view: view, command: 'Insert', values: [{ field: dataValueField }, { field: dataTextField, newValue: text }],
                                done: function (result) {
                                    if (result.rowsAffected && !result.errors.length) {
                                        var data = result[field.ItemsDataController],
                                            v = [data[dataValueField], data[dataTextField]];
                                        findInput().removeData('restoreText');
                                        _input.methods.lookup._useItemValue(field, v);
                                        touch.notify(String.format(resourcesActions.Scopes.Form.Insert.Notify, v[1]));
                                    }
                                    else
                                        createNewInForm();
                                }
                            });
                        }
                        else
                            createNewInForm();

                },
                _useItemValue: function (field, v, optional, broadcast) {
                    var value = v[0],
                        text = v[1] != null ? field.format(v[1]) : '',
                        dataView = field._dataView,
                        row = dataView.editRow(),
                        aliasField = dataView._allFields[field.AliasIndex],
                        activeInput = findInput(),
                        input = activeInput.length && dataInputOf(activeInput).data('field') === field.Name ? activeInput : $(),
                        dataInput = input.length ? dataInputOf(input) : findActivePage('[data-control="field"][data-field="' + field.Name + '"]'),
                        inner = dataInput.find('.app-control-inner'),
                        valueIndex, newValue, basketChanged, lov;

                    _input.methods.text._checkIfChanged(field, value, dataInput);

                    if (value == null) {
                        if (field.ItemsTargetController) return;
                        if (row[field.Index] != null) {
                            _input.clearValue(field);
                            var placeholder = _input.fieldToPlaceholder(field);
                            input = findInput(dataInput).val(''/*input.val() ? placeholder : ''*/).removeData('original').removeData('restoreText');
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container'));
                            dataInput.find('.app-data-input-placeholder').css('display', '');
                            if (input.length)
                                try {
                                    input[0].setSelectionRange(0, placeholder.length);
                                } catch (ex) {
                                    // do nothing
                                }
                        }
                    }
                    else if (field.ItemsTargetController) {
                        // basket lookup input 
                        lov = _app.csv.toArray(row[field.Index]);
                        // find value index and the corresponding item index
                        if (value != null)
                            value = value.toString();
                        $(lov).each(function (index) {
                            if (value == this) {
                                valueIndex = index;
                                return false;
                            }
                        });
                        basketChanged = valueIndex == null;
                        if (basketChanged) {
                            lov.push(v[0]);
                            valueIndex = lov.length - 1;
                            newValue = _app.csv.toString(lov);
                            if (newValue === '')
                                newValue = null;
                            dataInput.toggleClass('app-null', newValue == null);
                        }
                        // update helper lists of interactive basket controls
                        findActivePage('[data-input-container="' + dataView._id + '"] [data-control="field"][data-field="' + field.Name + '"]').each(function () {
                            var control = $(this),
                                helper = control.find('.app-control-helper');
                            if (helper.length) {
                                helper.find('li').removeClass('app-focus');
                                if (basketChanged) {
                                    var newListItem = $li().text(text).attr('data-value', value).appendTo(helper.show().find('ul')),
                                        duplicateItem;
                                    if (field.is('lookup-distinct'))
                                        _input.addCount(v[v.length - 1], newListItem);
                                    _input.drawing(control, false);
                                    if (field.ItemsStyle !== 'DropDownList') {
                                        $(field.Items).each(function () {
                                            var item = this;
                                            if (item[0] == v[0]) {
                                                duplicateItem = true;
                                                return false;
                                            }
                                        });
                                        if (!duplicateItem)
                                            field.Items.push(v);
                                    }
                                    //control.data('redraw', false);
                                }
                                else
                                    //helper.find('li:eq("' + valueIndex + '")').addClass('app-focus').closest('[data-input]').addClass('app-has-focus');
                                    hasFocus(dataInputOf(helper.find('li:eq("' + valueIndex + '")').addClass('app-focus')));
                                helper.css('visibility', '');
                            }
                        });
                        if (broadcast == false) {
                            row[field.Index] = newValue;
                            return;
                        }
                        text = '';
                        // reset lookup input
                        if (input.length) {
                            input.data({ original: text, last: text }).val(text)[0].setSelectionRange(0, 0);
                            dataInput.find('.app-data-input-placeholder').show();
                            inner.text(_input.fieldToPlaceholder(field));
                            inner.css('width', '');
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container').width(''));
                            if (!basketChanged)
                                hasFocus(dataInput).find('.app-control-helper').trigger('focus');
                            var inputOffset = dataInput.offset(),
                                inputHeight = dataInput.outerHeight(),
                                scrollable = findScrollable(input),
                                scrollableHeight = scrollable.height(),
                                scrollableOffset = scrollable.offset();
                            if (inputOffset.top + inputHeight > scrollableOffset.top + scrollableHeight)
                                scrollable.scrollTop(scrollable.scrollTop() + (inputOffset.top + inputHeight - (scrollableOffset.top + scrollableHeight) + 4));
                        }
                        // broadcast basket changes
                        if (basketChanged)
                            inputExecute({ dataView: dataView, values: { field: field, value: newValue }, skipDrawingInput: dataInput });
                        return basketChanged;
                    }
                    else {
                        // standard lookup input
                        if (input.length)
                            input.data({ original: text, last: text }).val(text)[0].setSelectionRange(0, text.length);
                        inner.text(text);
                        if (input.length) {
                            _input.fitContainer(dataInput, input.closest('.app-data-input-container').width(''));
                            if (setCaretAtEndOnSelect(dataInput))
                                input[0].setSelectionRange(text.length, text.length);
                        }
                        dataInput.removeClass('app-null').find('.app-data-input-placeholder').hide();
                        if (row[field.Index] != value || field.Index !== aliasField.Index && row[aliasField.Index] != text) {
                            var values = [{ name: field.Name, value: value }];
                            if (field.Index !== aliasField.Index)
                                values.push({ name: aliasField.Name, value: text });
                            $(_input.methods.lookup._getCopyFields(field)/*dataView.session(field.Name + '_copyFields')*/).each(function (index) {
                                values.push({ name: this.toField, value: this.fromField === 'null' ? null : v[index + 2] });
                            });
                            inputExecute({ dataView: dataView, values: values, skipDrawingInput: dataInput });
                            if (!isTouchPointer) {
                                var advanceInContainer = field.is('lookup-auto-advance');
                                if (advanceInContainer && values.length && values[0].value != null)
                                    setTimeout(_input.move, 0, dataInput, 'right', 9, advanceInContainer === true ? null : advanceInContainer);
                            }

                        }
                    }
                }
            },
            'autocomplete': {
                render: function (options) {
                    _input.methods.lookup.render(options);
                },
                focus: function (target) {
                    return _input.methods.lookup.focus(target);
                },
                click: function (event) {
                    _input.methods.lookup.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.lookup.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.lookup.blur(event);
                },
                setup: function (event) {
                    _input.methods.lookup.setup(event);
                }
            },
            'dropdownlist': {
                render: function (options) {
                    _input.methods.lookup.render(options);
                },
                focus: function (target) {
                    return _input.methods.lookup.focus(target);
                },
                click: function (event) {
                    _input.methods.lookup.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.lookup.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.lookup.blur(event);
                },
                setup: function (event) {
                    _input.methods.lookup.setup(event);
                }
            },
            'radiobuttonlist': {
                render: function (options) {
                    _input.methods.listbox.render(options);
                },
                focus: function (target) {
                    return _input.methods.listbox.focus(target);
                },
                click: function (event) {
                    _input.methods.listbox.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.listbox.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.listbox.blur(event);
                }
            },
            'checkboxlist': {
                render: function (options) {
                    _input.methods.listbox.render(options);
                },
                focus: function (target) {
                    return _input.methods.listbox.focus(target);
                },
                click: function (event) {
                    _input.methods.listbox.click(event);
                },
                clickButton: function (event, feedback) {
                    return _input.methods.listbox.clickButton(event, feedback);
                },
                blur: function (event) {
                    _input.methods.listbox.blur(event);
                }
            },
            'listbox': {
                render: function (options) {
                    var dataInput = options.container,
                        inner = options.inner,
                        listOuter, listContainer, list,
                        field = options.field, v, t,
                        itemsStyle = field.ItemsStyle,
                        row = options.row,
                        canCreateItems,
                        fieldColumns = field.Columns, itemsPerColumn,
                        lov = field.DynamicItems || field.Items, valueList,
                        itemCount,
                        //hscrollbarHandle,
                        isActionGroup = field._actionGroup === true,
                        itemDescriptions, itemIcons;
                    v = row[field.Index];
                    if (options.editing || isActionGroup) {
                        canCreateItems = !isActionGroup && _input.canCreateItems(field, row);
                        if (isActionGroup) {
                            lov = field.DynamicItems = [];
                            itemDescriptions = {};
                            itemIcons = {};
                            field._dataView.actionGroups(field.Name).forEach(function (ag) {
                                ag.Actions.forEach(function (a) {
                                    var actionPath = ag.Id + '/' + a.Id;
                                    lov.push([actionPath, a.HeaderText || a.CommandName]);
                                    itemDescriptions[actionPath] = a.Description;
                                    itemIcons[actionPath] = actionToIcon(a);
                                });
                            });
                            dataInput.attr({ 'data-input': itemsStyle.toLowerCase(), 'data-auto-focus': false });
                        }
                        itemCount = lov.length;
                        if (fieldColumns)
                            itemsPerColumn = Math.ceil((itemCount + (canCreateItems ? 1 : 0)) / fieldColumns);
                        else {
                            itemsPerColumn = field.Rows;
                            if (isActionGroup && !itemsPerColumn)
                                itemsPerColumn = 1;
                            if (!itemsPerColumn)
                                itemsPerColumn = 5;
                        }

                        dataInput.removeClass('app-null app-has-helper');
                        inner.removeClass('app-collapsed');
                        var focusedItemText = inner.find('.app-focus').text(),
                            isSingleton = itemCount === 1,
                            scrollbarInfoHeight = isSingleton || isActionGroup ? 0 : scrollbarInfo.height;

                        listContainer = inner.find('.app-data-list');
                        if (!listContainer.length) {
                            inner.empty();
                            if (scrollbarInfoHeight)
                                listOuter = $span('app-data-list-outer').appendTo(inner);
                            listContainer = $span('app-data-list app-has-scrollbars').attr('tabindex', 0).appendTo(listOuter || inner);
                            //if (scrollbarInfoHeight)
                            //    listContainer.css({ 'margin-bottom': -scrollbarInfoHeight - parseCss(listContainer, 'padding-bottom'), 'overflow-x': 'scroll' });
                            //hscrollbarHandle = $('<span class="app-hscrollbar2"><span class="app-hscrollbar-handle" data-draggable="hscrollbar"></span></span>').toggleClass('app-scrollbar-wide', wideScrollbars).appendTo(inner).find('.app-hscrollbar-handle');
                            listContainer.on('scroll', function () {
                                updateHScrollbar(listContainer/*, hscrollbarHandle*/);
                                //if (listContainer.data('scrolling') === false)
                                //    listContainer.removeData('scrolling');
                                //else {
                                //updateHScrollbar(listContainer/*, hscrollbarHandle*/);
                                //var revealTimeout = listContainer.data('reveal-timeout');
                                //    scrollbar = hscrollbarHandle.parent();
                                //scrollbar.addClass('app-scrollbar-reveal');
                                // clearInterval(revealTimeout);
                                //revealTimeout = setInterval(function () {
                                //    scrollbar.removeClass('app-scrollbar-reveal');
                                //    clearInterval(revealTimeout);
                                //}, 200);
                                //listContainer.data('reveal-timeout', revealTimeout);
                                //}
                            });
                            listContainer.toggleClass('app-data-list-actions', isActionGroup);
                        }
                        if (itemCount)
                            listContainer.empty();
                        dataInput.toggleClass('app-has-singleton-data-list', isSingleton);
                        listContainer.removeClass('app-inner-shadow-right app-inner-shadow-left app-inner-shadow-left-right');
                        if (itemsStyle === 'CheckBoxList' && v)
                            valueList = _app.csv.toArray(v.toString());
                        var addGroupCount = field.tagged('lookup-distinct'),
                            topCount = field.is('lookup-top'), originalLov = lov, nullItem;
                        if (topCount) {
                            topCount = parseInt(topCount);
                            if (topCount) {
                                lov = lov.slice(0);
                                if (lov.length && lov[0][0] == null && itemsStyle.match(/^(RadioButtonList|ListBox)$/)) {
                                    nullItem = lov[0];
                                    lov.splice(0, 1);
                                }
                                lov = lov.sort(compareTwoItems);
                                if (!valueList && v != null)
                                    valueList = [v.toString()];
                                if (valueList && valueList.length) {
                                    var selectedItems = [], remainingItems = [], i;
                                    lov.forEach(function (item) {
                                        var itemValue = item[0];
                                        if (itemValue != null && valueList.indexOf(itemValue) !== -1)
                                            selectedItems.push(item);
                                        else
                                            remainingItems.push(item);
                                    });
                                    for (i = 0; i < remainingItems.length; i++) {
                                        if (selectedItems.length >= topCount)
                                            break;
                                        selectedItems.push(remainingItems[i]);
                                    }
                                    lov = selectedItems.sort(compareTwoItems);
                                }
                                lov.splice(topCount);
                                itemsPerColumn = topCount;
                                if (nullItem) {
                                    lov.splice(0, 0, nullItem);
                                    itemsPerColumn++;
                                }
                            }
                        }
                        $(lov).each(function (index) {
                            if (index % itemsPerColumn === 0)
                                list = $ul().appendTo(listContainer);
                            var item = this,
                                li = $li().appendTo(list),
                                itemValue = item[0],
                                itemText = item[1],
                                actionIcon;
                            if (topCount)
                                index = originalLov.indexOf(item);
                            li.attr('data-index', index);
                            if (itemText == null)
                                itemText = labelEmptyValue;
                            if (field.HtmlEncode)
                                li.text(itemText);
                            else
                                li.html(itemText);
                            if (addGroupCount && itemValue != null)
                                _input.addCount(item[item.length - 1], li);
                            if (valueList && valueList.indexOf(itemValue == null ? '' : itemValue.toString()) !== -1 ||
                                v == itemValue)  // do not change to "===" since both value and type may not have the same type for static items and when ODP is enabled
                                li.addClass('app-selected');
                            if (itemValue == null && itemText === labelEmptyValue)
                                li.addClass('app-null');
                            if (itemDescriptions)
                                li.attr('title', itemDescriptions[itemValue]);
                            if (itemIcons) {
                                actionIcon = itemIcons[itemValue];
                                if (actionIcon)
                                    materialIcon(actionIcon, li);
                            }
                        });
                        if (topCount && originalLov.length > topCount)
                            $li().appendTo(list).attr('data-index', 'more').text((originalLov.length - topCount - (nullItem ? 1 : 0)) + ' ' + labelMore);
                        var newItem = listContainer.find('[data-index="new"]');
                        if (!canCreateItems)
                            newItem.remove();
                        else if (!newItem.length) {
                            if ((!itemsPerColumn || itemCount % itemsPerColumn === 0) && !(itemCount < field.Rows) || !itemCount)
                                list = $ul().appendTo(listContainer);
                            /*li = */$li().appendTo(list).attr('data-index', 'new').text(resourcesLookup.GenericNewToolTip);
                            //iconCarat('right', 'small', li);
                            //$('<span class="glyphicon glyphicon-chevron-right"/>').appendTo(li);
                        }
                        this._scrollItemIntoView(listContainer, false);
                        if (!itemCount && !(canCreateItems && listContainer.find('li').length === 1))
                            listContainer.children().addClass('app-hidden');

                        // re-focus item 
                        if (focusedItemText)
                            inner.find('li').each(function () {
                                var li = $(this);
                                if (focusedItemText === li.text()) {
                                    li.addClass('app-focus');
                                    return false;
                                }
                            });
                        var hscrollbar = listContainer.next().css('visibility', '');
                        if (itemCount)
                            updateHScrollbar(listContainer);
                        else
                            hscrollbar.css('visibility', 'hidden');
                        if (v != null)
                            this._updateCollapsibleValue(field, dataInput);
                    }
                    else {
                        inner.find('.app-data-list,.app-list-value').remove();
                        var textStyle = field.tagged(/\btext-style-(\w+)\b/);
                        if (textStyle)
                            dataInput.attr('data-text-style', textStyle[1]);
                        if ((itemsStyle === 'CheckBoxList' || field.ItemsTargetController) && v) {
                            dataInput.removeClass('app-null');
                            t = field.text(v, false);
                            if (field.HtmlEncode)
                                inner.text(t);
                            else
                                inner.html(t);
                        }
                        else {
                            _input.methods.text.render(options);
                            if (field.ItemsDataController && options.row[field.Index] != null && !field.tagged('lookup-details-hidden'))
                                $span('app-field-object-ref app-feedback').appendTo(inner).attr('title', resourcesMobile.LookupViewAction);
                        }
                    }
                    _input.methods.text._createFooter(options);
                },
                focus: function (target) {
                    _input.beforeFocus(target);
                    var list = target.find('.app-data-list');
                    if (!list.length)
                        list = target.closest('.app-data-list');
                    list.trigger('focus');
                    saveLastFocusedField(target);
                    this._focusItem(list);
                    this._scrollItemIntoView(list);
                    hasFocus(target);
                    return false;
                },
                click: function (e) {
                    if (e.type === 'touchend')
                        return;
                    var target = $(e.target),
                        li = target.closest('li'),
                        listInner, scrollable,
                        field, dataView, itemsStyle,
                        lov, values, newValue,
                        skipFocus;
                    if (!_input.cancel() || li.parent().is('.app-hidden')) return;
                    hideTooltip();


                    if (li.length) {
                        listInner = li.closest('.app-data-list');
                        field = _input.elementToField(li);
                        itemsStyle = field.ItemsStyle;
                        if (field._dataView._busy() || li.parent().is('.app-hidden')) return;

                        var dataInput = dataInputOf(listInner),// listInner.closest('[data-input]'),
                            dataIndex = li.attr('data-index');
                        if (dataIndex === 'new') {
                            this._focusItem(li);
                            touch.lookup({ field: field, create: true, dataInput: dataInput });
                            e.preventDefault();
                            return;
                        }
                        if (dataIndex === 'more') {
                            e.preventDefault();
                            _input.editor({
                                dataView: dataView, fieldName: field.Name
                            });
                            return;
                        }

                        dataView = field._dataView;
                        lov = field.DynamicItems || field.Items;
                        if (lov.length)
                            if (itemsStyle === 'CheckBoxList') {
                                li.toggleClass('app-selected');
                                values = [];
                                listInner.find('.app-selected').each(function () {
                                    var index = parseInt($(this).attr('data-index')),
                                        item = lov[index],
                                        itemValue = item[0];
                                    values.push((itemValue != null ? itemValue : '').toString());
                                });
                                //dataInput.data('redraw', false);
                                if (field.ItemsTargetController || itemsStyle === 'CheckBoxList')
                                    newValue = _app.csv.toString(values);
                                else
                                    newValue = values.join(',');
                                //clearTimeout(listInner.data('timeout'));
                                //listInner.data('timeout', setTimeout(function () {
                                //    inputExecute({ dataView: dataView, values: { field: field, value: newValue === '' ? null : newValue }, skipDrawingInput: dataInput });
                                //}, 250));
                                inputExecute({ dataView: dataView, values: { field: field, value: newValue === '' ? null : newValue }, skipDrawingInput: dataInput });
                            }
                            else {
                                if (li.is('.app-selected')) {
                                    this._focusItem(listInner);
                                    _input.methods.listbox._updateCollapsibleValue(field, dataInput);
                                    return;
                                }
                                listInner.find('.app-selected').removeClass('app-selected');
                                li.addClass('app-selected');
                                var item = lov[parseInt(li.attr('data-index'))];
                                _input.drawing(dataInput, false);
                                _input.methods.listbox._useItemValue(field, item);
                                _input.methods.listbox._updateCollapsibleValue(field, dataInput);
                                if (!isTouchPointer && field.is('lookup-auto-advance') && item[0] != null) {
                                    dataInput.find('.app-focus').removeClass('app-focus');
                                    skipFocus = true;
                                    //setTimeout(function () {
                                    //    _input.move(dataInput, 'right', 9);
                                    //});
                                    setTimeout(_input.move, 0, dataInput, 'right', 9);
                                }
                                //    clearTimeout(listInner.data('timeout'));
                                //    listInner.data('timeout', setTimeout(function () {
                                //        _input.move(dataInput, 'right', 9);
                                //    }/*, itemsStyle === 'RadioButtonList' ? 150 : 10*/));
                            }
                        if (li.closest('.app-data-list').length) {
                            scrollable = findScrollable(listInner);
                            if (scrollable.height() > listInner.height())
                                listInner.trigger('focus');
                            this._scrollItemIntoView(li);
                            listInner.find('.app-focus').removeClass('app-focus');
                            this._focusItem(li);
                            if (!skipFocus)
                                this.focus(target);
                        }
                        e.preventDefault();
                    }
                    else {
                        var inner = target.closest('.app-collapsed');
                        if (inner.length) {
                            inner.removeClass('app-collapsed');
                            li = inner.find('.app-selected').first();
                            if (li.length) {
                                this._scrollItemIntoView(li);
                                this._focusItem(li);
                            }
                        }
                    }
                },
                //clickButton: function (event, feedback) {
                //    return _input.methods.lookup.clickButton(event, feedback);
                //},
                blur: function (e) {
                    hasFocus(e.target, false);
                },
                _updateCollapsibleValue: function (field, dataInput) {
                    if (field.is('lookup-collapsible')) {
                        var inner = dataInput.find('.app-control-inner'),
                            value = inner.find('.app-list-value'),
                            lov, hasValue;
                        if (!value.length) {
                            value = $span('app-list-value').appendTo(inner.addClass('app-has-list-value'));
                            materialIcon('material-icon-expand-more', inner).attr('title', labelMaximize);
                        }
                        lov = [];
                        inner.find('ul:not(.app-hidden) .app-selected').each(function () {
                            lov.push($(this).html());
                        });
                        value.html(lov.join(', '));
                        hasValue = lov.length > 0;
                        inner.addClass('app-collapsible').toggleClass('app-collapsed', hasValue);//.attr('title', hasValue ? tooltip : null)
                    }
                },
                _scrollItemIntoView: function (item, syncScrollbar) {
                    if (!item.is('.app-selected,.app-focus'))
                        item = item.find('.app-focus').first();
                    if (!item.length)
                        item = item.find('.app-selected').first();
                    if (item.length) {
                        var offset = item.offset(),
                            width = item.outerWidth(),
                            container = item.closest('.app-data-list'),
                            containerWidth = container.width(),
                            scrollGap = Math.min(width * .2, containerWidth * .1),
                            containerOffset = container.offset();
                        if (offset.left < containerOffset.left)
                            container.data('scrolling', false).scrollLeft(item.parent().prev().length ? (container.scrollLeft() + offset.left - containerOffset.left - scrollGap) : 0);
                        else if (offset.left + width > containerOffset.left + containerWidth)
                            container.data('scrolling', false).scrollLeft(container.scrollLeft() + offset.left - containerOffset.left - (containerWidth - width - scrollGap));
                        if (syncScrollbar != false)
                            updateHScrollbar(container);
                    }
                },
                _focusItem: function (item) {
                    if (!isTouchPointer) {
                        var container = item.closest('.app-data-list'),
                            allItems = container.find('li');//.removeClass('app-focus');
                        if (!item.is('li')) {
                            if (item.find('.app-focus').length)
                                return;
                            item = container.find('.app-selected').first();
                        }
                        if (!item.length)
                            item = allItems.first();
                        item.addClass('app-focus');
                    }
                },
                _useItemValue: function (field, v, isNew) {
                    var dataView = field._dataView,
                        row,
                        fieldName = field.Name,
                        values = [{ name: fieldName, value: v[0] }],
                        copy = field.Copy, copyIndex,
                        hasAlias = field.Index !== field.AliasIndex, newValue,
                        actionInfo;
                    if (field.ItemsTargetController) {
                        row = dataView.editRow();
                        newValue = row[field.Index] || '';
                        if (newValue)
                            newValue += ',';
                        newValue += v[0].toString();
                        values[0].value = newValue;
                    }
                    else {
                        if (hasAlias)
                            values.push({ name: dataView._allFields[field.AliasIndex].Name, value: v[1] });
                        if (copy) {
                            copyIndex = 2;
                            while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                                copyToField = copyInfo[1];
                                copyFromField = copyInfo[2];
                                if (dataView.findField(copyToField))
                                    values.push({ name: copyToField, value: copyFromField === 'null' ? null : v[copyIndex++]/* || _input.fieldToPlaceholder(copyField)*/ });
                            }
                        }
                    }
                    if (!isNew) {
                        if (field._actionGroup) {
                            setTimeout(function () {
                                $('#' + dataView._id + ' [data-field="' + fieldName + '"] .app-selected').removeClass('app-selected');
                            }, feedbackDelay * 2);
                            hideTooltip();
                            actionInfo = dataView.actionInfo(v[0]);
                            //values[0].value = null;
                            if (actionInfo && dataView._isActionAvailable(actionInfo.action))
                                controllerActionCallback({ action: actionInfo });
                            return; // do nothing

                        }
                        inputExecute({ dataView: dataView, values: values, skipPopulateField: field });
                        values.splice(0, hasAlias ? 2 : 1);
                    }
                    if (values.length)
                        inputExecute({ dataView: dataView, values: values, populateDynamicLookups: false, skipPopulateField: field });
                }
            }
        },
        //
        // Global methods of Universal Input API
        //
        of: function (element, selector) {
            if (!element || !element.jquery)
                element = $(element);
            var dataInput = element.closest('[data-input]');
            if (!dataInput.length)
                dataInput = element.find('.app-data-input').closest('[data-input]');
            return selector ? dataInput.find(selector) : dataInput;
        },
        restoreLastPopup: function () {
            if (isInTransition) return;
            var lastInputBeforeScroll = this._lastInputBeforeScroll,
                dropArrow, scrollable, scrollableOffset, lastInputOffset;
            if (lastInputBeforeScroll && lastInputBeforeScroll.length && !isTouchPointer) {
                dropArrow = _input.elementToButton(lastInputBeforeScroll);//lastInputBeforeScroll.closest('[data-input]').find('.app-data-input-button');
                if (dropArrow.length) {
                    scrollable = findScrollable();
                    scrollableOffset = scrollable.offset();
                    lastInputOffset = lastInputBeforeScroll.offset();
                    if (scrollableOffset.top < lastInputOffset.top && lastInputOffset.top + lastInputBeforeScroll.outerHeight() < scrollableOffset.top + scrollable.height()) {
                        var altKeyDown = $.Event('keydown');
                        altKeyDown.which = 40;
                        altKeyDown.altKey = true;
                        findInput().trigger(altKeyDown);
                    }
                }
            }
        },
        reset: function (field) {
            var fieldName,
                dataView = field._dataView,
                itemsStyle;
            if (typeof field == 'string') {
                dataView = activeDataView();
                field = dataView.findField(field);
            }
            itemsStyle = field.ItemsStyle;
            fieldName = field.Name;
            if (itemsStyle) {
                clearFieldLookupCache(field);
                if (itemsStyle.match(/List/)) // DropDownList|ListBox|RadioButtonList|CheckBoxList
                    _app.execute({
                        controller: dataView._controller, view: dataView._viewId, requiresData: false,
                        metadataFilter: ["fields", "items"], fieldFilter: [fieldName]
                    }).then(function (result) {
                        field.Items = result.map[fieldName].Items.splice(0);
                        if (itemsStyle !== 'DropDownList')
                            inputExecute({ values: [{ name: fieldName, value: dataView.editRow()[field.Index] }], raiseCalculate: false });
                    });
            }
        },
        clearValue: function (field) {
            var dataView = field._dataView;
            if (typeof field == 'string') {
                dataView = activeDataView();
                field = dataView.findField(field);
            }
            var values = [{ name: field.Name, value: null }],
                copy = field.Copy, copyField, copyInfo;
            if (field.Index !== field.AliasIndex)
                values.push({ name: dataView._allFields[field.AliasIndex].Name, value: null });
            if (copy)
                while (copyInfo = _app._fieldMapRegex.exec(copy)) {
                    copyInfo = copyInfo[1];
                    copyField = field._dataView.findField(copyInfo);
                    if (copyField && copyField.ReadOnly || copyInfo === 'null')
                        values.push({ name: copyInfo, value: null });
                }
            inputExecute({ dataView: dataView, values: values, skipPopulateField: field });
            findInput().data('original', '');
        },
        fieldToPlaceholder: function (field) {
            var placeholder = '',
                itemsStyle = field.ItemsStyle,
                watermark = field.Watermark,
                labelLookupSelectLink = resourcesLookup.SelectLink,
                labelValidatorOptional = resourcesValidator.Optional,
                lov;
            if (watermark)
                //if (watermark === labelValidatorRequired)
                //    watermark = watermark.toLowerCase();
                placeholder = watermark;
            else
                if (field.ItemsTargetController)
                    placeholder = resourcesLookup.AddItem;
                else if (itemsStyle && !itemsStyle.match(/^CheckBox/) && !field.ItemsTargetController) {
                    lov = field.DynamicItems || field.Items;
                    placeholder = lov && lov.length && lov[0][0] == null ? lov[0][1] : labelLookupSelectLink;
                }
                else if (!field.AllowNulls)
                    placeholder = resourcesValidator.Required.toLowerCase();
            if (!String.isNullOrEmpty(placeholder)) {
                if (field._naPlaceholder == null)
                    field._naPlaceholder = hideHorizontalLinesInForms(field._dataView) && !showInputLinesInForms(field._dataView);
                if (field._naPlaceholder && field.AllowNulls)
                    placeholder = labelValidatorOptional;//.toLowerCase();// resources.InfoBar.Empty;
            }
            // 
            //if ((placeholder === labelValidatorRequired || placeholder === labelLookupSelectLink || placeholder === labelValidatorOptional) && $settingsEnabled('ui.form.placeholders.system.lowerCase'))
            //    placeholder = placeholder.toLowerCase();
            return placeholder;
        },
        eventToButton: function (event) {
            return this.elementToButton(event.target);
        },
        elementToButton: function (target) {
            //return $(target).closest('[data-input]').find('.app-data-input-button');
            return dataInputOf(target, '.app-data-input-button');
        },
        eventToMethod: function (event) {
            return this.elementToMethod(event.target);
        },
        elementToMethod: function (target) {
            var dataInput = dataInputOf(target);// $(target).closest('[data-input]');
            return _input.methods[dataInput.attr('data-input')];
        },
        eventToField: function (event) {
            return this.elementToField($(event.target));
        },
        elementToField: function (target) {
            var control = target.closest('[data-field]'),
                fieldName = control.attr('data-field'),
                inputContainer = target.closest('[data-input-container]'),
                dataView, field,
                result;
            if (fieldName && inputContainer.length) {
                dataView = findDataView(inputContainer.attr('data-input-container'));
                if (dataView)
                    field = dataView.findField(fieldName);
                return field;
            }
        },
        inputsOf: function (dataContainer, sparse) {
            if (sparse) {
                var result = [];
                dataContainer.find('[data-input]').each(function (index) {
                    var input = $(this);
                    result.push(!input.is('[data-input="none"]') && input.is(':visible') ? this : null);
                });
                return result;
            }
            return dataContainer.find('[data-input]:not([data-input="none"])').filter(fnVisible);
        },
        peersOf: function (dataInput) {
            var inputContainer = dataInput.closest('[data-input-container]'),
                selectedTextInputIndex, textInputList;
            if (!inputContainer.length)
                inputContainer = $body;
            dataInput.data('active', true);
            textInputList = inputContainer.find('[data-input]:not([data-input="none"]):not([data-read-only])').filter(fnVisible).each(function (index) {
                var textInputContainer = $(this);
                if (textInputContainer.data('active')) {
                    selectedTextInputIndex = index;
                    textInputContainer.removeData('active');
                    return false;
                }
            });
            return {
                list: textInputList, index: selectedTextInputIndex
            };
        },
        eventToDirection: function (e) {
            var that = e.target,
                moveDir,
                keyCode = e.keyCode || e.which;

            function isForm() {
                return $(that).closest('[data-layout="form"]').length > 0;
            }

            // Tab
            if (keyCode === 9)
                moveDir = e.shiftKey ? 'left' : 'right';
            // Left
            if (keyCode === 37 && this.selectionStart === 0 && that.selectionEnd === 0 && !isForm())
                moveDir = 'left';

            // Right
            if (keyCode === 39 && that.value && that.selectionStart === that.value.length && !isForm())
                moveDir = 'right';
            // Up 
            if ((keyCode === 38 && !e.ctrlKey || keyCode === 13 && e.shiftKey) && (that.tagName !== 'TEXTAREA' || !that.selectionStart) && (that.tagName !== 'DIV' || $(that).is('.app-drop-box')))
                moveDir = 'up';
            // Down
            if (keyCode === 40 && !e.ctrlKey || keyCode === 13 && !e.shiftKey) {
                var isTextArea = that.tagName === 'TEXTAREA',
                    isInput = that.tagName === 'INPUT',
                    isRtf = isRtfEditor(that),
                    selectionStart = that.selectionStart,
                    value = that.value;
                if (!isRtf && (!(isInput || isTextArea) || isInput || (isTextArea && (keyCode === 40 && selectionStart === value.length || keyCode === 13 && selectionStart === 0 && that.selectionEnd === value.length))))
                    moveDir = 'down';
            }
            return moveDir;

        },
        //labelState: function (dataInput, focused) {
        //    if (!dataInput.is('[data-control]'))
        //        dataInput = dataInput.closest('[data-control]');
        //    var fieldName = dataInput.attr('data-field'),
        //        labelControl = dataInput.closest('[data-container]').find('[data-control="label"][data-field="' + fieldName + '"]');
        //    if (!isTouchPointer || dataInput.find('.app-data-input').length)
        //        labelControl.toggleClass('app-has-focus', focused != false);
        //},
        blur: function (dataInput) {
            if (dataInput)
                _input.move(dataInput, 'enter');
            else {
                var input = findInput();
                if (input.is('iframe')) {
                    windowAutoFocus(false);
                    rtf.toolbar('remove', input.closest('[data-input]'));
                    input.trigger('forceblur.app');
                    windowAutoFocus(true);
                }
                else
                    //input.blur();
                    activeElementOfDocument('blur'); // blur any static (blob, listbox, etc.) or active input element 
            }
        },
        move: function (fromDataInput, direction, keyCode, containerType, testOnly) {
            _input._refocus(false);
            if (!fromDataInput.is('[data-input]'))
                fromDataInput = dataInputOf(fromDataInput);

            var textInput = findInput(fromDataInput),
                isForm = fromDataInput.closest('[data-layout="form"]').length > 0,
                toDataInput = typeof direction == 'string' ? null : direction,
                nextDataInputList,
                inputMoveEvent = $.Event('datainputmove.app', { fromDataInput: fromDataInput, textInput: textInput, direction: direction, keyCode: keyCode, containerType: containerType });


            function focusNextInput(toDataInput) {
                if (!_input.valid()) {
                    activeElementOfDocument('blur');
                    return;
                }
                var input = $(toDataInput),
                    inputType = input.attr('data-input'),
                    inputMethod = _input.methods[inputType];//,
                //hotSpot = input.find('[data-input-hotspot]');
                if (inputMethod && inputMethod.focus)
                    //if (hotSpot.length)
                    //    inputMethod.focus(hotSpot, fromDataInput);
                    //else
                    if (input.is(fromDataInput) && textInput.length) {
                        textInput.trigger('blur');
                        focusLastInput();
                    }
                    else
                        inputMethod.focus(input, fromDataInput);
                else if (inputType === 'dataview')
                    inputFocus({ fieldName: input.data('field') });
            }

            hideTooltip();

            if (direction)
                fromDataInput.trigger(inputMoveEvent);
            if (inputMoveEvent.isDefaultPrevented())
                return;

            // locate position of input in the current container
            if (!toDataInput && direction) {
                if (isForm) {
                    if (direction === 'down')
                        direction = 'right';
                    if (direction === 'up')
                        direction = 'left';
                }

                var peers = _input.peersOf(fromDataInput),
                    dataContainer = fromDataInput.closest('[data-container]'),
                    hasDataColumns = dataContainer.attr('data-columns'),
                    dataColumns = parseInt(hasDataColumns),
                    fromDataInputColumnIndex, peerDataContainer;

                if (dataColumns > 1) {
                    nextDataInputList = _input.inputsOf(dataContainer, true);
                    fromDataInputColumnIndex = nextDataInputList.indexOf(fromDataInput[0]);
                }

                // select another input according to user choice
                if (direction === 'left') {

                    if (hasDataColumns) {
                        // move in a multi-column row set
                        peerDataContainer = dataContainer.prev();
                        if (peerDataContainer.is('[data-container="row"][data-columns]')) {
                            while (!toDataInput && peerDataContainer.length) {
                                nextDataInputList = _input.inputsOf(peerDataContainer, true);
                                toDataInput = nextDataInputList[fromDataInputColumnIndex];
                                peerDataContainer = peerDataContainer.prev();
                            }
                        }
                        while (!toDataInput && fromDataInputColumnIndex) {
                            peerDataContainer = dataContainer.nextAll('[data-container="row"][data-columns]').last();
                            while (!toDataInput && peerDataContainer.length) {
                                nextDataInputList = _input.inputsOf(peerDataContainer, true);
                                toDataInput = nextDataInputList[fromDataInputColumnIndex - 1];
                                peerDataContainer = peerDataContainer.prev();
                            }
                            fromDataInputColumnIndex--;
                        }
                    }
                    else if (!toDataInput && peers.index)
                        // move to the previous input
                        toDataInput = peers.list[peers.index - 1];
                    if (!toDataInput && keyCode === 9) {
                        // move to the last input of previous container

                        nextDataInputList = _input.find(fromDataInput, 'up');
                        if (nextDataInputList && nextDataInputList.length)
                            toDataInput = nextDataInputList[nextDataInputList.length - 1];
                    }
                }
                else if (direction === 'right') {
                    if (hasDataColumns) {
                        // move in a multi-column row set
                        peerDataContainer = dataContainer.next();
                        if (peerDataContainer.is('[data-container="row"][data-columns]')) {
                            //nextDataInputList = _input.inputsOf(peerDataContainer, true);
                            //if (nextDataInputList.length) {
                            while (!toDataInput && peerDataContainer.length) {
                                nextDataInputList = _input.inputsOf(peerDataContainer, true);
                                toDataInput = nextDataInputList[fromDataInputColumnIndex];
                                peerDataContainer = peerDataContainer.next();
                            }
                        }
                        while (!toDataInput && fromDataInputColumnIndex < dataColumns - 1) {
                            peerDataContainer = dataContainer.prevAll('[data-container="row"][data-columns]').last();
                            while (!toDataInput && peerDataContainer.length) {
                                nextDataInputList = _input.inputsOf(peerDataContainer, true);
                                if (nextDataInputList.length)
                                    toDataInput = nextDataInputList[fromDataInputColumnIndex + 1];
                                peerDataContainer = peerDataContainer.next();
                            }
                            fromDataInputColumnIndex++
                        }
                    }
                    else if (!toDataInput && peers.index < peers.list.length - 1)
                        // move to the next input
                        toDataInput = peers.list.get(peers.index + 1);
                    if (!toDataInput && keyCode === 9) {
                        // move the the first input of the next  container
                        nextDataInputList = _input.find(fromDataInput, 'down');
                        if (nextDataInputList && nextDataInputList.length)
                            toDataInput = nextDataInputList[0];
                    }
                }
                else if (direction === 'up' || direction === 'down') {
                    // move to the input with the same index in the previous container
                    nextDataInputList = _input.find(fromDataInput, direction);
                    if (nextDataInputList)
                        toDataInput = nextDataInputList[nextDataInputList.length > peers.index ? peers.index : nextDataInputList.length - 1];
                }
                if (isForm && !toDataInput)
                    toDataInput = fromDataInput;

            }

            var containerSelector = '[data-container="' + containerType + '"]',
                containerTypeIsString = typeof containerType == 'string',
                sameContainer = containerTypeIsString && textInput.closest(containerSelector).first().is($(toDataInput).closest(containerSelector).first()),
                autoFocus, nextContainer;
            if (!containerTypeIsString || sameContainer) {
                if (toDataInput && !sameContainer && direction === 'right') {
                    nextContainer = $(toDataInput).closest('[data-container]').first();
                    autoFocus = nextContainer.find('[data-control][data-focus]').filter(fnVisible);
                    if (autoFocus.length && !fromDataInput.closest('[data-container]').first().is(nextContainer))
                        toDataInput = autoFocus.first();
                }

                if (toDataInput)
                    if (testOnly)
                        return toDataInput;
                    else
                        focusNextInput(toDataInput);
            }
        },
        find: function (inputContainer, dir) {
            var inputContainerList,
                selectedInputContainerIndex,
                result;
            if (!inputContainer.is('[data-input-container]'))
                inputContainer = inputContainer.closest('[data-input-container]');
            inputContainerList = inputContainer.data('active', true).parent().find('[data-input-container]');
            $(inputContainerList).each(function (index) {
                var c = $(this);
                if (c.data('active')) {
                    selectedInputContainerIndex = index;
                    c.removeData('active');
                    return false;
                }
            });
            if (dir === 'up')
                result = !selectedInputContainerIndex ? null : $(inputContainerList.get(selectedInputContainerIndex - 1));
            else
                result = selectedInputContainerIndex < inputContainerList.length - 1 ? $(inputContainerList.get(selectedInputContainerIndex + 1)) : null;
            return result ? result.find('[data-input]:not([data-input="none"])') : null;
        },
        popup: function () {
            var that = this,
                popup = that._popup;
            if (arguments.length === 1) {
                if (arguments[0] === 'hide')
                    $(popup).hide();
                else
                    return $(popup).is(arguments[0]);
            }
            else {
                if (!popup) {
                    popup = that._popup = $div('app-data-input-popup app-has-scrollbars').hide().appendTo($body);
                    var ul = $ul().appendTo(popup);
                    //if (scrollbarInfo.width)
                    //    ul.appendTo($('<div></div>').appendTo(popup));
                    popup.data('ul', ul);
                }
                return popup;
            }
        },
        render: function (options) {
            var container = options.container,
                inner = options.inner,
                dataView = options && options.dataView || findDataView(container.closest('[data-input-container]').attr('data-input-container')),
                field = options.field,
                row = options.row,
                editing = options.editing,
                placeholder,
                inputType, oldInputType, newInputType,
                inputMethod;
            if (dataView && !field) {
                if (container.is('[data-layout]') && !container.data('prepared'))
                    return;
                editing = editing != null ? editing : dataView.extension().editing();
                container.attr('data-state', editing ? 'write' : 'read');
                if (editing && showInputLinesInForms(dataView))
                    container.addClass('app-form-lines-horiz-none');

                if (!row)
                    row = dataView.commandRow();
                if (editing) {
                    container.find('[data-control="field"]').each(function () {
                        var c = $(this),
                            node = c.data('node'),
                            fieldName, field;
                        if (node.ready) {
                            fieldName = c.attr('data-field');
                            field = dataView.findField(fieldName);
                            if (field && field.Type != 'DataView')
                                _input.render({ container: c, dataView: dataView, field: field, editing: editing, row: row });
                        }
                    });
                }
                else {
                    // undo "write" mode of input
                    container.find('[data-control="field"]').removeAttr('data-input');
                }
                //if (isLayout)
                //    container.removeClass('app-dirty');
            }
            else {
                var editable,
                    node = container.data('node');
                if (!node || !node.ready)
                    return;
                if (!container.is(':visible')) {
                    node.dirty = true;
                    return;
                }
                if (field) {
                    editable = editing && container.attr('data-read-only') != 'true' && !field.isReadOnly() && !field._inputReadOnly;
                    var customInputType = field.is('input-type');
                    if (customInputType)
                        inputType = customInputType;
                    else
                        inputType = (field.ItemsStyle || (field.OnDemand ? 'blob' : 'text')).toLowerCase();
                    oldInputType = container.attr('data-input');
                    newInputType = editable ? inputType : 'none';
                    container.attr('data-input', newInputType);
                    if (oldInputType && oldInputType != newInputType) {
                        if (!inner)
                            inner = container.find('.app-control-inner');
                        inner.prevAll().remove();
                        inner.nextAll().remove();
                        inner.empty();
                    }
                    //if (editing && !editable && !container.attr('title'))
                    //    container.attr('title', field.HeaderText);
                    placeholder = container.attr('data-placeholder');
                    if (placeholder)
                        field.Watermark = placeholder == '$label' ? field.HeaderText : placeholder;
                }
                else {
                    // init data input properies here
                }
                inputMethod = _input.methods[inputType];
                if (inputMethod) {
                    if (!inner)
                        inner = container.find('.app-control-inner');
                    if (inner.length)
                        inner.addClass('app-field-data');
                    else
                        inner = container;
                    inputMethod.render({
                        container: container, inner: inner, dataView: dataView, field: field, row: row, editing: editable//, fit: options.fit
                    });
                }
            }

        },
        createContainer: function (dataInput) {
            var contents = dataInput.children(),
                textContainer = $span('app-data-input-container').appendTo(dataInput);
            contents.each(function () {
                var child = this;
                if (!child.className.match(/\b(app-control-(helper|toolbar|frame))\b/))
                    child.style.visibility = 'hidden';
            });
            this.fitContainer(dataInput, textContainer);
            return textContainer;
        },
        fitContainer: function (dataInput, textContainer, value) {
            // create an input container trailer with data input requires auto-sizing to make auto-expansion of data input more natural when typing
            var button = dataInput.find('.app-data-input-button'),
                hasHelper = dataInput.is('.app-has-helper'),
                autoSizing = dataInput.attr('data-size') === 'auto' || button.length,
                input, inner, innerText, innerHasTrailer, anchor, textContainerOffset,
                restoreText,
                y;
            if (!textContainer)
                textContainer = dataInput.find('.app-data-input-container');
            if (hasHelper) {
                anchor = dataInput.find('.app-control-inner');
                if (anchor.length)
                    textContainer.css({
                        left: anchor.offset().left - dataInput.offset().left,
                        top: anchor.offset().top - dataInput.offset().top
                    });
            }
            if (textContainer) {
                if (autoSizing && !textContainer.is('.app-data-input'))
                    textContainer = dataInput.find('.app-data-input');
                if (textContainer && textContainer.is('.app-data-input')) {
                    input = textContainer;
                    textContainer = input.closest('.app-data-input-container');
                    if (autoSizing) {
                        if (arguments.length < 3)
                            value = input.val();
                        inner = dataInput.find('.app-control-inner');
                        y = inner.offset().top;
                        innerText = inner.text();
                        if (innerText !== value)
                            if (value.length && innerText.length <= value.length + 2) {
                                restoreText = input.data('restoreText');
                                if (!restoreText)
                                    input.data('restoreText', innerText);
                                inner.addClass('app-control-inner-trailer').text(value);
                            }
                        textContainer.width('');
                        if (y !== inner.offset().top)
                            syncEmbeddedViews();
                    }
                }
            }
            // move the button when needded
            var hasInputHelper = dataInput.is('.app-has-helper'),
                inputHeight;
            if (button.length) {
                if (!inner)
                    inner = dataInput.find('.app-control-inner');
                inputHeight = getBoundingClientRect(inner.length ? inner : dataInput).height;
                button.css('visibility', '');
                textContainer.css({
                    height: inputHeight,
                    width: hasInputHelper ? inner.outerWidth() : Math.ceil(button.position().left) - parseCss(textContainer, 'padding-left') * 2 + 3
                });
                if (hasHelper && anchor.length && textContainer.length) {
                    var textContainerTop = textContainer.offset().top;
                    // text container may need to be re-adjusted if button has shifted to the new position
                    textContainer.css({
                        left: anchor.offset().left - dataInput.offset().left,
                        top: anchor.offset().top - dataInput.offset().top
                    });
                    // if the text input has shifted then move the open popup to the new position
                    textContainerOffset = textContainer.offset();
                    if (textContainerTop !== textContainerOffset.top && _input.popup(':visible'))
                        _input.popup().css({
                            left: textContainerOffset.left,
                            top: button.is('.app-caret-u') ? textContainerOffset.top - _input.popup().outerHeight() : textContainerOffset.top + textContainer.outerHeight()
                        });
                }
            }
        },
        execute: function (options) {
            if (!findActivePage().is(':visible')) {
                setTimeout(inputExecute, 50, options);
                return;
            }
            if (Array.isArray(options) || !options.values)
                options = { values: options };
            var dataView = options.dataView,
                values = options.values,
                //basketFields,
                originalValueCount,
                populateDynamicLookups = options.populateDynamicLookups,
                skipPopulateField = options.skipPopulateField,
                skipDrawingInput = options.skipDrawingInput,
                container,
                contextDependencyMap = {},
                causesCalculate,
                evalArgs,
                broadcastValues, dataViewValues,
                row, focusedFieldName,
                autofill, canAutoFill,
                persistVars, persistFunc;

            if (!Array.isArray(values)) {
                if (('name' in values || 'field' in values) && 'value' in values)
                    values = [values];
                else {
                    var newValues = [];
                    for (var n in values)
                        newValues.push({ name: n, value: values[n] });
                    values = newValues;
                }
            }

            values.forEach(function (fv) {
                var field = fv.field;
                if (field != null)
                    fv.name = typeof field == 'string' ? field : field.Name;
            });

            originalValueCount = values.length;

            if (skipDrawingInput) {
                _input.drawing(skipDrawingInput, false);
                if (!skipPopulateField)
                    skipPopulateField = dataView.findField(skipDrawingInput.attr('data-field'));
            }
            if (skipPopulateField)
                skipPopulateField.skipPopulate = true;

            if (typeof dataView == 'string')
                dataView = findDataView(dataView);
            else if (!dataView)
                dataView = touch.pageInfo().dataView;
            dataView._ignoreUnsavedChanges = false;

            container = options.container || findActivePage('[data-input-container="' + dataView._id + '"]');

            row = dataView.editRow();

            // 9. detect Context Field dependencies and inject them into the values
            if (populateDynamicLookups !== false)
                values.forEach(function (fv) {
                    var field = dataView.findField(fv.name || fv.Name);
                    if (field)
                        dataView._enumerateContextFieldValues(field, values, contextDependencyMap, row);
                });

            // 1. copy values to the "edit" row
            if (populateDynamicLookups !== false)
                values.forEach(function (fv) {
                    var name = fv.name || fv.Name,
                        field = dataView.findField(name);
                    if (field) {
                        if (field.CausesCalculate && !causesCalculate)
                            causesCalculate = field;
                        row[field.Index] = fv.name ? fv.value : fv.NewValue;
                        //if (field.ItemsTargetController && field.ItemsDataController) {
                        //    if (!basketFields)
                        //        basketFields = [];
                        //    basketFields.push(field);
                        //}
                    }
                });
            //if (basketFields) {
            //    // verify bakset field items and request them from the server as needed
            //    var getItemsBatch = [];
            //    basketFields.forEach(function (field) {
            //        var found, 
            //            lov = field.DynamicItems || field.Items,
            //            valueList = _app.csv.toArray(row[field.Index]);
            //        lov.forEach(function (item) {
            //            var index = valueList.indexOf(item[0]);
            //            if (index != -1)
            //                valueList.splice(index, 1);
            //        });
            //        if (valueList.length) {
            //            getItemsBatch.push({
            //                controller: field.ItemsDataController, view: field.ItemsDataView,
            //                filter: [{ name: field.ItemsDataValueField, values: valueList }],
            //                fieldFilter: [field.ItemsDataValueField, field.ItemsDataTextField]
            //            });
            //        }
            //    });
            //}

            // 2. evaluate visibility and prepare a list of values that require redrawing
            if (populateDynamicLookups !== false) {
                evalArgs = { dataView: dataView, row: row, fields: [], container: container, resize: true };
                _input.evaluate(evalArgs);
                //if (evalArgs.visibilityChanged) {
                //    clearTimeout(_window._visibilityChangeTimeout);
                //    _window._visibilityChangeTimeout = setTimeout(function () {
                //        pageResized();
                //    }, 10);
                //}
            }
            if (evalArgs && evalArgs.fields.length) {
                broadcastValues = values.slice();
                broadcastValues.forEach(function (v) {
                    var f = dataView.findField(v.name || v.Name),
                        index = evalArgs.fields.indexOf(f);
                    if (index !== -1)
                        evalArgs.fields.splice(index, 1);

                });
                evalArgs.fields.forEach(function (f) {
                    broadcastValues.push({ name: f.Name });
                });
            }
            else
                broadcastValues = values;

            // 3. broadcast changes to the inputs in the layout
            broadcastValues.forEach(function (fv) {
                var name = fv.name || fv.Name,
                    field = dataView.findField(name),
                    editing = dataView.editing(),
                    controls = $(container).find('[data-control][data-field="' + name + '"]'),
                    persist;
                if (field) {
                    controls.each(function () {
                        var c = $(this),
                            type = c.attr('data-control'),
                            editable,
                            fieldName = field.Name,
                            tags = field.Tag,
                            autofillTest,
                            fieldDataView;

                        function syncFieldDataView() {
                            if (fieldDataView) {
                                gridStyleChanged(fieldDataView);
                                fieldDataView.sync();
                            }
                        }

                        if (type !== 'label') {
                            editable = editing && c.attr('data-read-only') !== 'true' && !field.isReadOnly();
                            if (field.Type === 'DataView') {
                                if (!dataViewValues)
                                    dataViewValues = [];
                                dataViewValues.push(fv);
                                fieldDataView = findDataView(field._dataViewId);
                                if (editable && fv.Modified) {
                                    var executeList = [],
                                        newValue = fv.NewValue;
                                    if (newValue === 'null') {
                                        if (fieldDataView._totalRowCount > 0)
                                            executeList.push(_app.execute({
                                                command: 'Delete', controller: fieldDataView._controller, view: fieldDataView._viewId,
                                                values: [{ field: fieldDataView._externalFilter[0].Name, value: fieldDataView._externalFilter[0].Value }]
                                            }));
                                    }
                                    else if (newValue != null && Array.isArray(newValue)) {
                                        newValue.forEach(function (r) {
                                            var args = { command: 'Insert', controller: fieldDataView._controller, view: fieldDataView._viewId, values: [] };
                                            for (var field in r)
                                                args.values.push({ field: field, newValue: r[field] });
                                            executeList.push(_app.execute(args));
                                        });
                                    }
                                    $.when.apply($, executeList).then(syncFieldDataView);
                                }
                                else
                                    syncFieldDataView();
                            }
                            else {
                                if (c.is('.app-has-focus') /*&& row[field.Index] != null*/) {
                                    var focusedInput = findInput();
                                    if (focusedInput.length) {
                                        focusedFieldName = fieldName;
                                        focusedInput.data('original', focusedInput.val());
                                        activeElementOfDocument('blur');
                                    }
                                }
                                if (!_input.drawing(c))
                                    _input.drawing(c, true);
                                else
                                    _input.render({ container: c, inner: c.find('.app-control-inner').removeData('last-smart-text'), dataView: dataView, field: field, row: row, editing: editable });
                                if (tags) {
                                    autofillTest = tags.match(autoFillRegex);
                                    if (autofillTest && options.autoFill !== false) {
                                        autofill = autofillConfig(dataView, autofillTest[1]);
                                        autofill[autofillTest[4]].changed = true;
                                    }
                                }
                            }
                        }
                    });
                    persist = field._persist;
                    if (persist) {
                        if (!persistVars) {
                            persistFunc = persist === 'user' ? userVariable : sessionVariable;
                            persistVars = persistFunc('persistVars') || {};
                        }
                        persistVars[name] = 'Name' in fv ? fv.Value : fv.value;
                    }
                }
            });
            if (persistVars)
                persistFunc('persistVars', persistVars);
            $document.trigger($.Event('datainputbroadcast.app', { dataView: dataView, values: broadcastValues }));

            if (dataViewValues)
                dataViewValues.forEach(function (fv) {
                    values.splice(values.indexOf(fv), 1);
                });

            // 4. Initiate Calculate event on the server for the first field that causes calculate
            if (causesCalculate && options.raiseCalculate !== false)
                dataView._raiseCalculate(causesCalculate, causesCalculate);

            // 5. Populate dynamic lookups
            if (populateDynamicLookups !== false && originalValueCount !== values.length)
                if (dataView._busy())
                    dataView._pendingPopulate = true;
                else
                    dataView._raisePopulateDynamicLookups();

            // 6. Reveal "clear all" button
            if (dataView._showClearAll) {
                dataView._showClearAll = false;
                container.find('.app-has-clear-all').addClass('app-form-clear-all-visible');
            }

            // 7. Sync echos
            syncEmbeddedViews(container.closest('.app-wrapper'), true);

            if (skipPopulateField)
                skipPopulateField.skipPopulate = false;
            if (dataView.tagged('modal-auto-grow'))
                resetPageHeight();

            // 8. perform autofill when all triggers were changed and reset them upon success
            if (autofill) {
                var autoFillResetData = { components: {}, _reset: true },
                    autoFillOptionalFieldCount = 0,
                    autoFillTriggerCleared;
                canAutoFill = true;
                for (var fname in autofill)
                    if (!fname.match(/^_/)) {
                        autoFillInfo = autofill[fname];
                        var v = row[autoFillInfo.index];
                        if (autoFillInfo.trigger) {
                            if (v == null || !v.length) {
                                canAutoFill = false;
                                broadcastValues.forEach(function (fv) {
                                    if (fv.name === autoFillInfo.field)
                                        autoFillTriggerCleared = true;
                                });
                            }
                        }
                        else
                            if (v == null)
                                broadcastValues.forEach(function (fv) {
                                    if (fv.name === autoFillInfo.field)
                                        canAutoFill = false;
                                });
                            else {
                                fname = fname.toLowerCase();
                                if (fname.match(/^component/i))
                                    autoFillResetData.components[fname.substring(9)] = null;
                                else
                                    autoFillResetData[fname] = null;
                                autoFillOptionalFieldCount++;
                            }
                        autoFillInfo.changed = false;
                    }
                if (autoFillTriggerCleared) {
                    autofill._canceled = false;
                    autofill._wasFilled = false;
                }
                if (autoFillOptionalFieldCount && !canAutoFill && autoFillTriggerCleared)
                    autofillPropogateInputValues({ config: autofill, dataView: dataView, data: autoFillResetData });
                if (canAutoFill)
                    autofillApplyBuiltIn(dataView, row, autofill, container);
            }

            // 9. refocus active field if needed
            if (focusedFieldName)
                _input._refocusTimeout = setTimeout(_input._refocus, 0, { field: focusedFieldName });
        },
        _refocus: function (options) {
            if (!options) {
                var refocusTimeout = _input._refocusTimeout;
                if (refocusTimeout) {
                    clearTimeout(refocusTimeout);
                    _input._refocusTimeout = null;
                }
            }
            else {
                var focusedControl = findActivePage('.app-has-focus:first');
                if (!focusedControl.length || focusedControl.attr('data-field') === options.field)
                    inputFocus(options);
            }
        },
        evaluate: function (options) {
            var dataView = options.dataView,
                row = options.row,
                scope = options.scope,
                fields = options.fields,
                inputContainer = options.container,
                blockVisibilityChanged,
                visibilityChanged = [],
                hiddenValues = [],
                styleExpressions = [],
                syncDataViewFields,
                hasStub, scrollable;

            $(dataView._expressions).each(function () {
                var exp = this,
                    expScope = exp.Scope,
                    f, result, changed,
                    visPrefix = '',
                    visContainers;
                if (exp.Type === 1)
                    if (expScope === 5 && (!scope || scope.readOnly)) {
                        // read-only
                        f = dataView.findField(exp.Target);
                        if (f) {
                            result = !!dataView._evaluateJavaScriptExpressions([exp], row, false);
                            changed = f._inputReadOnly !== result;
                            f._inputReadOnlyChanged = changed;
                            f._inputReadOnly = result;
                            if (changed && fields && fields.indexOf(f) === -1)
                                fields.push(f);
                        }
                    }
                    else if ((expScope === 3 || expScope === 2 || expScope === 7) && inputContainer && (!scope || scope.visibility)) {
                        // 3 - field visibility
                        // 2 - category visibility
                        // 7 - custom visibility of elements with "data-visible-when" attributes
                        // field visibility
                        result = !!dataView._evaluateJavaScriptExpressions([exp], row, false);
                        changed = exp._visChanged !== result;
                        exp._visChanged = result;
                        if (changed) {
                            if (!hasStub) {
                                scrollable = findScrollable(inputContainer);
                                touch.stub('put', scrollable);
                                hasStub = true;
                            }
                            options.visibilityChanged = true;
                            if (expScope === 3)
                                visPrefix = 'f:';
                            else if (expScope === 2) {
                                visPrefix = 'c:';
                                blockVisibilityChanged = true;
                            }
                            else if (expScope === 7)
                                visPrefix = 'v:';
                            visContainers = inputContainer.find('[data-visibility="' + visPrefix + exp.Target + '"]').css('display', result ? '' : 'none');
                            showHideSimpleContainersWithoutVisibleChildren(visContainers, result);
                            if (result)
                                $(visContainers).each(function () {
                                    var node = $(this).data('node');
                                    if (node)
                                        visibilityChanged.push(node);
                                });
                            else if (expScope === 3) {
                                var field = dataView.findField(exp.Target);
                                if (field && row[field.Index] != null && field.is('clear-on-hide')) {
                                    hiddenValues.push({ name: field.Name });
                                    if (field.Index !== field.AliasIndex)
                                        hiddenValues.push({ name: dataView._allFields[field.AliasIndex].Name });
                                }
                                else if (field._dataViewId) {
                                    syncDataViewFields = true;
                                    //mobile.pageInfo(field._dataViewId).echoChanged = true;
                                    dataViewEchoChanged(field._dataViewId);
                                }

                            }

                            // TODO: check if a tab needs to be hidden

                        }
                    }
                    else if (expScope === 1 && (!scope || scope.readOnly))
                        styleExpressions.push(exp);
            });
            if (styleExpressions.length && inputContainer)
                evaluateConditionalStyleExpressions(dataView, row, inputContainer, styleExpressions);
            if (!options.ignoreFormButtons && (dataView.isDynamicAction('Custom') || dataView.isDynamicAction('Form')))
                inputContainer.find('[data-action]').each(function () {
                    var control = $(this),
                        path = control.attr('data-action'),
                        action;
                    if (dataView.isDynamicAction(path)) {
                        action = dataView.findAction(path);
                        if (action) {
                            dataView._clonedRow = row;
                            control.toggleClass('app-disabled', !dataView._isActionAvailable(action));
                            dataView._clonedRow = null;
                        }
                    }
                });

            inputContainer.find('.app-data-list-actions').filter(fnVisible).each(function () {
                var dataInput = dataInputOf(this);
                _input.render({ container: dataInput, inner: dataInput.find('.app-control-inner'), dataView: dataView, field: _input.elementToField(dataInput), row: row, editing: dataView.editing() });
            });

            if (blockVisibilityChanged && dataView._isWizard)
                wizard('status');
            if (visibilityChanged.length) {
                var i = 0;
                while (i < visibilityChanged.length) {
                    var visibleNode = visibilityChanged[i];
                    if (!visibleNode.ready) {
                        var nodeWithoutLayout;
                        while (visibleNode && !visibleNode.ready) {
                            nodeWithoutLayout = visibleNode;
                            visibleNode = visibleNode.parent;
                        }
                        if (nodeWithoutLayout && visibilityChanged.indexOf(nodeWithoutLayout) === -1)
                            //visibilityChanged.splice(i, 1, visibleNode);
                            visibilityChanged.push(nodeWithoutLayout);
                    }
                    i++;
                }
                ensureLayoutControls({ controls: $(visibilityChanged) });
                syncDataViewFields = true;
            }
            if (blockVisibilityChanged)
                fitTabs();
            if (!options.ignoreDynamicButtons && dataView.isDynamicAction('Form')) {
                var buttons = inputContainer.closest('.ui-page').find('.app-bar-buttons'),
                    doRefreshFormButtons, doRefreshToolbarButtons,
                    buttonList = [], newButtonList = [], newIconList = [], context = [];
                if (buttons.length) {
                    buttons.first().find('.ui-btn').each(function () {
                        var actionPath = $(this).attr('data-action-path');
                        if (actionPath !== 'more')
                            buttonList.push(actionPath);
                    });
                }
                dataView._clonedRow = row;
                dataView.extension().context(context);
                $(context).each(function () {
                    var item = this;
                    if (item.uiScope === 'Form')
                        newButtonList.push(item.path);
                    if (item.icon)
                        newIconList.push(item.icon);
                });
                if (buttonList.length) {
                    // sorting will ensure that the list of buttons is consistent with the iOS / Android rendering and mouse GUI
                    if (buttonList.sort().join() !== newButtonList.sort().join()) {
                        doRefreshFormButtons = true;
                        doRefreshToolbarButtons = !getPageInfo(dataView).isModal;
                    }
                }
                else {
                    var hasVisibleButtons;
                    touch._toolbarButtons.each(function () {
                        var that = this,
                            path;
                        if (that.style.display !== 'none') {
                            hasVisibleButtons = true;
                            path = $(that).data('action-path');
                            if (path && newButtonList.indexOf(path) === -1) {
                                doRefreshToolbarButtons = true;
                                return false;
                            }
                        }
                    });
                    if (!hasVisibleButtons)
                        doRefreshToolbarButtons = true;
                }
                if (doRefreshFormButtons || doRefreshToolbarButtons) {
                    var refreshArgs = { buttonBars: buttons, layout: inputContainer, toolbar: doRefreshToolbarButtons, dataView: dataView };
                    if (lastTouchedLink && buttons.has(lastTouchedLink))
                        setTimeout(function () {
                            if (!isBusy())
                                touch.refreshAppButtons(context, refreshArgs);
                        }, 100);
                    else
                        touch.refreshAppButtons(context, refreshArgs);
                }
                dataView._clonedRow = null;
            }
            if (hiddenValues.length)
                inputExecute({ dataView: dataView, values: hiddenValues });

            if (options.visibilityChanged && options.resize) {
                clearTimeout(_window._visibilityChangeTimeout);
                _window._visibilityChangeTimeout = setTimeout(function () {
                    pageResized();
                }, 10);
            }
            else if (syncDataViewFields)
                syncEmbeddedViews();
            if (hasStub)
                touch.stub('trim', scrollable);
        },
        valid: function (value) {
            if (arguments.length)
                this._valid = value !== false;
            else
                return this._valid !== false;
        },
        cancel: function (validate) {
            _input._canceled = validate === false;
            deactivateTextInput();
            //hideTooltip();
            _input._canceled = false;
            return _input.valid();
        },
        triggerSetValue: function (element, value, originalValue) {
            this.valid(true);
            if (typeof value == 'string')
                value = value.trim();
            var setValueEvent = $.Event('setvalue.input.app', {
                inputValue: value, inputOriginalValue: originalValue, inputElement: element[0], inputValid: true, inputError: null
            });
            element.trigger(setValueEvent);
            setValueEvent.inputElement = null;
            this.valid(setValueEvent.inputValid);
            return setValueEvent;
        },
        drawing: function (dataInput, enable) {
            if (arguments.length === 1)
                return dataInput.data('redraw') !== false;
            if (enable)
                dataInput.removeData('redraw');
            else
                dataInput.data('redraw', false);
        },
        addCount: function (count, li) {
            var html = '';
            if (count != null) {
                //$('<span class="app-muted"/>').appendTo(li).text(count > 999 ? String.format('{0:N0}', count) : count);
                html = '<span class="app-muted">' + (count > 999 ? String.format('{0:N0}', count) : count) + '</span>';
                if (li)
                    $(html).appendTo(li);
            }
            return html;
        },
        editor: function (options) {
            var dataView = options.dataView,
                fieldName = options.fieldName,
                field, row,
                question, itemsStyle, list;
            if (typeof dataView == 'string')
                dataView = findDataView(dataView);
            else if (!dataView)
                dataView = touch.pageInfo().dataView;
            field = dataView.findField(fieldName);
            itemsStyle = field.ItemsStyle;
            question = { name: 'Field', required: !field.AllowNulls, columns: field.Columns, rows: field.Row, options: {} };
            options = question.options;
            if (itemsStyle) {
                list = [];
                var addGroupCount = field.is('lookup-distinct');
                $(field.DynamicItems || field.Items).each(function () {
                    var item = this,
                        newItem = { value: item[0], text: item[1] };
                    if (addGroupCount)
                        newItem.count = item[2];
                    list.push(newItem);
                });
                question.items = {
                    style: itemsStyle,
                    list: list
                };
                options.lookup = {
                    distinct: addGroupCount
                };
            }
            row = dataView.row();
            question.value = row[field.Index];

            function callback(e) {
                var editorDataView = e.rules.dataView(),
                    survey = editorDataView.survey(),
                    data = editorDataView.data(),
                    eventType = e.type;
                touch.pageInfo(editorDataView)._canceled = true;
                if (eventType === 'submit') {
                    pageTransitions(false);
                    $settings('ui.transitions.style', 'none');
                }
                whenPageShown(function () {
                    if (eventType === 'submit') {
                        inputExecute({ dataView: dataView, values: { name: fieldName, value: data.Field } });
                        pageTransitions(true);
                    }
                    if (!isTouchPointer)
                        inputFocus({ field: field });
                    if (e.type === 'submit') {
                        if (options.submit)
                            options.submit(e);
                    }
                    else if (options.cancel)
                        options.cancel(e);
                });
            }

            _app.survey({
                text: field.HeaderText,
                parent: dataView._id,
                controller: dataView._id + '-' + 'editor',
                context: {},
                questions: [question],
                layout: '<div data-layout="form" data-layout-size="tn"><div data-container="row"><span data-control="field" data-field="Field" data-size="fit"></span></div></div>',
                options: {
                    modal: {
                        fitContent: true,
                        always: true
                        //max: 'xs'
                    },
                    materialIcon: 'edit',
                    discardChangesPrompt: false,
                    contentStub: false
                },
                submitText: 'OK',
                submit: callback,
                cancel: callback
            });


            //_app.alert(field.Name, options.callback);
        },
        blurDataView: function (options) {
        },
        canFocus: function () {
            return !uiAutomation() && (!kiosk() || findActivePage().prevAll('.app-kiosk').length);
        },
        beforeFocus: function (target) {
            var dataView = activeDataView(),
                tooltipData,
                page;
            if (tooltip) {
                tooltipData = tooltip.data();
                if (tooltipData.message == null || !target.is('.app-field-' + tooltipData.fieldName))
                    tooltip.removeData().hide();
            }
            if (!dataView._inlineEditor) {
                page = findActivePage();
                if (page.data('moved'))
                    resetPageHeight();
                page.find('.app-focus[data-input="dataview"]').removeClass('app-focus');
                _edit.detach(true);
            }
        },
        visible: function (f) {
            var result = true;
            findActivePage('[data-layout][data-state="write"]').find('[data-field="' + f.Name + '"][data-control="field"]').closest('[data-visibility]').each(function () {
                if ($(this).css('display') === 'none') {
                    result = false;
                    return result;
                }
            });
            return result;
        },
        keyboard: function (options) {
            var now = timeNow(),
                created = now - (_input._created || 0),
                removed = now - (_input._removed || 0),
                nativeKeyboardRemovalSpeed = 350;

            if (options === 'detect') {
                if (created < 1000)
                    _input._vkbd = true;
                else if (removed < 1000)
                    _input._vkbd = false;
                //console.log('vkbd: ' + _input._vkbd);
            }
            else if (options === 'virtual')
                return !!_input._vkbd;
            else if (options === 'ensure') {
                if (findActivePage('[data-layout]').length)
                    _app.getScript('~/js/daf/touch-input', arguments[1] || nop);
            }
            else {
                // assume that options is the function
                if (isTouchPointer && removed < nativeKeyboardRemovalSpeed && _input._vkbd)
                    setTimeout(options, nativeKeyboardRemovalSpeed - removed);
                else {
                    _input._vkbd = false;
                    setTimeout(options, 0);
                }
            }
        },
        focus: function (options) {
            var result,
                optionsField;
            if (!isInTransition) {
                if (!options) options = {};
                optionsField = options.field;
                if (optionsField)
                    options.fieldName = typeof optionsField == 'string' ? optionsField : optionsField.Name;
                var container = $(options.container || findActivePage('[data-layout][data-state="write"]')),
                    lastFocused = options.lastFocused,
                    containerPage = container.closest('.ui-page'),
                    lastFocusedField = containerPage.data('last-focused-field'),
                    fieldName = lastFocused && lastFocusedField ? lastFocusedField : options.fieldName || container.find('[data-focus="true"]').data('field'),
                    query = fieldName ? '[data-field="' + fieldName + '"]' : '',
                    controls = container.find('[data-control]' + query + ':not([data-input="none"])'),
                    controlsWithFocus = controls.filter('.app-has-focus'),
                    message = options.message,
                    scrollIntoView = options.scrollIntoView;
                if (options.lastFocused && options.container)
                    containerPage.removeData('last-focused-field');
                if (lastFocused && lastFocused !== 'auto' && !fieldName)
                    return;
                if (containerPage.data('moved'))
                    resetPageHeight();
                if (controlsWithFocus.length)
                    controls = controlsWithFocus;
                controls.each(function () {
                    var dataInput = $(this),
                        offset = dataInput.offset(),
                        inputMethod = _input.methods[dataInput.data('input')],
                        textInput,
                        tab = dataInput.closest('[data-container="tab"]'),
                        belongsToTab = tab.length,
                        wizardStep = dataInput.closest('[data-container="wizard"]'),
                        inputIsDataView = dataInput.data('input') === 'dataview',
                        node = dataInput.data('node'),
                        nodeIsReady = node && node.ready,
                        tabIsNotActive = belongsToTab && !tab.is('.app-tab-active');

                    if (!inputMethod && belongsToTab && tabIsNotActive && fieldName) {
                        if (lastFocused === true)
                            return;
                        isInTransition = true;
                        tab.closest('[data-container="tabset"]').first().find('.app-tabs').first().find('.ui-btn').filter(function () {
                            return $(this).text() === tab.attr('data-tab-text');
                        }).trigger('vclick');
                        //setTimeout(function () {
                        isInTransition = false;
                        inputFocus(options);
                        //});
                        return;
                    }

                    if (
                        (inputIsDataView && (!dataInput.is('.app-focus') || uiAutomation() || lastFocused) || inputMethod && inputMethod.focus || !nodeIsReady && fieldName) &&
                        (query || !belongsToTab || tab.is('.app-tab-active')) &&
                        (!wizardStep.length || wizard('visible', { step: wizardStep, container: container })) &&
                        (!options.autoFocus || dataInput.data('auto-focus') !== false)
                    ) {
                        if (inputIsDataView) {
                            _input.blur();
                            if (!_input.valid())
                                return;
                        }

                        if (wizardStep.length) {
                            if (!wizardStep.is(':visible') && lastFocused === true)
                                return;
                            wizard('show', { step: wizardStep, container: container });
                        }
                        //if (wizardStep.length)
                        //    wizard('show', { step: wizardStep });

                        if (nodeIsReady || !tabIsNotActive)
                            dataInput.closest('[data-container="collapsible"].app-container-collapsed').find('[data-container="toggle"]').trigger('vclick');

                        stickyHeaderBar(container).hide();
                        if (inputIsDataView) {
                            var scrollable = findScrollable(),
                                echo, dataViewId,
                                dataItem;
                            if (!scrollable.is(activeElementOfDocument()) && _input.canFocus()) {
                                _input.blur();
                                focusScrollable(scrollable);
                            }
                            findFocusedSummaryView(scrollable).removeClass('app-focus');
                            if (fieldName) {
                                dataInput.addClass('app-focus');//.attr('tabIndex', 0);
                                //if (options.scrollIntoView !== false)
                                //    dataInput.focus();
                                echo = findEcho(dataInput).removeData('skip-item-focus');
                                dataViewId = echo.attr('data-for');
                                if (_edit._dataViewId !== dataViewId) {
                                    _edit.detach(true);
                                    _edit._dataViewId = findDataView(dataViewId).inlineEditing() ? dataViewId : null;
                                }
                                if (!lastFocused) {
                                    saveLastFocusedField(fieldName, findPage(scrollable));
                                    dataItem = echo.find('.dv-item .app-selected');
                                    if (scrollIntoView !== false)
                                        makeVisible(dataItem.length ? dataItem : dataInput, scrollable, null, null, .25);
                                    if (dataItem.length && dataItem.closest('.app-listview-inlineediting').length)
                                        _edit.sync({ elem: dataItem, scrollIntoView: scrollIntoView });
                                }
                            }
                        }
                        else {
                            touch.lastTouch(false);
                            var dataInputMoveEvent = $.Event('datainputmove.app', { direction: dataInput });
                            $document.trigger(dataInputMoveEvent);
                            touch.lastTouch(true);
                            if (_input.canFocus())
                                if (inputMethod)
                                    inputMethod.focus(dataInput);
                                else
                                    return;
                        }
                        result = true;
                        if (message) {
                            _input.popup('hide');
                            var field = _input.elementToField(dataInput),
                                button;
                            if (field.ItemsStyle === 'Lookup') {
                                button = _input.elementToButton(dataInput);
                                button.addClass('app-caret-r');
                                button.removeClass('app-caret-u app-caret-d');
                            }

                            textInput = dataInput.find('.app-data-input,.app-data-list,.app-drop-box');
                            if (textInput.is('.app-drop-box'))
                                textInput = textInput.prev();
                            if (textInput.length) {
                                offset = textInput.offset();
                                setTimeout(function () {
                                    showTooltip(offset.left + 1, offset.top + dataInput.outerHeight(), message, null, true);
                                    tooltip.data({ fieldName: fieldName, message: message });
                                }, 32); // this delay ensures that tooltip will display "after" any "immediate" timeout fired with "0" delay and will not be hidden
                            }
                        }
                        var inputBuffer = _input._buffer;//,
                        //closeImmediately = inputBuffer === 'Del' || inputBuffer === 'Delete';
                        _input._buffer = null;
                        if (inputBuffer === 'Backspace'/* || closeImmediately*/) {
                            var dv = activeDataView();
                            if (dv && dv._inlineEditor)
                                setTimeout(function () {
                                    _input.clearValue(dataInput.attr('data-field'));
                                });
                            //dv.session('targetDataView', { id: dv._parentDataViewId, elem: dataInput });
                            else
                                _input.clearValue(dataInput.attr('data-field'));
                        }
                        //if (closeImmediately)
                        //    setTimeout(function () {
                        //        $('.app-data-input').trigger($.Event('keydown', { which: 13, ctrlKey: true }));
                        //    });
                        return false;
                    }
                });
            }
            return result;
        },
        focusCopyMaster: function (field) {
            var altField,
                copyRegex = new RegExp('\\b' + field.Name + '\\s*=\\s*.+\\b');
            $(field._dataView._fields).each(function () {
                var f = this,
                    copy = f.Copy;
                if (copy && copyRegex.exec(copy)) {
                    altField = f.Name;
                    return false;
                }
            });
            if (altField)
                inputFocus({ fieldName: altField });

        },
        canCreateItems: function (field, row) {
            if (!row)
                row = field._dataView.editRow();
            var result = !!field.ItemsNewDataView,
                contextFields = field.ContextFields,
                parentField,
                mappingInfo;
            if (result && contextFields) {
                while (mappingInfo = _app._fieldMapRegex.exec(contextFields)) {
                    parentField = field._dataView.findField(mappingInfo[2]);
                    if (parentField && row[parentField.Index] == null)
                        result = false;
                }
            }
            return result;
        },
        barcode: function (selector) {
            var argList = arguments,
                queue = barcode.queue,
                i;
            if (argList.length) {
                selector = argList[0];
                if (typeof selector == 'boolean')
                    barcode.ready = selector;
                else if (selector === ':input')
                    return barcode.input;
                else if (selector === ':always')
                    if (argList.length === 2)
                        barcode.always = !!argList[1];
                    else
                        return barcode.always;
                else if (selector === ':peek')
                    return queue.length ? queue[0] : null;
                else {
                    for (i = 0; i < argList.length; i++)
                        barcode.queue.push(argList[i]);
                    if (!barcode.active)
                        barcodeProcess();
                }
            }
            return queue;
        },
        slider: function (method, options) {
            var container = options.container,
                slider,
                value,
                text,
                format,
                data,
                trackPos;
            if (!container) {
                container = options;
                options = {};
            }
            slider = container.closest('.app-input-slider');
            if (slider.length)
                container = options.container = slider.parent();
            options.container = container;
            slider = container.find('.app-input-slider');
            if (method === 'text') {
                value = slider.data('value');
                format = slider.data('format');
                return format ? String.formatLocale(format, value) : value.toString();
            }
            else if (method === 'tooltip') {
                text = _input.slider('text', container);
                touch.tooltip({
                    text: text,
                    elem: container.find('.app-input-slider-value').attr('data-title', text),
                    autoHide: options.autoHide
                });
            }
            else if (method === 'value') {
                data = slider.data();
                var sliderTrack = slider.find('.app-input-slider-track'),
                    sliderTrackRect,
                    at = options.at;
                if (at) {
                    sliderTrackRect = getBoundingClientRect(sliderTrack);
                    if (at.x < sliderTrackRect.left)
                        at.x = sliderTrackRect.left;
                    if (at.x > sliderTrackRect.right)
                        at.x = sliderTrackRect.right;
                    trackPos = at.x - sliderTrackRect.left;
                    if (trackPos < 0)
                        trackPos = 0;
                    options.value = (data.max - data.min) * trackPos / sliderTrackRect.width + data.min;
                }
                data.value = Math.round(options.value);
                if (options.feedback !== false) {
                    trackPos = (data.value - data.min) / (data.max - data.min) * 100 + '%';
                    slider.find('.app-input-slider-track-value').width(trackPos);
                    slider.find('.app-input-slider-value').css('left', trackPos);
                    slider.find('.app-input-slider-halo').css('left', trackPos)
                }
                hideTooltip();
                if (!options.autoHide || at && _app.intersect(at, slider.find('.app-input-slider-value')))
                    _input.slider('tooltip', { container: container, autoHide: options.autoHide });
                if (data.event)
                    $document.trigger($.Event(data.event, { value: data.value, slider: slider }));
            }
            else if (method === 'create') {
                if (options.value) {
                    container.find('.app-input-slider').remove();
                    slider = $div('app-input-slider', 'data-draggable="inputslider"').appendTo(container);
                    var sliderTrack = $div('app-input-slider-track').appendTo(slider),
                        sliderTrackValue = $div('app-input-slider-track-value').appendTo(slider),
                        sliderValue = $span('app-input-slider-value', 'data-tooltip-location="above"').appendTo(slider),
                        sliderHalo = $span('app-input-slider-halo').appendTo(slider),
                        min = options.min,
                        max = options.max;

                    if (value == null)
                        value = 0;
                    if (min == null)
                        min = 0;
                    if (max == null)
                        max = 100;

                    value = options.value;
                    slider.data({ value: value, format: options.format, min: min, max: max, event: options.event });

                    trackPos = (value - min) / (max - min) * 100 + '%';
                    sliderTrackValue.width(trackPos);
                    sliderHalo.css('left', trackPos);
                    sliderValue.css('left', trackPos).attr('data-title', _input.slider('text', container));

                    // TODO 1: create track stops

                    // TODO 2: setup min and max values / icons

                    //if (options.showMinMax) {
                    //    sliderMin = $span('app-input-slider-min').appendTo(slider);
                    //    sliderMax = $span('app-input-slider-max').appendTo(slider);
                    //}
                    return slider;
                }
            }
            else // $app.inpput.slider('get', container);
                return slider.data().value;
        }
    };

    inputExecute = _input.execute;
    inputFocus = _input.focus;

    function scrollTextInputIntoView(scrollable) {
        var dataInput = findInput(scrollable);
        if (dataInput.length) {
            var dataInputOffset = dataInput.offset(),
                dataInputHeight = dataInput.outerHeight(),
                scrollableOffset = scrollable.offset(),
                scrollableHeight = scrollable.height(),
                scrollableScrollTop = scrollable.scrollTop();
            if (scrollableOffset.top + scrollableHeight < dataInputOffset.top)
                scrollable.scrollTop(dataInputOffset.top + scrollableScrollTop - scrollableHeight - (dataInputHeight > scrollableHeight ? 0 : dataInputHeight));
            else if (scrollableOffset.top > dataInputOffset.top)
                scrollable.scrollTop(dataInputOffset.top + scrollableScrollTop - scrollableOffset.top);
        }
    }

    function deactivateTextInput() {
        findInput().removeData('keepFocus').trigger('blur');
    }

    function findInput(container) {
        return container ? $(container).find('.app-data-input') : $('.app-data-input');
    }

    function borrowDataInputStyle(dataInput) {
        var borrowed = 0,
            inputStyle = dataInput[0].style,
            style = {};
        dataInputStylesToBorrow.forEach(function (st) {
            var v = inputStyle[st.name],
                ignoreSelector = st.ignore;
            if (!ignoreSelector || !dataInput.is(ignoreSelector)) {
                borrowed++;
                style[st.name] = v;
            }
        });
        return borrowed ? style : null;
    }

    function toStyleAttribute(options) {
        var s = [], k, v;
        for (k in options) {
            v = options[k] || '';
            if (v.length)
                s.push(k.replace(/([A-Z])/g, '-$1').toLowerCase() + ':' + v);
        }
        s = s.join(';');
        return s.length ? ('style="' + s + '"') : null;
    }


    function activateTextInput(target) {
        //if (skipClickAfterDrop)
        //    return false;
        var dataInput,
            //contents = dataInput.contents(),
            //inputHeight = dataInput.outerHeight(),
            textInput, placeholder, text, inputContainer,
            dataType,
            inputEvent,
            beforeFocusEvent, afterFocusEvent,
            activeTextInput;
        if (!_input.valid()) return false;
        _input.blur();
        activeTextInput = findInput();// $('.app-data-input');
        dataInput = dataInputOf(target);// target.closest('[data-input]');
        if (activeTextInput.length) {
            dataInput.data('hitTest', true);
            if (!dataInputOf(activeTextInput)/* activeTextInput.closest('[data-input]')*/.data('hitTest'))
                activeTextInput = null;
            dataInput.removeData('hitTest');
            //if (activeTextInput)
            //    return;
            //else
            //    deactivateTextInput();
            deactivateTextInput();
        }
        //if (dataInput.find('[data-input-hotspot]').length && !target.is('[data-input-hotspot]'))
        //    return false;

        inputEvent = $.Event('getvalue.input.app'/*, { inputValue: null, inputElement: textInput }*/);
        dataInput.trigger(inputEvent);
        inputEvent.type = 'showvalue';
        inputEvent.dataType = dataInput.attr('data-type');
        dataInput.trigger(inputEvent);
        if (inputEvent.isDefaultPrevented())
            return true;
        else if (iOS)
            _input._vkbd = true; // iOS does not trigger the resize of the page - the native keyboard will be activated
        dataType = inputEvent.dataType;
        var inputRows = inputEvent.inputRows,
            isRtf = inputEvent.rtf,
            spellCheck = inputEvent.spellCheck === false ? 'false' : '',
            inputStyle;
        if (isRtf) {
            //textInput = $('<div class="app-data-input" contenteditable="true"></div>');
            textInput = $htmlTag('iframe', 'app-data-input');
            inputRows = inputRows || 1;
        }
        else {
            textInput = inputRows ? $htmlTag('textarea', 'app-data-input app-has-scrollbars').attr('rows', parseInt(inputRows) + 1) : $htmlTag('input', 'app-data-input').attr('type', inputEvent.inputIsPassword ? 'password' : 'text');
            inputStyle = borrowDataInputStyle(dataInput);
            if (inputStyle)
                textInput.css(inputStyle);
        }
        if (!isTouchPointer && !inputRows && spellCheck !== 'false')
            //spellCheck = 'true';
            textInput.attr('spellcheck', 'true');

        inputContainer = _input.createContainer(hasFocus(dataInput));
        if (!isRtf)
            textInput.appendTo(inputContainer);
        if (inputRows) {
            inputContainer.addClass('app-has-textarea');
            if (isRtf)
                inputContainer.addClass('app-has-rtf');
        }
        //getValueEvent.inputElement = null;
        if (!isRtf)
            textInput.attr('name', dataInput.data('field'));

        if (inputEvent.inputMaxLength)
            textInput.attr('maxlength', inputEvent.inputMaxLength);

        text = inputEvent.inputAltValue || inputEvent.inputValue || '';
        if (text == null) {
            text = inputEvent.inputAltValue;
            if (text == null)
                text = inputEvent.inputValue;
            if (text == null)
                text = '';
        }

        var originalText = text,
            inputBuffer = _input._buffer,
            inputEnhancementAttributes = { autocapitalize: 'off', autocorrect: 'off', autofill: 'off', autocomplete: 'off' };
        if (inputBuffer != null)
            text = inputBuffer.match(/Backspace|Del|Delete/) ? '' : inputBuffer;

        textInput.val(text).data('original', originalText);
        if (dataInput.data('original') == null)
            dataInput.data('original', originalText);

        if (isRtf) {
            // setting up the source code of iframe
            var rtfDoc = [],
                iframe = textInput[0];

            textInput.appendTo(inputContainer);

            textInput.on('load', function () {
                rtf.handlers(textInput, true);
            });

            // create an HTML document for RTF editor
            rtfDoc.push('<html><head><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/><meta charset="utf-8">');
            rtfDoc.push('<style>b,strong{font-weight:600}body{white-space:pre-line;margin:0;padding:0;overflow:hidden;font-size:' + textInput.css('font-size'));
            rtfDoc.push(';color:' + textInput.css('color'));
            rtfDoc.push(';font-family:' + $body.css('font-family'));
            rtfDoc.push(';}</style></head><body contenteditable="true">');
            rtfDoc.push(text);
            rtfDoc.push('</body></html>');
            iframe.contentWindow.document.open();
            iframe.contentWindow.document.write(rtfDoc.join(''));
            iframe.contentWindow.document.close();
        }
        if (inputEvent.placeholder) {
            if (isRtf || inputRows) {
                placeholder = $span('app-data-input-placeholder').insertAfter(textInput).text(inputEvent.placeholder).css('display', text ? 'none' : '');
                textInput.data('placeholder', placeholder);
            }
            else
                textInput.attr('placeholder', inputEvent.placeholder);
        }
        if (inputEvent.change) {
            textInput.data({
                change: inputEvent.change, last: text
            });
            inputEvent.change = null;
            inputEnhancementAttributes.autocomplete = 'off';
            spellCheck = 'false';
        }
        if (!isNullOrEmpty(spellCheck))
            inputEnhancementAttributes.spellcheck = spellCheck;
        if (!isRtf)
            textInput.attr(inputEnhancementAttributes);

        //dataType = dataInput.attr('data-type');
        if (!dataType) {
            switch (inputEvent.inputDataType) {
                case 'DateTime':
                    dataType = 'datetime';
                    break;
                case 'Date':
                    dataType = 'date';
                    break;
            }
            dataInput.attr('data-type', dataType);
        }

        var inner = dataInput.find('.app-control-inner');
        switch (dataType) {
            case 'datetime':
                if (inner.attr('data-smart-value'))
                    inner.data('last-smart-text', inner.text()).text(textInput.val());
                break;
            default:
                if (dataType && isTouchPointer && !touch.pointer('pen')) {
                    textInput.attr('type', dataType);
                    if (dataType === 'number'/* && !iOS*/) {
                        text = inputEvent.inputValueRaw;
                        if (text != null) {
                            textInput.val(JSON.stringify(text));
                            text = text.toString();
                        }
                    }
                }
                break;
        }

        beforeFocusEvent = $.Event('beforefocus.input.app', {
            inputElement: textInput
        });
        //beforeFocusEvent.input = textInput;
        dataInput.trigger(beforeFocusEvent);
        beforeFocusEvent.inputElement = null;
        if (beforeFocusEvent.isDefaultPrevented())
            return false;

        try {
            var range, /*rangeRect, */textInputOffset, inputElement,
                x = lastTouchX(), y = lastTouchY();
            if (isRtf) {

                textInputOffset = textInput.offset();
                if (textInputOffset.left <= x && x <= textInputOffset.left + textInput.outerWidth() && textInputOffset.top <= y && y < textInputOffset.top + textInput.outerHeight()) {
                    range = rtf.range('select', { x: x - textInputOffset.left, y: y - textInputOffset.top });
                    //if (range)
                    //    range.select();
                }
            }
            if (!range) {
                if (isRtf) {
                    //if (range)
                    //    range.select();
                    //else
                    //    rtf.document('focus');
                    rtf.document('focus');
                    rtf.range('save');
                    rtf.focus();
                }
                else {
                    inputElement = textInput.focus()[0];
                    if (inputElement.setSelectionRange) {
                        var testText = originalText || inputEvent.placeholder;
                        if (testText != null && testText.length && dataInput.attr('data-auto-expand') === 'true' && !isTouchPointer) {
                            var testPlaceholder = (_input._testPlaceholder || $span('app-data-input-placeholder').css('font-style', 'normal')).text(testText).insertAfter(textInput),
                                inputBounds = getBoundingClientRect(inputElement),
                                newInputWidth = testPlaceholder[0].scrollWidth + parseCss(inputContainer, 'padding-left') * 2;
                            _input._testPlaceholder = testPlaceholder;
                            if (newInputWidth > inputBounds.width)
                                _edit.expandBy(textInput, newInputWidth - inputBounds.width);
                            testPlaceholder.detach();
                        }
                        if (inputBuffer == null && inputRows && inputElement.scrollHeight > inputElement.clientHeight) {
                            inputElement.scrollTop = 0;
                            inputElement.setSelectionRange(0, 0);
                        }
                        else
                            inputElement.setSelectionRange(
                                inputBuffer != null ||
                                    //dataInput.attr('data-select-on-focus') === 'false' ||
                                    //isTouchPointer && $settings('ui.input.focus.select.whenTouch') !== true ||
                                    //!isTouchPointer && !$settingsEnabled('ui.input.focus.select.whenMouse') ||
                                    setCaretAtEndOnSelect(dataInput) ||
                                    inputEvent.selectOnFocus === false ? text.length : 0, text.length);
                        if (inputBuffer && text.length)
                            dataInput.data('autoOpen', true);
                    }
                }
            }
            else
                rtf.document('focus');
            _input._created = timeNow();
            _input._removed = 0;
            afterFocusEvent = $.Event('afterfocus.input.app', {
                inputElement: textInput
            });
            //beforeFocusEvent.input = textInput;
            dataInput.trigger(afterFocusEvent);
            afterFocusEvent.inputElement = null;
        } catch (ex) {
            // do nothing
        }
        return true;
    }

    function setCaretAtEndOnSelect(dataInput) {
        return dataInput.attr('data-select-on-focus') === 'false' ||
            isTouchPointer && $settings('ui.input.focus.select.whenTouch') !== true ||
            !isTouchPointer && !$settingsEnabled('ui.input.focus.select.whenMouse');
    }

    function barcodeContextItem(dataView, contextItems) {
        if ($settings('barcodeReader.enabled') !== false && (!dataView || !dataView.tagged('internal-form-scanner')) && !appStudio()) {
            //list.push({
            //    text: 'Scan',
            //    system: true,
            //    icon: 'material-icon-qr_code_scanner',
            //    //rotate: 270,
            //    toolbar: true,
            //    //transition: true,
            //    callback: /*hostBarcode ||*/ nop//barcodeContextItemExecuteScan//codeContextItemOptions
            //}/*,
            //    { system: true, callback: barcodeExecuteEmulator, shortcut: 'Ctrl+Shift+B', contextMenu: false }*/
            //);
            var menuOption = barcodeContextItem._option,
                insertIndex = 0;
            if (!menuOption)
                menuOption = barcodeContextItem._option = { text: resourcesMobile.Scan, icon: $settings('barcodeReader.icon') || 'material-icon-barcode-reader', _toolbar: !!$settings('barcodeReader.promote'), system: true, callback: showScannerForm };
            while (insertIndex < contextItems.length && (!contextItems[insertIndex].text || contextItems[insertIndex].system))
                insertIndex++;
            menuOption.toolbar = menuOption._toolbar && (!dataView || dataView._controller !== 'MyProfile');
            contextItems.splice(insertIndex, 0, menuOption, {});
        }
    }

    function showScannerForm() {
        _app.getScript('~/js/daf/input-scanner').then(function () {
            _app.input.methods.scanner._showForm();
        });
        return false;

    }

    //function barcodeContextItemOptions(contextData, link) {
    //    if (link) {
    //        var context = [{ text: resourcesMobile.Back, icon: iconBack, callback: backToContextPanel }],
    //            dataView = activeDataView();
    //        context.push(
    //            {},
    //            {
    //                text: 'Scan',
    //                desc: 'Use camera to scan barcodes and QR codes',
    //                icon: 'material-icon-line_weight',
    //                rotate: 270,
    //                callback: barcodeContextItemExecuteScan
    //            },
    //            {},
    //            {
    //                text: 'Calibrate', icon: false,
    //                callback: barcodeContextItemExecuteCalibrate
    //            }
    //        );
    //        if (!dataView || !dataView._controller.match(/tools_barcode_emulator|_confirm/))
    //            context.push({
    //                text: 'Emulator', icon: false,
    //                shortcut: 'Ctrl+Shift+B',
    //                callback: barcodeExecuteEmulator
    //            });

    //        showContextPanel(context, '#app-panel-scan-options');
    //    }
    //    else
    //        barcodeContextItemExecuteScan();
    //}

    //function barcodeContextItemExecuteScan() {
    //    mobile.notify('Point camera to scan barcode or QR code.');
    //}

    //function barcodeFinishCalibration() {
    //    $document.off('vclick', '.app-progress-screen', barcodeFinishCalibration);
    //    mobile.progress('hide');
    //    var calibratedSpeed = barcode.calibrated;
    //    if (calibratedSpeed) {
    //        mobile.notify('Scanner Speed: ' + calibratedSpeed);
    //        if (isTouchPointer)
    //            barcode.slowInputSpeed = Math.max(calibratedSpeed, 100);
    //        else
    //            barcode.inputSpeed = Math.max(calibratedSpeed, 30);
    //        userVariable('scannerSpeed' + isTouchPointer ? 'Touch' : '', calibratedSpeed);
    //    }
    //    focusLastInput();
    //}

    //function barcodeContextItemExecuteCalibrate(text) {
    //    var instruction = 'Please scan at least 3 times to improve accuracy.',
    //        content = 'Scanner Calibration';
    //    if (text != null)
    //        content = text;
    //    else
    //        barcode.clbCnt = 0; // the count of calibration scans.
    //    mobile.progress('show', {
    //        text: instruction,
    //        content: '<div style="font-size:2em;text-align:center;padding:2em 0 0 0">' + content + '</div>' + '<i class="material-icon" style="font-size:144px;line-height:144px;left:50%;margin-left:-72px;opacity:.75;top:75%;margin-top:-72px;position:absolute;transform:rotate(270deg)">line_weight</i>'
    //    });
    //    if (!text)
    //        $document.on('vclick', '.app-progress-screen', barcodeFinishCalibration);

    //    if (text != null && barcode.clbCnt++ > 3) {
    //        if (barcode.calibrating) {
    //            barcode.calibrating = false;
    //            setTimeout(barcodeFinishCalibration, 2000);
    //        }
    //    }
    //    else
    //        barcode.calibrating = true;
    //}

    //function barcodeExecuteEmulator() {
    //    var dataView = activeDataView();
    //    if (!dataView || !dataView._controller.match(/tools_barcode_emulator|_confirm/))
    //        _app.survey({ controller: 'tools/barcode.emulator' });
    //}

    //function barcodeRemoveScannedFlagFromInput(input) {
    //    input.removeData('barcode');
    //}

    function barcodeInputMode(/*input*/) {
        return barcode.input && new Date().getTime() - barcode.time <= (isTouchPointer ? barcode.slowInputSpeed : barcode.inputSpeed);// || input && input.data('barcode') != null;
    }

    function barcodeProcess(text/*, lastFocusedField*/) {
        var hasArguments = arguments.length,
            tryNext,
            barcodeEvent,
            queue = barcode.queue,
            barcodeBeforeEvent;
        if (hasArguments) {
            if (text.match(barcode.ignore)) {
                touch.notify(text);
                return;
            }
            barcodeBeforeEvent = $.Event('barcodebefore.app', { text: text });
            $document.trigger(barcodeBeforeEvent);
            if (barcodeBeforeEvent.isDefaultPrevented()) {
                if (barcode.ready)
                    tryNext = true;
                else
                    return;
            }
            else
                queue.push(barcodeBeforeEvent.text);
        }

        if (hasArguments || !barcode.ready || touch.busy() || tryNext) {
            clearTimeout(barcode.timeout);
            barcode.timeout = setTimeout(barcodeProcess, barcode.frequency);
        }
        else if (queue.length) {
            //var dataView = activeDataView();
            text = queue.shift();
            barcodeEvent = $.Event('barcode.app', { text: text/*, dataView: dataView*/ });
            barcode.ready = false;
            try {
                $document.trigger(barcodeEvent);
                if (!barcodeEvent.isDefaultPrevented()) {
                    barcode.ready = true;
                    touch.notify(text);
                }
            }
            catch (ex) {
                // ignore any exceptions
                barcode.ready = true;
            }
            if (queue.length)
                barcodeProcess();
        }
    }

    function barcodeResetMonitor() {
        if (barcode.enabled) {
            barcode.keysDown = {};
            barcode.keyMap = [];
        }
    }

    function barcodeStopWaiting() {
        if (barcode.input && !barcode.buffer.length) {
            barcode.input = false;
            barcode.waiting = null;
        }
    }

    function barcodeKeyupMonitor(e) {
        var key = e.key,
            keyMap = barcode.keyMap,
            keyIndex;
        if (barcode.enabled) {
            keyIndex = keyMap.indexOf(key);
            barcode.keysDown[key] = false;
            if (keyIndex >= 0)
                keyMap.splice(keyIndex);
        }
    }

    function barcodeKeydownMonitor(e) {

        var time, inputSpeed,
            input, text, original,
            key = e.key,
            isInput = !barcode.input && activeElementOfDocument().is(':input'),
            rapidInputSpeed = barcode.input || isTouchPointer || !isInput ? barcode.slowInputSpeed : barcode.inputSpeed,
            keyBuffer = barcode.buffer,
            enter, enterIndex,
            keyBufferIndex,
            keyMap = barcode.keyMap,
            keysDown = barcode.keysDown,
            endOfInput;

        if (!barcode.enabled || barcode.always && key !== 'Enter' && handleKeyboardShortcuts(e, false, false))
            return;
        enter = barcode.enter;
        enterIndex = enter.length - 1;

        if (keyMap.indexOf(key) === -1)
            keyMap.push(key);
        keysDown[key] = true;

        if (!barcode.override && isInput)
            return;

        time = new Date().getTime();
        inputSpeed = time - barcode.time;


        if (!barcode.waiting && !barcode.always && inputSpeed > rapidInputSpeed) {
            keyBuffer.splice(0);
            barcode.input = false;
        }
        else if (keyMap.length === 1 && keyBuffer.length && !keysDown[keyBuffer[keyBuffer.length - 1]]) {
            barcode.input = true;
            _input._buffer = null;
            input = activeElementOfDocument();
            if (isInput && input.is('.app-data-input')) {
                _input.methods.lookup._preventList();
                original = input.data('original');
                input.val(original == null ? '' : original).trigger('blur');
            }
        }
        barcode.time = time;
        if (barcode.input) {
            if (enter[enterIndex--] === key) {
                keyBufferIndex = keyBuffer.length - 1;
                while (enterIndex >= 0 && keyBufferIndex >= 0 && keyBuffer[keyBufferIndex--] === enter[enterIndex])
                    enterIndex--;
                endOfInput = enterIndex === -1;
            }
            if (endOfInput) {
                clearTimeout(barcode.waiting);
                barcode.waiting = setTimeout(barcodeStopWaiting, barcode.inventorySpeed);
                text = keyBuffer.join('');
                barcodeResetMonitor();
                keyBuffer.splice(0);
                barcodeProcess(text);
                return false;
            }
        }
        if (key != null && key.length === 1 && !(e.ctrlKey || e.altKey || e.metaKey)) // ignore "Space", "Backspace", "F1", etc - key may be "null"
            if (!kiosk() || barcode.always)
                keyBuffer.push(key);

        if (barcode.input || barcode.always && key != null && key.length === 1)
            return false;
    }

    $document.on('keydown', barcodeKeydownMonitor).on('keyup', barcodeKeyupMonitor).on('getvalue.input.app', function (e) {
        var field = _input.eventToField(e),
            inputMethod = _input.eventToMethod(e),
            aliasField, dataView, item,
            v, row;
        if (field) {
            dataView = field._dataView;
            aliasField = dataView._allFields[field.AliasIndex];
            if (field.Index !== aliasField.AliasIndex && !field.ItemsStyle)
                aliasField = field;
            row = dataView.editRow();
            v = row[field.Index];
            if (field.ItemsTargetController)
                v = null;
            else if (field.ItemsStyle && field.ItemsStyle !== 'Lookup' && field.ItemsStyle !== 'AutoComplete') {
                item = dataView._findItemByValue(field, v);
                if (item && (v != null || !field.tagged('lookup-null-value-none') && field.AllowNulls && item[1] != nullValueInForms))
                    v = item[1];
            }
            e.inputValue = v != null ? field.format(v) : '';
            e.inputValueRaw = v;
            e.inputDataType = field.Type;
            e.inputFormat = field.DataFormatString;
            if (aliasField.Len)
                e.inputMaxLength = aliasField.Len;
            if (field.Index !== aliasField.Index) {
                v = row[aliasField.Index];
                e.inputAltValue = v != null ? aliasField.format(v) : '';
            }
            if (!field.ItemsStyle) {
                e.inputRows = field.Rows;
                if (field.TextMode === 2)
                    e.rtf = true;
            }
            e.inputIsPassword = field.TextMode === 1;
            e.placeholder = _input.fieldToPlaceholder(field);

            if (inputMethod && inputMethod.setup)
                inputMethod.setup(e);
            if (field.is('spell-check-none'))
                e.spellCheck = false;
            if (field.is('select-on-focus-none'))
                e.selectOnFocus = false;

        }
    }).on('setvalue.input.app', function (e) {
        var field = _input.eventToField(e),
            dataView,
            v = e.inputValue,
            dataFormatString,
            vObj, row, error;
        if (field && (!(field.isReadOnly() || field.ItemsStyle || field.OnDemand) || field.is('lookup-accept-any-value') && !field.ItemsTargetController)) {
            dataView = field._dataView;
            row = dataView.editRow();
            if (row) {
                // perform validation
                if (String.isBlank(v))
                    /*
                    if (!field.AllowNulls && !field.HasDefaultValue)
                        error = labelValidatorRequired;
                    else
                        v = null;
                    */
                    v = null;
                else {
                    vObj = {
                        NewValue: v
                    };
                    error = dataView._validateFieldValueFormat(field, vObj, true);
                    if (!error) {
                        v = vObj.NewValue;
                        // additional conversion of user input
                        // 1. processing of "p" format string(percent)
                        dataFormatString = field.DataFormatString;
                        if (dataFormatString && dataFormatString.match(/:p/))
                            v = v / 100;
                    }

                }
                if (error) {
                    e.inputError = error;
                    e.inputValid = false;
                }
                else {
                    if (field.Index !== field.AliasIndex)
                        field.AliasIndex = field.Index;
                    inputExecute({ dataView: dataView, values: { field: field, value: v } });
                }
            }
        }
    }).on('vclick', '[data-control="action"]', function (e) {
        var target = $(e.target),
            dataControl = target.closest('[data-control]'),
            dataInputContainer = dataControl.closest('[data-input-container]'),
            dataView = findDataView(dataInputContainer.attr('data-input-container')),
            a;
        if (dataView) {
            hideTooltip();
            a = dataView.findAction(dataControl.attr('data-action'));
            if (a && dataView._isActionAvailable(a))
                callWithFeedback(target.closest('.app-action-column-button'), function () {
                    var extension = dataView.extension();
                    extension.command(extension.commandRow(), a.CommandName, a.CommandArgument, a.CausesValidation, a.Path);
                });
            return false;
        }
    }).on('vclick', '[data-control="label"]', function () {
        var target = $(this),
            inputContainer = target.closest('[data-input-container]'),
            dataView = findDataView(inputContainer.attr('data-input-container')),
            fieldName = target.attr('data-field'),
            prevControl, nextControl,
            foundSelf,
            inputType, inputMethod,
            field,
            isDblClick;
        if (dataView) {
            field = dataView.findField(fieldName);
            if (field) {
                isDblClick = touch.dblClick(target);
                if (isTouchPointer || !htmlSelection() || isDblClick) {
                    target.data('active', true);
                    inputContainer.find('[data-control]').each(function () {
                        var c = $(this),
                            controlType = c.attr('data-control'),
                            controlFieldName = c.attr('data-field');
                        if (controlType === 'label') {
                            if (c.data('active'))
                                foundSelf = true;
                        }
                        else if (controlFieldName === fieldName) {
                            if (!foundSelf)
                                prevControl = c;
                            else if (nextControl)
                                return false;
                            else
                                nextControl = c;
                        }
                    });
                    target.removeData('active');
                    if (!nextControl)
                        nextControl = prevControl;
                    if (!nextControl.filter(fnVisible).length) {
                        var following = nextControl.nextAll('[data-input]').filter(fnVisible).first();
                        if (following.length)
                            nextControl = following;
                        else
                            nextControl = nextControl.prevAll('[data-input]').filter(fnVisible).first();
                    }
                    if (nextControl && nextControl.length) {
                        inputType = nextControl.attr('data-input');
                        inputMethod = _input.methods[inputType];
                        if (inputMethod) {
                            var dataInputLabelEvent = $.Event('datainputlabel.app', { dataView: dataView, dataInput: target, dblClick: isDblClick });
                            target.trigger(dataInputLabelEvent);
                            if (!dataInputLabelEvent.isDefaultPrevented())
                                if (inputMethod.focus)
                                    inputMethod.focus(nextControl, target);
                                else
                                    _input.focusCopyMaster(field);
                        }
                    }
                    if (isDblClick) {
                        if (field.ItemsStyle === 'DropDownList')
                            findInput().trigger($.Event('keydown', { keyCode: 40, ctrlKey: true }));
                        target.trigger($.Event('vdblclick'));
                    }
                }
            }
        }
        return false;
    }).on('vclick mousedown touchend', '[data-input]', function (e) {
        if (!_input.valid())
            return;
        var target = $(e.target),
            eventType = e.type;
        if (!target.closest('.app-data-input-button').length) {
            if (eventType === 'mousedown' && e.which !== 3)
                return;
            if (findInput(this).length && !target.closest('.app-control-helper').length)
                return;
        }
        // user has clicked on tapped on the arrow|chevron button
        if (skipTap || target.is('.app-text-action')) return;
        var inputMethod = _input.eventToMethod(e);
        if (inputMethod) {
            if (inputMethod.click)
                inputMethod.click(e);
            if (e.isDefaultPrevented())
                return false;
            if (inputMethod.focus && eventType !== 'touchend') {
                if (inputMethod.focus(target)) {
                    if (e.cancelable)
                        e.preventDefault();
                    if (eventType === 'mousedown')
                        $(this).find('.app-data-input-placeholder').css('display', 'none');
                }
            }
            else if (eventType === 'vclick' && (isTouchPointer || !htmlSelection())) {
                var field = _input.eventToField(e);
                if (field && !inputFocus({ fieldName: field.Name })) {
                    _input.focusCopyMaster(field);
                    return false;
                }
            }
        }
    }).on('blur forceblur.app', '.app-data-input', function (e) {
        var textInput = $(e.target),
            inputMethod = _input.eventToMethod(e),
            dataInput = dataInputOf(textInput),// textInput.closest('[data-input]'),
            originalValue = textInput.data('original'),
            value = textInputToValue(textInput),// textInput.is('div') ? textInput.html() : textInput.val().trim(),
            container = textInput.parent(),
            parent = container.parent(),
            relatedTarget = $(e.relatedTarget),
            setValueEvent;

        function focusTextInput(message, callback) {
            clearTimeout(_window._focusTextInputTimeout);
            clearTimeout(_window._focusTooltipTimeout);
            _window._focusTextInputTimeout = setTimeout(function () {
                textInput.trigger('focus');
                if (message) {
                    textInput.attr('title', message);
                    _window._focusTooltipTimeout = setTimeout(function () {
                        showTooltip(textInput.offset().left + 1, textInput.offset().top + textInput.outerHeight() + 1, message, null, true);
                    }, 120);
                }
                if (callback)
                    callback(dataInput);
            }, 10);
        }

        function removeTextInput(callback) {
            _input.valid(true);

            var removeInputEvent = $.Event('remove.input.app', {
                input: textInput
            });
            if (container.is('.app-has-rtf'))
                rtf.handlers(textInput, false);
            textInput.trigger(removeInputEvent);
            if (textInput.attr('title'))
                hideTooltip();

            dataInput.find('.app-data-input-focus').remove();
            if (!dataInput.find('.app-control-helper .app-focus').length)
                hasFocus(dataInput, false);
            parent.contents().css('visibility', '');
            var inner = dataInput.find('.app-control-inner').removeClass('app-control-inner-trailer'),
                smartText = inner.data('last-smart-text');
            if (smartText) {
                if (!dataInput.is('.app-null'))
                    inner.text(smartText);
                inner.removeData('last-smart-text');
            }
            //textInput.remove();
            //container.hide();
            //if (textInput.is(':password'))
            //    textInput.attr('readonly', 'true');
            _input._lastScreenHeight = _screen.height;
            container.remove().empty();
            _input._lastInputBeforeScroll = null;
            _input._removed = timeNow();
            _input._created = 0;
            if (callback)
                callback(dataInput);
        }

        function relatedTargetIs(selector) {
            var result;
            selector = selector.split(/,/);
            if (selector.length === 1)
                result = relatedTarget.closest(selector[0]).is(textInput.closest(selector[0]));
            else
                $(selector).each(function () {
                    result = relatedTargetIs(this);
                    if (result)
                        return false;
                });
            return result;
        }

        if (_input._canceled) {
            clearTimeout(_window._focusTextInputTimeout);
            removeTextInput();
            return;
        }

        if (relatedTargetIs('.app-data-input-popup,.app-data-input-helper,.app-data-input-button')/*relatedTarget.closest('.app-data-input-popup,.app-data-input-helper,.app-data-input-button').length*/) {
            return false;
        }

        //if (relatedTargetIs('.app-has-rtf')) {
        //    return false;
        //}

        if (textInput.data('keepFocus')) {
            textInput.removeData('keepFocus');
            return false;
        }

        if (inputMethod && inputMethod.blur)
            inputMethod.blur(e);

        if (e.isDefaultPrevented())
            return;

        //if (relatedTargetIs('.app-data-input-popup,.app-data-input-button')/*relatedTarget.closest('.app-data-input-popup,.app-data-input-button').length*/) {
        //    focusTextInput();
        //    return false;
        //}

        if (relatedTargetIs('.app-data-input-container,.app-data-input-placeholder')/*relatedTarget.closest('.app-data-input-container,.app-data-input-placeholder').length*/) {
            e.preventDefault();
            focusTextInput();
        }
        else if (value === originalValue)
            removeTextInput();
        else {
            setValueEvent = _input.triggerSetValue(textInput, value, originalValue);
            _input._refocus(false);
            if (setValueEvent.inputValid)
                removeTextInput(setValueEvent.inputValidCallback);
            else if (_input.ignoreErrors)
                removeTextInput();
            else {
                e.preventDefault();
                focusTextInput(setValueEvent.inputError, setValueEvent.inputErrorCallback);
            }
        }
    }).on('keydown', '.app-data-input,.app-drop-box', function (e) {
        userActivity();
        var that = this,
            inputValue = that.value,
            inputIsBlank,
            ctrlKey = e.ctrlKey || e.metaKey,
            altKey = e.altKey,
            shiftKey = e.shiftKey,
            keyCode = e.keyCode || e.which,
            text, changed,
            textInput = $(that),
            dataInput = dataInputOf(textInput),// textInput.closest('[data-input]'),
            inputMethod,
            isForm = textInput.closest('[data-layout="form"]').length > 0,
            moveDir, popup,
            changeCallback,
            isRtf = isRtfEditor(that),
            field,
            selectedItem, allItems, currentItem;

        if (barcodeInputMode(/*textInput*/))
            return;

        if (handleKeyboardShortcuts(e, false, false))
            return false;

        if (inputValue == null)
            inputValue = '';
        inputIsBlank = !inputValue.length;

        // handle value navigation for Basket lookups
        if (!ctrlKey && (keyCode === 38 || keyCode === 8 || keyCode === 37)) {
            var inputHelper = dataInputOf(that, '.app-control-before'),//$(that).closest('[data-input]').find('.app-control-before'),
                listItems = inputHelper.find('li'),
                focusedListItem = inputHelper.find('.app-focus'),
                focusedOffset;
            if (listItems.length && !focusedListItem.length && inputIsBlank && !_input.popup(':visible')) {
                // focus on the last list item
                focusedListItem = listItems.last();
                // locate the left-most item in the same row
                if (keyCode === 38 || keyCode === 37) {
                    focusedOffset = focusedListItem.offset();
                    if ($(that).offset().top > inputHelper.offset().top + inputHelper.outerHeight())
                        listItems.each(function () {
                            var li = $(this),
                                offset = li.offset();
                            if (offset.top === focusedOffset.top) {
                                focusedListItem = li;
                                return false;
                            }
                        });
                }
                focusedListItem.addClass('app-focus');
                setTimeout(function () {
                    hasFocus(inputHelper).trigger('focus');
                    scrollIntoView(focusedListItem);
                });
                return false;
            }
        }

        if (keyCode === 27) {
            if (_input.popup(':visible')) {
                lookupHidePopup();
                return false;
            }
            if (!textInput.is('.app-data-input')) {
                textInput.trigger('blur');
                focusScrollable();
                return false;
            }
            changeCallback = textInput.data('change');
            text = textInput.data('original');
            changed = textInputToValue(textInput) !== text;
            //if (!changed) {
            //    text = dataInput.data('original');
            //    changed = textInputToValue(textInput) !== text;
            //}
            if (!changed) {
                var modalPage = dataInput.closest('.app-page-modal');
                if (modalPage.length && !_input.popup(':visible'))
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
            if (text != null)
                dataInput.find('.app-data-input-placeholder').hide();
            if (changeCallback) {
                textInput.val(text);
                //if (!text)
                //    dataInput.data('autoComplete', false);
                _input.fitContainer(dataInput);
                setTimeout(function () {
                    _input.move(dataInput, _input.popup(':visible') ? dataInput.data('autoComplete', false) : null);
                    inputFocus({ fieldName: dataInput.data('field') });
                    if (text && text.length)
                        $('.app-data-input').trigger('select').trigger($.Event('keydown', { which: 40, altKey: true }));
                });
            }
            else {
                var cancelInputEvent = $.Event('cancel.input.app', {
                    inputElement: textInput
                });
                dataInput.trigger(cancelInputEvent);
                cancelInputEvent.inputElement = null;
                if (!cancelInputEvent.isDefaultPrevented()) {
                    if (textInput.is('iframe'))
                        rtf.document('blur');
                    else if (changed) {
                        hideTooltip();
                        textInput.val(text).trigger('select');
                        _input.triggerSetValue(textInput, text, text);
                    }
                    else {
                        _input.blur(dataInput);
                        focusScrollable();
                    }
                }
            }
            return false;
        }

        // Enter or Tab may autocomplete or execute a command in the list
        if ((keyCode === 13 && !altKey || keyCode === 9) && _input.popup(':visible')) {
            selectedItem = _input.popup().find('.app-selected');
            field = _input.elementToField(textInput);
            if (!selectedItem.length) {
                var textInputVal = textInput.val();
                if (keyCode === 13 && (field.AllowAutoComplete !== false && canCreateNewItem(field) && textInputVal.length /*(textInput.data('original') || !textInputValIsBlank)*/)) {
                    _input.methods.lookup._createItemFromText(field, dataInputOf(textInput)/*.closest('[data-input]')*/, textInputVal);
                    return false;
                }
            }
            else {
                if (keyCode === 9 && field.ItemsTargetController)
                    keyCode = 13;
                if (!selectedItem.is('[data-command]') || keyCode === 13) {
                    selectedItem.trigger('vclick', { feedback: false });
                    if (keyCode === 13)
                        return false;
                }
            }
        }

        // Alt+Enter or ">" - click the button
        if (keyCode === 13 && altKey || keyCode === 39 && that.selectionStart === that.selectionEnd && (inputIsBlank || inputValue.length === that.selectionEnd)) {
            var button = _input.eventToButton(e);
            if (button.length && _input.elementToField(button).ItemsStyle === 'Lookup' && button.is(':visible')) {
                inputMethod = _input.eventToMethod(e);
                if (inputMethod && inputMethod.clickButton) {
                    if (_input.popup(':visible'))
                        _input.popup().find('[data-command="SeeAll"].app-selected').trigger('vclick');
                    else {
                        e.stopPropagation();
                        e.preventDefault();
                        inputMethod.clickButton(e);
                    }
                    return false;
                }
            }
        }

        // Ctrl+Enter
        if (ctrlKey && keyCode === 13/* && !$(that).closest('.app-page-inlineeditor').length*/) {
            setTimeout(postAndFocusLastInput);
            return false;
        }

        // Ctrl+Down|Up|Left|Right - datetime field value editing
        if (ctrlKey && !shiftKey && keyCode >= 37 && keyCode <= 40 || keyCode === 32) {
            field = _input.eventToField(e);
            if (field.Type.match(/^Date/)) {
                var validationError,
                    newDateValue,
                    vObj = {
                        NewValue: inputValue
                    },
                    isSpaceKey = keyCode < 37, // == 32
                    weekDelta = touch.calendar(':visible') ? 7 : 1,
                    deltaDays = keyCode === 38 ? -weekDelta : keyCode === 40 ? weekDelta : keyCode === 37 ? -1 : 1,
                    dateTextIsSelected = !that.selectionStart && that.selectionEnd === inputValue.length;
                if (!isSpaceKey || (inputIsBlank || dateTextIsSelected)) {
                    if (inputIsBlank)
                        newDateValue = new Date();
                    else if (dateTextIsSelected) {
                        if (isSpaceKey)
                            newDateValue = '';
                        else {
                            validationError = field._dataView._validateFieldValueFormat(field, vObj, true);
                            if (!validationError) {
                                newDateValue = vObj.NewValue;
                                newDateValue.setDate(newDateValue.getDate() + deltaDays);
                            }
                        }
                    }
                    else
                        activeElementOfDocument('select');

                    if (newDateValue !== null) {
                        setTimeout(function () {
                            touch.calendar('keepOpen');
                            inputExecute({ field: field, value: newDateValue });
                        });
                    }
                    return false;
                }
            }
        }

        if (!altKey && (keyCode === 38 || keyCode === 40)) {
            field = _input.eventToField(e);
            var lov = field.DynamicItems || field.Items,
                valueIndex = -1, itemValue;
            if (field.ItemsStyle === 'DropDownList' && !_input.popup(':visible') && !field.ItemsTargetController) {
                if (field.is('lookup-auto-advance') || field.is('lookup-open-on-tap') && !ctrlKey)
                    _input.eventToMethod(e).clickButton(e);
                else {
                    $(lov).each(function (index) {
                        if (this[1] === inputValue) {
                            valueIndex = index;
                            return false;
                        }
                    });
                    if (valueIndex !== -1) {
                        if (keyCode === 38 && valueIndex > (!field.AllowNulls && lov[0][0] == null ? 1 : 0))
                            valueIndex--;
                        if (keyCode === 40)
                            if (valueIndex < lov.length - 1)
                                valueIndex++;
                            else if (ctrlKey)
                                valueIndex = 0;
                    }
                    else {
                        valueIndex = 0;
                        if (!inputIsBlank && keyCode === 40 && lov.length && lov[0][0] == null)
                            valueIndex++;
                    }
                    itemValue = lov[valueIndex];
                    if (itemValue) {
                        $(that).data('last', itemValue[1]);
                        //setTimeout(function () {
                        //    _input.methods.lookup._useItemValue(field, itemValue, true);
                        //});
                        setTimeout(_input.methods.lookup._useItemValue, 0, field, itemValue, true);
                    }
                }
                //e.preventDefault();
                return false;
            }
            else if (dataInput.data('notify')) {
                var list = dataInput.closest('[data-container]').next('[data-container]').find('li[data-text]');
                selectedItem = list.filter(function () { return $(this).is('.app-selected'); }).removeClass('app-selected');
                if (list.length) {
                    if (selectedItem.length)
                        selectedItem = keyCode === 40 ? selectedItem.next('[data-text]') : selectedItem.prev('[data-text]');
                    else
                        selectedItem = $(list[keyCode === 40 ? 0 : list.length - 1]);
                    selectedItem.addClass('app-selected');
                    //e.preventDefault();
                    return false;
                }
            }
        }

        moveDir = _input.eventToDirection(e);

        if (keyCode === 32 && !(ctrlKey || shiftKey || altKey) && !isRtf && !inputValue.trim().length)
            return false;

        // Alt+Down, Ctrl+Space
        if (keyCode === 40 && altKey || keyCode === 32 && ctrlKey) {
            changeCallback = textInput.data('change');
            if (changeCallback) {
                if (!_input.popup(':visible')) {
                    e.stopPropagation();
                    e.preventDefault();
                    setTimeout(changeCallback, 0, { input: textInput, value: textInput.val(), lastValue: textInput.data('last'), force: true });
                    //setTimeout(function () {
                    //    changeCallback({
                    //        input: textInput, value: textInput.val(), lastValue: textInput.data('last')
                    //    });
                    //});
                }
                return false;
            }
            else {
                var helpInputEvent = $.Event('help.input.app', {
                    inputElement: textInput
                });
                dataInput.trigger(helpInputEvent);
                helpInputEvent.inputElement = null;
                if (helpInputEvent.isDefaultPrevented() || keyCode === 32)
                    return false;
            }
        }

        // Back, Del will not trigger autocomplete if a list with options is visible
        //if ((keyCode == 8 || keyCode == 46) && that.selectionStart > 0 && that.selectionStart < that.selectionEnd && _input.popup(':visible'))
        //    textInput.data('autoComplete', false);
        textInput.data('autoComplete', !((keyCode === 8 || keyCode === 46) && that.selectionStart > 0 && that.selectionStart < that.selectionEnd && _input.popup(':visible')));
        textInput.data('keyCode', keyCode);

        // PgUp and PgDn
        if ((keyCode === 33 || keyCode === 34) && _input.popup(':visible')) {
            popup = _input.popup();
            selectedItem = popup.find('.app-selected');
            if (selectedItem.length) {
                currentItem = selectedItem.removeClass('app-selected');
                popup.scrollTop(popup.scrollTop() + (keyCode === 33 ? -1 : 1) * popup.height());
                while (currentItem.length) {
                    if (keyCode === 33) {
                        if (currentItem.offset().top < popup.offset().top)
                            break;
                    }
                    else
                        if (currentItem.offset().top + currentItem.outerHeight() - 1 > popup.offset().top + popup.height())
                            break;
                    if (!currentItem.is('.app-instruction'))
                        selectedItem = currentItem;
                    currentItem = keyCode === 33 ? currentItem.prev() : currentItem.next();
                }
                selectedItem.addClass('app-selected');
            }
            else
                selectedItem = popup.find('li:not(.app-instruction)').first().addClass('app-selected');
            return false;
        }


        // control the item selected in the popup list
        if ((keyCode === 38 || keyCode === 40) && !(ctrlKey || shiftKey || altKey) && _input.popup(':visible')) {
            e.preventDefault;
            e.stopPropagation();
            popup = _input.popup();
            selectedItem = popup.find('.app-selected').removeClass('app-selected');
            allItems = popup.find('li:not(.app-instruction)');
            if (selectedItem.length) {
                currentItem = selectedItem;
                while (currentItem.length) {
                    currentItem = keyCode === 38 ? currentItem.prev() : currentItem.next();
                    if (currentItem.length && !currentItem.is('.app-instruction')) {
                        selectedItem = currentItem;
                        break;
                    }
                    if (!currentItem.length && !allItems.filter(':not([data-command])').length)
                        selectedItem = [];
                }
            }
            else {
                if (keyCode === 38)
                    selectedItem = allItems.last();
                else
                    selectedItem = allItems.first();
            }
            if (selectedItem.length) {
                // make item visible
                selectedItem.addClass('app-selected');
                if (keyCode === 38 && selectedItem.prev().is('.app-instruction'))
                    selectedItem = selectedItem.prev();
                if (keyCode === 40 && selectedItem.next().is('.app-instruction'))
                    selectedItem = selectedItem.next();
                var itemOffset = selectedItem.offset(),
                    popupOffset = popup.offset();
                if (keyCode === 38) {
                    if (itemOffset.top < popupOffset.top)
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - 1);
                    else if (itemOffset.top >= popupOffset.top + popup.height())
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - (popup.height() - selectedItem.outerHeight()) - 1);
                }
                else if (keyCode === 40) {
                    if (itemOffset.top + selectedItem.outerHeight() >= popupOffset.top + popup.height())
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - (popup.height() - selectedItem.outerHeight()) - 1);
                    else if (itemOffset.top < popupOffset.top)
                        popup.scrollTop(itemOffset.top - popupOffset.top + popup.scrollTop() - 1);
                }
                return false;
            }
            else if (dataInput.closest('.app-page-inlineeditor').length) {
                // do not exiting from the field from the popup with lookup style and "null" value
                if (keyCode === 38)
                    selectedItem = allItems.first();
                else
                    selectedItem = allItems.last();
                selectedItem.addClass('app-selected');
                return false;
            }
        }

        if (moveDir && dataInput.is('[data-input-tab-stop="false"]')) {
            if (keyCode === 13 || keyCode === 9) {
                _input.blur(dataInput);
                e.stopPropagation();
                //e.preventDefault();
            }
            return false;
        }

        if (moveDir) {
            if (isForm && keyCode === 13) {
                //if (ctrlKey)
                //    return;
                if (!_input.popup(':visible')) {
                    field = _input.elementToField(textInput);
                    if (canCreateNewItem(field) && inputValue !== textInput.data('original')) {
                        _input.methods.lookup._createItemFromText(field, dataInputOf(textInput)/*.closest('[data-input]')*/, inputValue);
                        return false;
                    }
                }
                e.stopPropagation();
            }

            setTimeout(function () {
                _input.move(dataInput, moveDir, keyCode);
            });
            //e.preventDefault();
            return false;
        }

        // F2
        if (keyCode === 113) {
            selectionStart = that.selectionStart;
            selectionEnd = that.selectionEnd;
            if (!selectionStart && selectionEnd === inputValue.length)
                that.selectionStart = selectionEnd;
            else {
                that.selectionStart = 0;
                that.selectionEnd = that.value.length;
            }
            //e.preventDefault();
            return false;
        }

        // Ctrl+Z and Ctrl+Shift+Z
        if (keyCode === 90 && ctrlKey && !isRtf) {
            var undoValue = textInput.val(),
                redoValue = dataInput.data('redo'),
                originalData,
                currentValue;
            clearTimeout(_input._undoTimeout);
            _input._undoTimeout = setTimeout(function () {
                currentValue = textInput.val();
                if (undoValue === currentValue) {
                    if (shiftKey) {
                        if (redoValue != null)
                            textInput.val(redoValue).trigger('input');
                    }
                    else {
                        originalData = dataInput.data('original');
                        textInput.val(originalData);//.data('original', originalData);
                        dataInput.data('redo', currentValue);
                        if (isNullOrEmpty(currentValue))
                            postAndFocusLastInput();
                    }
                    textInput.trigger('input');
                }
            }, 100);
            return false;
        }
        // how to select text

    }).on('vclick contextmenu taphold', '.app-map-placeholder', function (e) {
        var that = $(this),
            address = that.attr('title') || that.data('title'),
            mapRequest = that.data('r'),
            showMapArgs;
        if (address && mapRequest) {
            showMapArgs = { address: address, zoom: mapRequest.zoom };
            if (e.type === 'vclick') {
                if (!$('.ui-popup-active').length)
                    mapShowAddress(showMapArgs);
            }
            else
                showListPopup({
                    anchor: $(this), x: lastTouchX(), y: lastTouchY() + 16, /*title: address, */items: [
                        { text: resourcesMobile.Map, icon: 'material-icon-location-on', context: showMapArgs, callback: mapShowAddress },
                        { text: resourcesMobile.Directions, icon: 'material-icon-directions', context: { address: address, zoom: mapRequest.zoom, api: 'dir' }, callback: mapShowAddress }
                    ]
                });
        }
        return false;
    }).on('input', '.app-data-input', function (e) {
        var that = this,
            keyCode = e.keyCode || e.which,
            input = $(that),
            placeholder = input.data('placeholder'), placeholderDisplay,
            change = input.data('change'),
            last, value = textInputToValue(input), valueChanged, originalValue, setValueEvent,
            trimmedValue = value.trim();

        if (barcodeInputMode(/*input*/))
            return false;

        if (String.isBlank(value))
            input.val('');

        // suppress supported RTF keyboard shortcuts
        //if (handleKeyboardShortcuts(e, isRtfEditor(that), true))
        //    return;

        if (!trimmedValue.length)
            value = trimmedValue;

        // ignore Up/Down

        //if (keyCode == 38 || keyCode == 40 || keyCode == 13)
        //    return;
        if (placeholder) {
            placeholderDisplay = value ? 'none' : '';
            placeholder = placeholder[0];
            if (placeholder.style.display !== placeholderDisplay)
                placeholder.style.display = placeholderDisplay;
        }

        last = input.data('last');
        valueChanged = value !== last;
        if (valueChanged)
            _input.fitContainer(dataInputOf(input)/*.closest('[data-input]')*/, input);

        if (change) {
            if (valueChanged) {
                input.data('last', value);
                change({ input: input, value: value, lastValue: last, keyCode: keyCode, keyboard: true });
            }
        }
        else if (valueChanged && !value.length) {
            originalValue = input.data('original');
            if (originalValue.length)
                setTimeout(function () {
                    // the timeout is required  to avoid the vertical scrolling in the webkit when users press Delete, Backspace, or Space to clear the field value
                    setValueEvent = _input.triggerSetValue(input, value, originalValue);
                    if (setValueEvent.inputValid)
                        input.data('original', '');
                });
        }
    }).on('cut paste', '.app-data-input', function () {
        var textInput = $(this);
        setTimeout(function () {
            textInput.trigger('keyup');
        });
    }).on('vclick', '[data-input="dropdownlist"]', function () {
        // simulates the "dblclick" on the "Drop Down List" input and rotates the selected value
        var textInput = $(this).find('.app-data-input'),
            field;
        if (touch.dblClick(textInput)) {
            field = _input.elementToField(textInput);
            if (field && field.ItemsStyle === 'DropDownList')
                textInput.trigger($.Event('keydown', { keyCode: 40, ctrlKey: true }));
        }

    }).on('contextmenu', '.app-data-input', function () {
        $(this).data('keepFocus', true).trigger('focus');
    }).on('mousedown context.menu', '.app-data-input-placeholder', function (e) {
        findInput().data('keepFocus', true);
        if (e.which === 3 || e.type === 'contextmenu')
            $(this).css('display', 'none');
        else if (e.which === 1)
            return false;
    }).on('vclick mousedown', '.app-data-input-popup', function (e) {
        var li = $(e.target).closest('li'),
            command = li.attr('data-command'),
            list = _input.popup().data('list'),
            input = findInput(),// $('.app-data-input'),
            dataInput = dataInputOf(input)/*.closest('[data-input]')*/,
            field = _input.elementToField(input), allValues,
            inputMethod;

        function doSelectItem() {
            if (command) {
                inputMethod = _input.elementToMethod(input);
                if (command === 'SeeAll') {
                    e.target = input;
                    setTimeout(function () {
                        _input.popup('hide');
                        if (inputMethod && inputMethod.clickButton)
                            inputMethod.clickButton(e, false);
                    }, feedbackDelay);
                }
                else if (command === 'Clear') {
                    setTimeout(function () {
                        input.trigger('blur');
                        _input.clearValue(field);
                        _input.fitContainer(dataInput, null, _input.fieldToPlaceholder(field));
                        setTimeout(function () {
                            _input.methods.lookup.focus(dataInput);
                        }, 100);
                    }, feedbackDelay);
                }
                else if (command === 'New') {
                    var inputValue = input.val();
                    input.trigger('blur');
                    _input.keyboard(function () {
                        touch.lookup({ field: field, create: true, dataInput: dataInput, value: inputValue });
                    });
                }
                else if (command === 'ShowOptions') {
                    setTimeout(function () {
                        field._doSearch = true;
                        _input.methods.lookup._showList({
                            field: field, value: null, input: input
                        });
                    }, feedbackDelay);
                }
                else if (command === 'SelectAll') {
                    _input.popup('hide');
                    allValues = _input.popup().find('li[data-index]');
                    allValues.each(function (index) {
                        _input.methods.lookup._useItemValue(field, list[parseInt($(this).attr('data-index'))], null, index === allValues.length - 1);
                    });
                }
                else if (command === 'None')
                    _input.popup('hide');
            }
            else {
                _input.popup('hide');
                if (list && field) {
                    input.removeData('restoreText');
                    _input.methods.lookup._buttonUp(input);
                    dataInput.find('.app-control-helper').data('focus', false); // make sure that the focus is on the input box of the basket
                    _input.methods.lookup._useItemValue(field, list[parseInt(li.attr('data-index'))]);
                }
            }
        }

        if (li.length && !li.is('.app-instruction') && !li.data('selected')) {
            li.parent().find('.app-selected').removeClass('app-selected');
            li.addClass('app-selected').attr('data-selected', 'true');
            input.trigger('focus');
            if (arguments.length === 2 && !arguments[1].feedback)
                doSelectItem();
            else
                setTimeout(doSelectItem, feedbackDelay);
        }
        return false;
    }).on('keydown', '.app-checkbox-container', function (e) {
        if (barcodeInputMode() || handleKeyboardShortcuts(e))
            return;
        var keyCode = e.keyCode || e.which,
            checkbox = $(this), action;
        if (keyCode === 32/* || keyCode == 13*/ || keyCode === 39 && !checkbox.is('.app-checkbox-on') || keyCode === 37 && checkbox.is('.app-checkbox-on'))
            action = 'toggle';
        else
            action = _input.eventToDirection(e);
        if (action) {
            if (action === 'toggle')
                _input.elementToMethod(checkbox)._toggleState(checkbox);
            else
                _input.move(checkbox, action, keyCode);
            return false;
        }
    }).on('keydown', '.app-data-list', function (e) {
        if (barcodeInputMode() || handleKeyboardShortcuts(e))
            return;
        var keyCode = e.keyCode || e.which,
            list = $(this), action, focusedItem, nextItem, focusedItemIndex;
        if (keyCode === 32/* || keyCode == 13*/)
            action = 'vclick';
        else if (keyCode === 8 || keyCode === 46)
            action = 'clear';
        else if (e.ctrlKey) {
            if (e.key === 'a')
                return false;
        }
        else {
            if (keyCode === 38)
                action = 'up';
            else if (keyCode === 40)
                action = 'down';
            else if (keyCode === 37)
                action = 'left';
            else if (keyCode === 39)
                action = 'right';
            else if (keyCode === 36)
                action = 'home';
            else if (keyCode === 35)
                action = 'end';
        }
        if (action) {
            focusedItem = list.find('.app-focus');
            focusedItemIndex = focusedItem.index();
            if (!focusedItem.length)
                _input.methods.listbox._scrollItemIntoView(list.find('.app-selected').first().addClass('app-focus'));
            else {
                list.find('.app-focus').removeClass('app-focus');
                if (action === 'up') {
                    nextItem = focusedItem.prev();
                    if (!nextItem.length) {
                        nextItem = focusedItem.parent().prev().find('li').last();
                        if (!nextItem.length)
                            nextItem = focusedItem;
                    }
                }
                else if (action === 'down') {
                    nextItem = focusedItem.next();
                    if (!nextItem.length) {
                        nextItem = focusedItem.parent().next().find('li').first();
                        if (!nextItem.length)
                            nextItem = focusedItem;
                    }
                }
                else if (action === 'right') {
                    nextItem = focusedItem.parent().next().find('li').eq(focusedItemIndex);
                    if (!nextItem.length) {
                        nextItem = list.find('ul').first().find('li').eq(focusedItemIndex + 1);
                        if (!nextItem.length)
                            nextItem = focusedItem;
                    }
                }
                else if (action === 'left') {
                    nextItem = focusedItem.parent().prev().find('li').eq(focusedItemIndex);
                    if (!nextItem.length)
                        if (focusedItemIndex)
                            nextItem = list.find('ul').last().find('li').eq(focusedItemIndex - 1);
                        else
                            nextItem = focusedItem;
                }
                else if (action === 'home')
                    nextItem = list.find('ul').first().find('li').first();
                else if (action === 'end')
                    nextItem = list.find('ul').last().find('li').last();
                else if (action === 'vclick') {
                    nextItem = null;
                    focusedItem.addClass('app-focus').trigger('vclick');
                }
                else if (action === 'clear' && !list.closest('[data-control]').is('[data-input="checkboxlist"]')) {
                    nextItem = null;
                    list.find('ul').first().find('li').first().trigger('vclick');
                }
            }
            if (nextItem && nextItem.length) {
                _input.methods.listbox._focusItem(nextItem);
                _input.methods.listbox._scrollItemIntoView(nextItem);
            }
            return false;
        }
        else {
            action = _input.eventToDirection(e);
            if (action) {
                _input.move(list, action, keyCode);
                return false;
            }
        }
    }).on('keydown', '.app-control-helper', function (e) {
        var inputHelper = $(this),
            keyCode = e.keyCode || e.which,
            listItems = inputHelper.find('li'),
            focusedListItem = inputHelper.find('.app-focus'),
            lastFocusedListItem = focusedListItem,
            focusedOffset;
        if (!listItems.length || !focusedListItem.length) return;
        focusedOffset = focusedListItem.offset();
        if (keyCode === 32 || keyCode === 40 && (e.altKey || e.metaKey)) {
            focusedListItem.trigger('vclick');
            return false;
        }
        if ((keyCode === 46 || keyCode === 8)) { // Del || Back Space
            _input.methods.lookup._removeBasketItem(focusedListItem, keyCode !== 8);
            return false;
        }
        if (keyCode === 9 || keyCode === 13 || keyCode === 27) {
            setTimeout(function () {
                var dataInput = dataInputOf(focusedListItem);//.closest('[data-input]');
                if (e.shiftKey && keyCode !== 27)
                    _input.move(dataInput, 'up', keyCode);
                else {
                    inputHelper.data('focus', false);
                    _input.methods.lookup.focus(dataInput);
                }
            });
            return false;
        }
        if (keyCode === 36)
            // home
            focusedListItem = listItems.first();
        else if (keyCode === 35)
            // end
            focusedListItem = listItems.last();
        else if (keyCode === 38) {
            // up
            var focusedLeft = focusedOffset.left,
                focusedRight = focusedLeft + focusedListItem.outerWidth() - 1,
                overlapWidth = 0,
                focusedTop = focusedOffset.top - 1;
            $(listItems.get().reverse()).each(function () {
                var li = $(this),
                    offset = li.offset(),
                    left = offset.left,
                    right = left + li.outerWidth() - 1,
                    w;
                if (!overlapWidth && offset.top < focusedTop || overlapWidth > 0 && offset.top === focusedTop) {
                    if (!(right < focusedLeft || left > focusedRight)) {
                        if (left >= focusedLeft && right <= focusedRight)
                            w = right - left + 1;
                        else if (left < focusedLeft && right <= focusedRight)
                            w = right - focusedLeft + 1;
                        else if (left < focusedRight && right >= focusedRight)
                            w = focusedRight - left + 1;
                        else
                            w = focusedRight - focusedLeft + 1;
                        if (w > overlapWidth) {
                            focusedListItem = li;
                            overlapWidth = w;
                            focusedTop = offset.top;
                        }
                    }
                }
                else if (overlapWidth)
                    return false;
            });
        }
        else if (keyCode === 40) {
            // down
            var focusedLeft = focusedOffset.left,
                focusedRight = focusedLeft + focusedListItem.outerWidth() - 1,
                overlapWidth = 0,
                focusedTop = focusedOffset.top + 1;
            listItems.each(function () {
                var li = $(this),
                    offset = li.offset(),
                    left = offset.left,
                    right = left + li.outerWidth() - 1,
                    w;
                if (overlapWidth == 0 && offset.top > focusedTop || overlapWidth > 0 && offset.top == focusedTop) {
                    if (!(right < focusedLeft || left > focusedRight)) {
                        if (left >= focusedLeft && right <= focusedRight)
                            w = right - left + 1;
                        else if (left < focusedLeft && right <= focusedRight)
                            w = right - focusedLeft + 1;
                        else if (left < focusedRight && right >= focusedRight)
                            w = focusedRight - left + 1;
                        else
                            w = focusedRight - focusedLeft + 1;
                        if (w > overlapWidth) {
                            focusedListItem = li;
                            overlapWidth = w;
                            focusedTop = offset.top;
                        }
                    }
                }
                else if (overlapWidth)
                    return false;
            });
        }
        else if (keyCode === 39 || keyCode === 37) {
            listItems.each(function () {
                var li = $(this),
                    offset = li.offset();
                // right
                if (keyCode === 39 && offset.top === focusedOffset.top && offset.left > focusedOffset.left) {
                    focusedListItem = li;
                    return false;
                }
                //left
                if (keyCode === 37 && offset.top === focusedOffset.top && offset.left < focusedOffset.left)
                    focusedListItem = li;
            });
        }
        else
            return;

        function focusOnTextInput() {
            setTimeout(function () {
                inputHelper.data('focus', false);
                _input.methods.lookup.focus(dataInputOf(focusedListItem)/*.closest('[data-input]')*/);
            });
        }

        if (focusedListItem === lastFocusedListItem) {

            // right to the next line
            if (keyCode === 39)
                if (focusedListItem.next().length)
                    focusedListItem = focusedListItem.next();
                else
                    focusOnTextInput();

            // left to the prev line
            if (keyCode === 37 && focusedListItem.prev().length)
                focusedListItem = focusedListItem.prev();
            // up to the previous input
            if (keyCode === 38) {
                setTimeout(function () {
                    _input.move(dataInputOf(focusedListItem)/*.closest('[data-input]')*/, 'up', 9);
                });
                return false;
            }
            // down to the next input
            if (keyCode === 40) {
                focusOnTextInput();
                return false;
            }
        }
        listItems.removeClass('app-focus');
        focusedListItem.addClass('app-focus');
        // make sure the focused item is visible to the user
        scrollIntoView(focusedListItem);
        return false;
    }).on('blur', '.app-data-list,.app-control-helper,.app-checkbox-container,.app-drop-box', function (e) {
        var container = $(this),
            focusedElem = container.find('.app-focus');
        if (!focusedElem.is('li'))
            focusedElem.removeClass('app-focus');
        hasFocus(container.parent(), false);
        //_input.labelState(container, false);
    }).on('keydown', '.ui-panel-inner', function (e) {
        var keyCode = e.keyCode || e.which,
            inner = $(this), ul,
            innerOffset = inner.offset(),
            dir, item, allItems;
        if (keyCode === 37)
            dir = 'left';
        else if (keyCode === 39)
            dir = 'right';
        else if (keyCode === 40 || keyCode === 9 && !e.shiftKey)
            dir = 'down';
        else if (keyCode === 38 || keyCode === 9 && e.shiftKey)
            dir = 'up';
        else if (keyCode === 36)
            dir = 'home';
        else if (keyCode === 35)
            dir = 'end';
        else if (keyCode === 13 || keyCode === 32)
            dir = 'select';
        if (keyCode === 9) {
            if (inner.closest('.app-sidebar').length) {
                focusScrollable();
                findScrollable().find('.app-selected').addClass('ui-btn-active');
                return false;
            }
        }
        if (dir) {
            inner.find('ul').each(function () {
                var list = $(this),
                    listOffset = list.offset();
                if (listOffset.left >= innerOffset.left && listOffset.left < innerOffset.left + 10) {
                    ul = list;
                    return false;
                }
            });
            if (!ul) return false;
            allItems = ul.find('.ui-btn').filter(function () { return !$(this).parent().is('.ui-disabled'); });
            item = ul.find('.app-focus');
            if (item.length) {
                if (dir === 'right')
                    dir = item.find('.material-icon-chevron-right').length ? 'select' : 'down';
                if (dir === 'left')
                    dir = item.find('.material-icon-chevron-left').length ? 'select' : 'up';
                if (dir === 'select')
                    if (item.length) {
                        var context = item.data('data-context') || item.data('context-action');
                        if (keyCode === 32 && (!context || !context.keepOpen))
                            return false;
                        tapping();
                        item.trigger('vclick');
                        return false;
                    }
                    else
                        dir = 'down';
            }
            if (!item.length) {
                item = allItems.first();
                if (dir === 'up' || dir === 'end')
                    item = allItems.last();
                item.addClass('app-focus');
            }
            else if (dir === 'down')
                $(allItems).each(function (index) {
                    if (item.is(this)) {
                        item = $(allItems.get(index < allItems.length - 1 ? index + 1 : 0));
                        return false;
                    }
                });
            else if (dir === 'up')
                $(allItems).each(function (index) {
                    if (item.is(this)) {
                        item = $(allItems.get(index > 0 ? index - 1 : allItems.length - 1));
                        return false;
                    }
                });

            else if (dir === 'home')
                item = allItems.first();
            else if (dir === 'end')
                item = allItems.last();

            ul.find('.ui-btn-active, .app-focus').removeClass('ui-btn-active app-focus');
            item.addClass('app-focus ui-btn-active');
            scrollFocusedLinkIntoView(item, inner);
            hideTooltip();
            var tooltip = item.data('title') || item.attr('title'),
                itemRect;
            if (tooltip) {
                itemRect = getBoundingClientRect(item);
                showTooltip(itemRect.left, itemRect.top, tooltip, item);
            }
            e.preventDefault();
        }
    }).on('keydown', '.app-drop-box', function (e) {
        var keyCode = e.keyCode || e.which,
            dropBox = $(this), action;
        if (keyCode === 32 /*|| keyCode == 13 && !e.shiftKey*/)
            action = 'vclick';
        else if (keyCode === 8 || keyCode === 46)
            action = 'clear';
        /*       else
                   action = _input.eventToDirection(e);*/
        if (action) {
            if (action === 'vclick')
                dropBox.trigger(action);
            else if (action === 'clear')
                dropBox.parent().find('.app-clear').trigger('vclick');
            /*            else
                            _input.move(dropBox, action, keyCode);*/
            return false;
        }
    }).on('keydown', '.app-wrapper', function (e) {
        if (barcode.input || kiosk())
            return;
        if (isInTransition || isBusy())
            return false;
        var that = this,
            keyCode = e.keyCode || e.which,
            target,
            ctrlKey = e.ctrlKey,
            wrapper = $(that),
            listview, selectedLink, dataContext,
            dataView, extension, direction;
        // Down

        switch (keyCode) {
            case 35:
                direction = 'end';
                break;
            case 36:
                direction = 'home';
                break;
            case 39:
                direction = 'right';
                break;
            case 40:
                direction = 'down';
                if (ctrlKey) {
                    setTimeout(normalScroll, 0, that, direction);
                    direction = null;
                }
                break;
            case 37:
                direction = 'left';
                break;
            case 38:
                direction = 'up';
                if (ctrlKey) {
                    setTimeout(normalScroll, 0, that, direction);
                    direction = null;
                }
                break;
            case 13:
                if ($(e.target).is('textarea'))
                    return;
                direction = 'enter';
                break;
            case 113: // F2
                direction = 'edit';
                break;
            //case 45:
            //    action = 'new';
            //    break;
            //case 46:
            //    action = 'del';
            //    break;
            case 9:
                direction = 'tab';
                break;
            case 32:
                direction = 'space';
                break;
            case 33:
                direction = 'pageup';
                break;
            case 34:
                direction = 'pagedown';
                break;
        }
        if (direction) {
            if ($('.ui-panel-dismiss,.app-popup').filter(fnVisible).length) {
                e.preventDefault();
                return false;
            }
            var keyboardNavigationEvent = $.Event('keyboardnavigation.app', { originalEvent: e, direction: direction });
            wrapper.trigger(keyboardNavigationEvent);
            if (keyboardNavigationEvent.isDefaultPrevented())
                return false;
            target = $(e.target);
            if (direction && !ctrlKey && !target.is(':input') && target.closest('.ui-page-active').length && !direction.match(/pageup|pagedown/)) {
                if (direction.match(/left|right/) && wrapper.find('[data-layout="form"][data-state="read"]').length)
                    if (showNextRow(direction))
                        return false;
                listview = wrapper.children('.app-listview');
                if (direction === 'tab')
                    if (_edit.frame(':visible')) {
                        // this 'tab' key was not handled by editor. Let's convert it to up/down
                        if (e.shiftKey)
                            direction = 'up';
                        else
                            direction = 'down';
                    }
                    else if (touch._menuButton.is('.ui-icon-bars') && !findActivePage().is('.app-page-modal') && appBars.left.visible) {
                        refreshContext(true);
                        refreshContext(false, 0);
                        listview.find('.ui-btn-active').removeClass('ui-btn-active');
                        appBars.left.inner.trigger('focus').find('.ui-btn').first().addClass('app-focus ui-btn-active');
                        return false;
                    }
                if (listview.length && listview.is(':visible')) {
                    if (direction.match(/left|right|home|end/) && listview.is('.app-grid')) {
                        dataView = activeDataView();
                        var availWidth = dataView.session('grid-avail-width'),
                            firstDataItem = listview.find('.dv-item').first(),
                            maxScroll = firstDataItem.length && Math.ceil(availWidth - availWidth * (firstDataItem.width() / availWidth)),
                            scrollLeft = dataView.session('scroll-left') || 0,
                            doScroll;
                        if (maxScroll)
                            if (direction === 'right' && scrollLeft < maxScroll) {
                                scrollLeft = Math.min(scrollLeft + 32, maxScroll);
                                doScroll = true;
                            }
                            else if (direction === 'left' && scrollLeft > 0) {
                                scrollLeft = Math.max(scrollLeft - 32, 0);
                                doScroll = true;
                            }
                            else if (direction === 'home') {
                                scrollLeft = 0;
                                doScroll = true;
                            }
                            else if (direction === 'end') {
                                scrollLeft = maxScroll;
                                doScroll = true;
                            }
                        if (doScroll) {
                            dataView.session('scroll-left', scrollLeft);
                            gridScrollStyle(dataView, -scrollLeft);
                        }
                        e.preventDefault();
                        return;
                    }
                    selectedLink = listview.find('.dv-item .app-selected');
                    if (!selectedLink.length) {
                        selectedLink = listview.find('.dv-item').first().find('.ui-btn');
                        direction = 'none';
                    }
                    if (selectedLink.length) {
                        // figure the dataview
                        var selectedItem = selectedLink.parent(),
                            newSelectedItem = selectedItem,
                            newSelectedLink = selectedLink;
                        dataView = activeDataView();
                        extension = dataView.extension();
                        // move if needed
                        if (direction === 'enter' && _edit.frame(':active') && !ctrlKey)
                            if (e.shiftKey)
                                direction = 'up';
                            else if (!ctrlKey)
                                direction = 'down';

                        if (direction === 'right')
                            direction = 'down';
                        else if (direction === 'left')
                            direction = 'up';
                        if (direction === 'down') {
                            newSelectedItem = selectedItem.next();
                            if (newSelectedItem.is('.app-group'))
                                newSelectedItem = newSelectedItem.next();
                        }
                        else if (direction === 'up') {
                            newSelectedItem = selectedItem.prev();
                            if (newSelectedItem.is('.app-group'))
                                newSelectedItem = newSelectedItem.prev();
                        }
                        newSelectedLink = newSelectedItem.find('.ui-btn');
                        dataContext = newSelectedLink.data('data-context');
                        if (dataContext) {
                            selectedItem = newSelectedItem;
                            selectedLink = newSelectedLink;
                        }
                        else {
                            if (newSelectedLink.is('.dv-load-at-top,.dv-load-at-bottom')) {
                                fetchOnDemand(50);
                                return; // reveal the "loading... button
                            }
                            dataContext = selectedLink.data('data-context');
                        }
                        // perform a click
                        if (dataContext && !selectedItem.is('.dv-load-at-top-parent,.dv-load-at-bottom-parent,.app-calculated')) {
                            listview.find('.ui-btn.app-selected').removeClass('app-selected ui-btn-active');
                            //checkIfMultiSelect(dataView, selectedLink);
                            touch.lastTouch(false);// prevent data editor from interpreting the last touch
                            extension.tap(dataContext, direction === 'enter' ? null : 'none');
                            touch.lastTouch(true);
                            dataViewEchoChanged(dataView);
                            selectedLink.addClass('app-selected ui-btn-active');
                            //if (direction.match(/up|down/)) {
                            //    itemOffset = selectedItem.offset();
                            //    wrapperOffset = wrapper.offset();
                            //    headerBar = wrapper.data('sticky-header');//stickyHeaderBar(wrapper);
                            //    stickyHeaderBarOffset = headerBar.offset();
                            //    top = Math.max(wrapperOffset.top, stickyHeaderBarOffset.top + headerBar.outerHeight());
                            //    bottom = wrapperOffset.top + wrapper.height() - 1;
                            //    if (itemOffset.top < top)
                            //        deltaY = itemOffset.top - top - 4;
                            //    else if (itemOffset.top + selectedItem.outerHeight() > bottom)
                            //        deltaY = itemOffset.top + selectedItem.outerHeight() - bottom + 4;
                            //}
                            e.preventDefault();
                            //if (deltaY)
                            //    setTimeout(function () {
                            //        wrapper.scrollTop(wrapper.scrollTop() + deltaY);
                            //    }, 10);
                            if (direction.match(/up|down/))
                                makeVisible(selectedItem, wrapper, selectedItem);
                        }
                    }
                }
                else {
                    var focusedSummaryView = findFocusedSummaryView(),
                        focusedEcho,
                        firstRowContext;
                    if (focusedSummaryView.length) {
                        if (direction.match(/down|edit/)) {
                            focusedEcho = findEcho(focusedSummaryView);
                            if (!focusedEcho.find('.dv-item .ui-btn.app-selected').length) {
                                firstRowContext = focusedEcho.find('.dv-item .ui-btn').first().data('dataContext');
                                if (firstRowContext) {
                                    uiElementToDataView(focusedSummaryView).extension().tap(firstRowContext, 'none');
                                    focusedSummaryView = null;
                                }
                            }
                        }
                        if (focusedSummaryView)
                            _input.move(focusedSummaryView, keyCode === 9 ? e.shiftKey ? 'up' : 'down' : direction);
                        e.preventDefault();
                    }
                }
            }
        }
        if (!e.isDefaultPrevented())
            wrapper.trigger($.Event('keyboardpreview.app', { originalEvent: e }));
    }).on('keydown', function (e) {
        if (e.isDefaultPrevented() || isInDesignMode())
            return;
        userActivity();

        var keyCode = e.keyCode || e.which;
        if (keyCode === 27) { // Esc
            if (dragEvent || pendingDragEvent) {
                $document.trigger($.Event('dragcancel.app', { drag: pendingDragEvent || dragEvent }));
                e.preventDefault();
                return;
            }
            if (!isBusy() && !_input.popup(':visible') && !findActivePage().is('.app-modal-keyboard')) {
                var calendar = $('.app-calendar-plugin-container');
                if (calendar.length && calendar.is(':visible')) {
                    touch.CalendarInput('escape');
                    return false;
                }
                else {
                    if (closePopupsAndPanels(false)) {
                        e.preventDefault();
                        return false;
                    }
                    if (_edit.frame(':active')) {
                        var fieldElem = _edit.fieldElem();
                        if (fieldElem.closest('.dv-item-new').length)
                            fieldElem.closest('.ui-btn').trigger($.Event('vclick', { ctrlKey: true }));
                        _edit.detach(true);
                        findEcho(fieldElem).data('skip-item-focus', true);
                        if (!kiosk())
                            return false;
                    }
                    var focusedSummaryView = findFocusedSummaryView();
                    if (focusedSummaryView.length) {
                        focusedSummaryView.removeClass('app-focus');
                        if (!kiosk())
                            return false;
                    }
                    if (findActivePage().is('.app-page-modal')) {
                        //whenPageShown(focusLastInput);
                        var dv = activeDataView();
                        if (dv && dv._inlineEditor)
                            dv._inlineEditorCanceled = true;
                        var beforeModalCancelEvent = $.Event('beforemodalcancel.app');
                        $document.trigger(beforeModalCancelEvent);
                        if (!beforeModalCancelEvent.isDefaultPrevented()) {
                            setTimeout(goBack);
                            e.preventDefault();
                        }
                        return false;
                    }
                }
            }
        }
        if (keyCode === 70 && (e.ctrlKey || e.metaKey)) { // Ctrl+F
            _app.search('enumerate');
            return false;
        }
        if (/*!isTouchPointer &&*/ handleKeyboardShortcuts(e)) return;
        // handle F10 and Shift+F10
        if (keyCode === 121 && _input.valid()) {
            e.preventDefault();
            var shiftKey = e.shiftKey,
                ctrlKey = e.ctrlKey,
                button = shiftKey ? touch._contextButton : touch._menuButton,
                openPanel = $('.ui-panel-open');
            if ($('.ui-popup-active').length)
                closePopups(true);
            else if (shiftKey || ctrlKey || button.is('.ui-icon-bars') && (!findActivePage().is('.app-page-modal') || isReadingPaneDetail()) && !openPanel.length) {
                var showContextMenuEvent = $.Event('showcontextmenu.app', { originalEvent: e });
                $document.trigger(showContextMenuEvent);
                if (!showContextMenuEvent.isDefaultPrevented() && !ctrlKey)
                    setTimeout(function () {
                        tapping();
                        var summaryView = findFocusedSummaryView();
                        if (summaryView.length && shiftKey)
                            button = findEcho(summaryView).find('.app-echo-toolbar .app-btn-more');
                        button.trigger('vclick');
                    });
            }
            else
                closePopupsAndPanels();
            return false;
        }
    }).on('mousedown', '.app-hscrollbar2', function (e) {
        if (isTouchPointer) return;
        var scrollbar = $(this),
            handleOffset = scrollbar.find('.app-hscrollbar-handle').offset(),
            dataView = findDataView(scrollbar.attr('data-view')),
            availWidth, scrollLeft,
            scrollable;
        if (dataView) {
            scrollLeft = (dataView.session('scroll-left') || 0) + ((e.pageX < handleOffset.left ? -1 : 1) * scrollbar.outerWidth(true));
            availWidth = dataView.session('grid-avail-width');
            if (scrollLeft < 0)
                scrollLeft = 0;
            else
                scrollLeft = Math.min(scrollLeft, availWidth - scrollbar.outerWidth(true));
            touch.scrollGrid(dataView, scrollLeft);
            _edit.sync({ dataView: dataView, scrollIntoView: false });
        }
        else {
            scrollable = scrollbar.prev();
            if (scrollable.attr('class').match(/-outer/))
                scrollable = scrollable.children().first();
            scrollable.scrollLeft(scrollable.scrollLeft() + (e.pageX < handleOffset.left ? -1 : 1) * calcWidth(scrollable));
        }
        return false;
    }).on('mousedown', '.app-vscrollbar', function (e) {
        if (isTouchPointer) return;
        var that = $(this),
            scrollable;
        scrollable = that.prev();
        if (scrollable.attr('class').match(/-outer/))
            scrollable = scrollable.children().first();
        scrollable.scrollTop(scrollable.scrollTop() + (e.pageY < that.find('.app-vscrollbar-handle').offset().top ? -1 : 1) * scrollable.height());
    }).on('transitionend', '.app-hidden', function () {
        var that = $(this).parent(),
            timeout,
            newItem;
        if (that.is('.app-data-list')) {
            newItem = that.find('[data-index="new"]');
            if (newItem.length) {
                timeout = that.data('revealTimeout');
                clearTimeout(timeout);
                that.data('revealTimeout', setTimeout(function () {
                    newItem.parent().prevAll().remove();
                    newItem.prevAll().remove();
                    newItem.parent().removeClass('app-hidden');
                }, 50));
            }
        }
    }).on('vclick', '[data-container="toggle"]', function (e) {
        var that = $(this),
            scrollable = findScrollable(that),
            minimized, button;
        that.addClass('ui-btn-active');
        touch.stub('put', scrollable);
        minimized = that.parent().toggleClass('app-container-collapsed').is('.app-container-collapsed');
        button = that.find('.app-collapsible-toggle-button');
        if ($(e.target).closest('.app-collapsible-toggle-button').length)
            touch.toggleTooltip(button, !minimized);
        that.parent().find('[data-control="dataview"]').each(function () {
            findEcho($(this).attr('id')).css('display', minimized ? 'none' : '');
        });
        if (!minimized)
            ensureLayoutControls({ controls: that.closest('[data-container="collapsible"]').data('node').children });
        pageResized();
        _edit.sync();
        touch.stub('trim', scrollable);
        setTimeout(function () {
            that.removeClass('ui-btn-active');
        }, feedbackDelay);
        //clearHtmlSelection();
        hideTooltip();
        return false;
    }).on('vclick', '.app-field-object-ref', function () {
        var target = $(this),
            control = target.closest('[data-control]'),
            inputContainer = target.closest('[data-input-container]'),
            dataView, field, row;
        dataView = findDataView(inputContainer.attr('data-input-container'));
        if (dataView) {
            field = dataView.findField(control.attr('data-field'));
            if (field) {
                callWithFeedback(target, function () {
                    touch.details({ field: field });
                });
            }
        }
        return false;
    }).on('vclick', '.app-echo-see-all', function () {
        var link = $(this).addClass('ui-btn-active');
        echoFocus(link, false);
        setTimeout(function () {
            link.removeClass('ui-btn-active');
            useFullscreenWhenSeeAll = true;
            //mobile.changePage(link.closest('.app-echo').attr('data-for'));
            touch.seeAll(link.closest('.app-echo').attr('data-for'));
        }, feedbackDelay);
        return false;
    }).on('vclick', '.app-echo-toolbar a', function (e) {
        var link = $(e.target),
            id = link.closest('.app-echo').attr('data-for');
        if (clickable(link) && !isBusy() && link.is('.ui-icon-dots')) {
            echoFocus(link, false);
            callWithFeedback(link, function () {
                touch.showContextMenu({
                    scope: id, position: isReadingPaneDetail() && _screen.splitLeft ? 'right' : ''
                });
            });
        }
        return false;
    }).on('vclick', '.app-sidebar ul', function (e) {
        if (panelIsBusy || !clickable(e.target))
            return false;
        var link = $(e.target).closest('a'),
            action = link.data('context-action');
        if (link.length)
            if (action) {
                if (!isBusy())
                    callWithFeedback(link, function () {
                        executeContextAction(action, link);
                    });
                return false;
            }
            else
                activeLink(link, false);
    }).on('vclick', '.app-bar-buttons', function (e) {
        var x = lastTouchX(e.clientX);
        closePopupsAndPanels(true);
        focusScrollable();
        if ($(e.target).closest('.app-btn-close').length)
            goBack();
        else
            $(this).find('.ui-btn').each(function () {
                var btn = $(this),
                    btnOffset = btn.offset();
                if (btn.is(':visible') && x >= btnOffset.left - 8 && x <= btnOffset.left + btn.outerWidth() + 8) {
                    setTimeout(function () {
                        btn.trigger('vclick');
                    });
                    return false;
                }
            });
        return false;
    })/*.on('touchstart mousedown', '.app-page-modal-title', function () {
        var input = findInput(),
            fieldName;
        if (input.length) {
            fieldName = dataInputOf(input).data('field');
            if (fieldName)
                findActivePage().data('last-focused-field', fieldName);
        }
    })*/.on('vclick', '.app-page-modal-title', function (e) {
        var button,
            x = lastTouchX(e.clientX);
        focusScrollable();
        button = $(e.target);
        if (!button.is('.app-btn')) {
            button = null;
            $(this).find('.app-btn').each(function () {
                var btn = $(this),
                    btnOffset = btn.offset();
                if (btn.is(':visible') && x >= btnOffset.left - 8 && x <= btnOffset.left + btn.outerWidth() + 8) {
                    button = btn;
                    return;
                }
            });
        }
        if (button) {
            activeElementOfDocument('blur');
            _input.keyboard(function () {
                callWithFeedback(button, function () {
                    var dataView = touch.dataView();
                    if (button.is('.ui-icon-dots'))
                        touch.showContextMenu();
                    else if (button.is('.app-btn-search'))
                        _app.search();
                    else if (button.is('.app-btn-close')) {
                        if (dataView._cancelCallback)
                            dataView._cancelCallback(dataView);
                        else
                            goBack();
                    }
                    else if (button.is('.app-btn-fullscreen')) {
                        var zoomed = !button.is('.app-btn-fullscreen-exit'),
                            lastFocused = findActivePage().data('last-focused-field');
                        button./*removeData('title').*/toggleClass('app-btn-fullscreen-exit', zoomed).attr('data-title', resourcesMobile[(zoomed ? 'Exit' : '') + 'Fullscreen']).closest('.ui-page').toggleClass('app-page-modal-fullscreen', zoomed);
                        var page = findActivePage(),
                            width = page.width();
                        if (zoomed && dataView)
                            dataView.session('zoomed', true);
                        pageResized(true);
                        isInTransition = true;
                        page.css('transform', 'scale(' + width / page.width() + ')');
                        setTimeout(function () {
                            page.css('transition', 'transform 100ms ease-in');
                            setTimeout(function () {
                                page.css('transform', '');
                                setTimeout(function () {
                                    page.css('transition', '');
                                    isInTransition = false;
                                    dataView.pageProp('zoomed', zoomed ? true : null);
                                    if (!zoomed)
                                        dataView.session('zoomed', null);
                                    if (lastFocused)
                                        focusLastInput();
                                }, 100); // do not user transitionend - it may fail
                            });
                        });
                    }
                });
            });
        }
        return false;
    }).on('dblclick', '.app-page-modal-title', function (e) {
        $(this).find('.app-btn-fullscreen,.app-btn-fullscreen-exit').trigger('vclick');
        return false;
    }).on('dblclick', '.app-page-header', function (e) {
        $(this).prev().trigger('dblclick');
        return false;
    }).on('vclick', '.app-btn-menu', handleMenuButtonClick).on('vclick', '.app-back-text', function () {
        touch._menuButton.trigger('vclick');
        return false;
    }).on('vclick contextmenu', '.app-menu-strip ul', function (e) {
        clearTimeout(autoOpenMenuTimeout);
        var link = $(e.target).closest('.ui-btn'),
            menuStrip = $(this).parent(),
            node = link.data('data-node'),
            lastSelectedLink,
            isExternalTarget = node && node.url && !node.children;
        if (!e.autoOpen && !isTouchPointer && node && node.url) {
            closePopupsAndPanels(true);
            setTimeout(menuItemNodeCallback, 0, node, link);
            return false;
        }
        else if (!link.length || link.data('selected')) {
            closePopupsAndPanels(true);
            focusScrollable();
            return false;
        }
        if (isExternalTarget) {
            if (e.type === 'contextmenu')
                return false;
            //else if (node.url && !node.url.match(menuItemUrlRegex))
            //    busyBeforeUnload();
            link.addClass('app-selected');
        }
        lastSelectedLink = menuStrip.find('.app-selected').removeClass('app-selected');
        callWithFeedback(link, function () {
            if (isExternalTarget) {
                if (!menuItemNodeCallback(node)) {
                    link.removeClass('app-selected');
                    lastSelectedLink.addClass('app-selected');
                }
            }
            else {
                if (link.data('selected')) return;
                var items = [],
                    nodes = [];
                if (node) {
                    if (isTouchPointer)
                        nodes.push(node);
                    else
                        node.children.forEach(function (n) {
                            nodes.push(n);
                        });
                }
                else {
                    depth = 0;
                    node = { children: [] };
                    menuStrip.find('li:hidden a').each(function () {
                        nodes.push($(this).data('data-node'));
                    });
                }
                if (nodes.length === 1 && !nodes[0].url)
                    nodes = nodes[0].children;
                enumerateMenuItems(items, true, nodes, 1);
                showListPopup({
                    arrow: false,
                    x: link.offset().left + 1,
                    y: link.offset().top + link.outerHeight() - 2,
                    anchor: link.data('selected', true), items: items,
                    afteropen: function (popup) {
                        var inner = popup.addClass('app-popup-menu app-popup-menu-main').find('.ui-panel-inner'),
                            item = inner.find('.app-item-selected');
                        if (item.length && inner.offset().top + inner.height() < item.offset().top + item.outerHeight())
                            inner.scrollTop(item.offset().top - inner.offset().top - (inner.height() - item.outerHeight()) / 2);
                    },
                    afterclose: function () {
                        link.removeData('selected');
                    }
                });
            }
        });
        return false;
    }).on('vclick', '.StatusBar .Segment', function (e) {
        setTimeout(wizard, 0, 'select', { text: $(this).text() });
        return false;
    }).on('vclick', '.app-page-modal-glass-pane-partial', function (e) {
        if (!_input.valid())
            return;
        setTimeout(goBack);
        return false;
    }).on('vclick', '.app-page-modal-glass-pane,.app-page-modal-background', function () {
        if (!_input.valid())
            return;
        var pageInfo = touch.pageInfo(),
            dataView = pageInfo.dataView;
        if (pageInfo.page.data('moved')) {
            resetPageHeight();
            if (!isTouchPointer)
                focusLastInput();
            return false;
        }
        focusScrollable();
        if (dataView && dataView._inlineEditor) {
            var p = _lastTouch;
            var panes = $('.app-page-modal-glass-pane,.app-page-modal-background'),
                elem;
            panes.css('visibility', 'hidden');
            elem = elementAt(p);
            panes.css('visibility', '');
            if (elem.length)
                if (elem.is('.app-btn-more') && elem.closest('.app-selected').length || elem.is('.app-btn-context')) {
                    findPage().find('.app-icon.app-btn-more').trigger('vclick');
                    return false;
                }
                else {
                    var dataInputMoveEvent = $.Event('datainputmove.app', { direction: elem });
                    $document.trigger(dataInputMoveEvent);
                    if (dataInputMoveEvent.isDefaultPrevented())
                        return;
                }
        }
        if (dataView && dataView.tagged('modal-tap-out'))
            goBack();
        else {
            var page = findActivePage().toggleClass('app-page-modal-centered');
            setTimeout(function () {
                page.toggleClass('app-page-modal-centered');
            }, 100);
        }
    })/*.on('touchmove pointermove', disableTouchMoveSelector, function (e) {
        if (e.originalEvent.cancelable)
            return false;
    })*/.on('vclick', '.app-sidebar .app-bar-toolbar-bottom .ui-btn', function (e) {
        var link = $(e.target).closest('.ui-btn');
        if (!link.is('.app-selected')) {
            if (link.is('.app-btn-page'))
                link.closest('.app-bar-toolbar-bottom').find('.ui-btn').removeClass('app-selected');
            callWithFeedback(link, function () {
                var node = link.data('context');
                if (node) {
                    link.addClass('app-selected');
                    menuItemNodeCallback(node);
                }
                else if (link.is('.app-btn-apps'))
                    showApps();
                else if (link.is('.app-btn-settings'))
                    configureSettings('left');
            });
        }
        return false;
    }).on('focusout', '.app-sidebar .ui-panel-inner', function (e) {
        $(this).find('.app-focus').removeClass('app-focus ui-btn-active');
    }).on('vclick', '.app-bar-search', function (e) {
        var searchBar = $(this),
            icon;
        $(this).find('.app-icon').each(function () {
            var that = $(this),
                x = lastTouchX(),
                offset = that.offset();
            if (offset.left <= x && x < offset.left + that.outerWidth()) {
                icon = that;
                return false;
            }
        });
        if (icon) {
            var dataView = touch.contextDataView(),
                searchDataViewId = dataView.survey().context.id; // search survey
            callWithFeedback(icon, function () {
                if (icon.is('.material-icon-cancel')) {
                    findInput()/*$('.app-data-input')*/.trigger('blur');
                    icon.closest('.app-bar-search').addClass('app-null');
                    inputExecute({ QuickFind: null });
                    inputFocus();
                    _app.search('autoComplete', { id: searchDataViewId, dataInput: searchBar.find('[data-field="QuickFind"]') });
                }
                else if (icon.is('.material-icon-search'))
                    _app.action({ path: 'form/submit' });
                else if (icon.is('.material-icon-more'))
                    _app.search('toggle', searchDataViewId);
            });
            return false;
        }
        else if (!findInput().length) {
            inputFocus();
            return false;
        }
    }).on('mousedown pointerdown touchstart', '.app-control-toolbar', function (e) {
        rtf.range('save');
        rtf.focus();
        findInput().data('keepFocus', true);
    }).on('vclick', '.app-control-toolbar', function (e) {
        var target = $(e.target),
            button,
            x = lastTouchX(e.clientX);
        if (target.is('.app-has-droparrow')) {
            var input = findInput().data('keepFocus', true).trigger('blur'),
                field = _input.elementToField(input);
            target.addClass('app-selected');
            input.data('keepFocus', true);
            rtf.range('restore', { force: true });
            setTimeout(function () {
                var g = target.data('group'),
                    options = [];
                g.list.forEach(function (c) {
                    var command = c.command,
                        argument = c.argument,
                        icon = c.icon,
                        text;
                    if (rtf.allow(field, c))
                        if (command) {
                            text = rtf.toText(command, argument);//resourcesEditor[command.substring(0, 1).toUpperCase() + command.substring(1)]
                            options.push({
                                text: text, icon: icon ? ('material-icon-' + icon) : icon, context: { c: command, a: argument }, callback: rtf.exec
                            });
                        }
                });
                showListPopup({
                    anchor: target, items: options, y: target.offset().top + target.outerHeight(),
                    afterclose: function () {
                        target.removeClass('app-selected');
                        rtf.focus();
                    }
                });
            }, feedbackDelay);
        }
        else if (target.is('.app-control-toolbar-more')) {
            var input = findInput().data('keepFocus', true).trigger('blur'),
                context = [],
                position;
            //mobile.pageInfo().autoFocus = false;
            button = target;


            dataInputOf(input, '.app-control-toolbar')/* input.closest('[data-input]').find('.app-control-toolbar')*/.find('.app-has-droparrow,i,.app-divider').each(function () {
                var btn = $(this),
                    group = btn.data('group'),
                    command = btn.data('command'),
                    icon = btn.data('icon');
                if (group)
                    context.push({
                        text: group.text, icon: false, transition: true, callback: function (index) {
                            var newContext = [
                                {
                                    text: resourcesMobile.Back, icon: iconBack, callback: function () {
                                        showContextPanel(context, '#app-rtf', position);
                                    }
                                }, {}
                            ];
                            group.list.forEach(function (c) {
                                var command = c.command,
                                    argument = c.argument,
                                    icon = c.icon;
                                if (command && rtf.allow(field, c))
                                    newContext.push({ text: rtf.toText(command, argument), icon: icon ? ('material-icon-' + icon) : false, context: { c: command, a: argument }, callback: rtf.exec });
                            });
                            showContextPanel(newContext, '#app-rtf-' + 1, {
                                close: rtf.focus
                            });
                        }
                    });
                else if (command)
                    context.push({
                        text: btn.data('text'), shortcut: btn.data('shortcut'), icon: icon ? ('material-icon-' + icon) : false, context: { c: btn.data('command'), a: btn.data('argument') }, callback: rtf.exec, disabled: btn.is('.app-disabled'), state: btn.is('.app-selected')
                    });
                else
                    context.push({});
            });
            target.addClass('app-active');
            input.data('keepFocus', true);
            rtf.range('restore', { force: true });

            setTimeout(function () {
                target.removeClass('app-active');
                var range = rtf.range(),
                    position = range ? (_screen.width - 325 > input.offset().left + getBoundingClientRect(range).right ? 'right' : 'left') : 'right'
                showContextPanel(context, '#app-rtf', {
                    position: position,
                    close: rtf.focus
                });
            }, feedbackDelay);
            return false;
        }
        else if (!target.is('.app-shim-more'))
            $(this).find('i').each(function () {
                var btn = $(this),
                    offset = btn.offset();
                if (x >= offset.left - 4 && x <= offset.left + btn.outerWidth() + 4) {
                    button = btn;
                    return false;
                }
            });
        if (button && button.length && !button.is('.app-disabled')) {
            if (!android)
                findInput().data('keepFocus', true).trigger('blur');
            //rtf.range('restore');
            button.addClass('app-active');
            setTimeout(function () {
                button.removeClass('app-active');
                rtf.range('restore');
                rtf.focus();
                //setTimeout(function () {
                rtf.range('exec', { command: button.data('command'), argument: button.data('argument') }); //execCommandOnSelectedRange(button.data('command'), button.data('argument'));
                //}, feedbackDelay);
            }, feedbackDelay);
        }
        return false;
    }).on('mousedown pointerdown touchstart', '.app-has-rtf', function (e) {
        if ($(e.target).is('.app-has-rtf,.app-data-input-placeholder'))
            return false;
    }).on('rtfeditorsubmit.dataview.app', function (e) {
        rtf.document('blur');
        var dataView = e.dataView,
            data = dataView.data(),
            fieldName = e.survey.context.field;
        dataView.discard();
        whenPageShown(function () {
            inputExecute({ name: fieldName, value: data['text'] });
        });
    }).on('touchstart pointerdown mousedown', '.app-glass-pane', function (e) {
        if (e.type !== 'mousedown' || !isTouchPointer)
            $(this).addClass('app-glass-pane-reject');
        saveTouchPoint(e);
        e.preventDefault();
        e.stopPropagation();
    }).on('mouseenter', '.app-desktop .app-vscrollbar', function (e) {
        var scrollbar = $(this).data({ hover: true, time: timeNow() });
        if (!scrollbar.is('.app-scrollbar-hover') && $settingsEnabled('ui.scrollbars.expand'))
            setTimeout(function () {
                if (scrollbar.data('hover')) {
                    scrollbar.addClass('app-scrollbar-hover');
                    if (!scrollbarHoveMonitorTimeout)
                        scrollbarHoveMonitorTimeout = setInterval(scrollbarHoverMonitor, 200);
                }
            }, 200);
    }).on('mouseleave', '.app-vscrollbar', function (e) {
        $(this).removeData('hover').data('time', timeNow());
    }).on('mouseenter', '.app-menu-strip .ui-btn', function (e) {
        if (!isTouchPointer) {
            clearTimeout(autoOpenMenuTimeout);
            autoOpenMenuTimeout = setTimeout(function () {
                var btn = $(e.target);
                if (btn.is('.app-has-children'))
                    btn.trigger($.Event('vclick', { autoOpen: true }));
                else if (btn.closest('.app-menu-strip').length)
                    closePopups(true, '.app-popup-menu');
            }, $('.ui-popup-active .app-popup-menu').length ? 100 : 350);
        }
    }).on('mouseleave', '.app-menu-strip .ui-btn', function (e) {
        if (!isTouchPointer) {
            clearTimeout(autoOpenMenuTimeout);
            var btn = $(this);
            if (!btn.data('selected'))
                closePopups(true, '.app-popup-menu');
        }
    }).on('mousedown', '.ui-popup-screen,.app-menu-strip,.app-logo,.app-bar-toolbar,.app-bar-buttons', function (e) {
        var doTriggerClick,
            target = $(e.target),
            popup = $('.app-popup');

        function triggerClickEvent(direction) {
            var clickEvent = $.Event('vclick');
            clickEvent.pageX = clickEvent.clientX = _lastTouch.x;
            clickEvent.pageY = clickEvent.clientY = _lastTouch.y;
            elementAt().trigger(clickEvent);
        }

        if (!isTouchPointer && popup.length && !e.button) {
            doTriggerClick = !target.closest('.app-bar-toolbar').length && !popup.find('.app-popup-panel').length;
            if (target.is('.ui-popup-screen')) {
                var selectedMenuItem = findActivePage(".app-bar-actions .app-selected,.app-grid-header [data-field-name].app-selected"),
                    clickedElem;
                closePopupWithoutTransition(popup);
                if (!isTouchPointer && selectedMenuItem.length) {
                    clickedElem = elementAt(touch.lastTouch()).closest('.ui-btn,[data-field-name]');
                    if (selectedMenuItem.is(clickedElem))
                        doTriggerClick = false;
                }
            }
            if (doTriggerClick)
                touch.invokeInTargetPage(triggerClickEvent);
            else if (target.closest('.app-logo,.app-bar-toolbar').length)
                closePopupWithoutTransition(popup)
            return false;
        }
    }).on('vclick', '.app-bar-tabs li', function (e) {
        var li = $(this),
            item = li.data('item');
        if (item)
            menuItemNodeCallback(item.context);
        else
            showApps('right', false, true);
        if (_app._navigated) {
            li.parent().find('.app-selected').removeClass('app-selected');
            li.addClass('app-selected');
        }
        return false;
    }).on('mousedown touchstart pointerdown', '.ui-panel-dismiss', function (e) {
        setTimeout(panelClose, 0, $('.ui-panel-open'))
        return false;
    }).on('vclick', '.ui-panel', function (e) {
        var contextPanel = $(this),
            link = $(e.target).closest('a'),
            linkIcon = link.closest('li').attr('data-icon');
        if (panelIsBusy || !link.length)
            return false;
        if (!clickable(link))
            return false;
        var action = link.data('context-action');
        if (action && !skipContextActionOnClose) {
            if (action.dataRel)
                return true;
            if (action.feedback === false) {
                activeLink();
                if (action.keepOpen === true || action.transition) {
                    executeContextAction(action, link, true);
                    ensureFocusedLink(link);
                }
                else {
                    panelClose(contextPanel, linkIcon !== 'dots' && linkIcon !== iconBack);
                    contextActionOnClose = function () {
                        setTimeout(function () {
                            executeContextAction(action, link);
                        }, 10);
                    };
                }
            }
            else
                if (action.keepOpen === true || action.transition) {
                    callWithFeedback(link, function () {
                        executeContextAction(action, link, true);
                        ensureFocusedLink(link);
                    });
                }
                else {
                    callWithFeedback(link, function () {
                        var lists,
                            firstList, listContainer;
                        if (action.icon === iconBack) {
                            lists = link.closest('.ui-panel-inner').find('ul');
                            firstList = lists.first();
                        }
                        if (lists && lists.length > 1) {
                            enablePointerEvents(false);
                            var targetUL = $(lists[lists.length - 2]).removeClass('ui-listview-hidden');
                            var lastScrollTop = targetUL.data('lastScrollTop') || 0;
                            $(lists[lists.length - 1]).css('margin-top', lastScrollTop);
                            targetUL.closest('.ui-panel-inner').scrollTop(lastScrollTop);
                            listContainer = firstList.parent().addClass('app-list-container-reverse').css(
                                {
                                    transition: '',
                                    'transform': 'translate3d(' + -(-parseCss(firstList, 'margin-right') + firstList.closest('.ui-panel').outerWidth() * (lists.length - 2)) + 'px,0,0)'
                                    //'margin-left': -(-parseInt(firstList.css('margin-right')) + firstList.closest('.ui-panel').outerWidth() * (lists.length - 2))
                                }).one('transitionend', function () {
                                    setTimeout(function () {
                                        lists.last().remove();
                                        listContainer.removeClass('app-list-container-reverse');
                                        scrollFocusedLinkIntoView($(lists[lists.length - 2]).find('.app-focus'));
                                        enablePointerEvents(true);
                                    });
                                });
                        }
                        else {
                            var href = link.attr('href');
                            if (href)
                                _window.location.href = href;
                            else {
                                panelClose._canceled = false;
                                panelClose(contextPanel, linkIcon !== 'dots' && linkIcon !== iconBack);
                                contextActionOnClose = function () {
                                    setTimeout(function () {
                                        executeContextAction(action, link);
                                    }, enablePanelAnimation() ? 10 : feedbackDelay);
                                };
                            }
                        }
                    });
                }
        }
        skipContextActionOnClose = false;
        return false;
    })/*.on('vclick', '.app-virtual-screen', function () {
        closePopupsAndPanels();
        return false;
    })*/;

    // Rich Text Format API

    rtf = {
        list: [],
        groups: [
            {
                list: [
                    { command: 'undo', key: 'Ctrl+Z', metaKey: true, icon: 'undo', toolbar: false },
                    { command: 'redo', key: 'Ctrl+Y', icon: 'redo', toolbar: false },
                    { command: 'redo', key: 'Meta+Shift+Z', toolbar: false, hidden: true }
                ]
            },
            {
                text: resourcesEditor.Format,
                list: [
                    { command: 'formatBlock', argument: 'p', icon: 'short-text' },
                    { command: 'formatBlock', argument: 'blockquote', icon: 'format-quote' },
                    { command: 'formatBlock', argument: 'h1', icon: 'title' },
                    { command: 'formatBlock', argument: 'h2' },
                    { command: 'formatBlock', argument: 'h3' },
                    { command: 'formatBlock', argument: 'h4' },
                    { command: 'formatBlock', argument: 'h5' },
                    { command: 'formatBlock', argument: 'h6' }
                ]
            },
            {
                list: [
                    { command: 'bold', key: 'Ctrl+B', metaKey: true, icon: 'format-bold' },
                    { command: 'italic', key: 'Ctrl+I', metaKey: true, icon: 'format-italic' },
                    { command: 'underline', key: 'Ctrl+U', metaKey: true, icon: 'format-underlined' },
                    { command: 'strikethrough', key: 'Alt+Shift+5', metaKey: true, icon: 'strikethrough-s' }
                ]
            },
            {
                list: [
                    { command: 'insertUnorderedList', icon: 'format-list-bulleted' },
                    { command: 'insertOrderedList', icon: 'format-list-numbered' }
                ]
            },
            {
                list: [
                    { command: 'justifyLeft', key: 'Ctrl+L', metaKey: true, icon: 'format-align-left' },
                    { command: 'justifyCenter', key: 'Ctrl+E', metaKey: true, icon: 'format-align-center' },
                    { command: 'justifyRight', key: 'Ctrl+R', metaKey: true, icon: 'format-align-right' },
                    { command: 'justifyFull', key: 'Ctrl+J', metaKey: true, icon: 'format-align-justify' }
                ]
            },
            {
                list: [
                    { command: 'indent', icon: 'format-indent-increase', key: 'Ctrl+]', which: 221 },
                    { command: 'outdent', icon: 'format-indent-decrease', key: 'Ctrl+[', which: 219 }
                ]
            },
            {
                list: [
                    { command: 'removeFormat', icon: 'format-clear' },
                    { command: 'rtf', argument: 'editor', icon: 'fullscreen', key: 'F11' }
                ]
            }
        ],
        status: {
            undo: true,
            redo: true,
            indent: true,
            outdent: true
        },
        init: function () {
            rtf.groups.forEach(function (g) {
                g.list.forEach(function (c) { rtf.list.push(c); });
            });
        },
        allow: function (field, commandDef) {
            if (!field) {
                field = _input.elementToField(findInput());
                if (!field) return false;
            }
            var tag = field.Tag, test,
                command = commandDef.command,
                argument = commandDef.argument;
            if (command === 'rtf' && argument === 'editor' && field._dataView._controller === 'rtfeditor_sys')
                return false;
            if (!tag || !tag.match(/\brtf\-command\-/))
                return true;
            test = command;
            if (argument)
                test += '-' + argument;
            return field.is('rtf-command-' + test);
        },
        document: function (method) {
            var input = findInput(),
                doc = input.is('iframe') ? input[0].contentDocument : null;
            if (doc)
                if (method === 'focus')
                    doc.body.focus();
                else if (method === 'blur') {
                    var rtfOffset = input.offset(),
                        fakeInput = $htmlTag('input').css({ borderWidth: 0, position: 'absolute', left: rtfOffset.left, top: rtfOffset.top }).appendTo(input.parent()).trigger('focus');
                    input.trigger('blur');
                    fakeInput.remove();
                    focusScrollable();
                }
            return doc;
        },
        window: function (method) {
            var input = findInput(),
                result = input.is('iframe') ? input[0].contentWindow : null;
            if (result)
                if (method === 'selection')
                    result = result.getSelection();
            return result;
        },
        toText: function (command, argument) {
            var text = resourcesEditor[command.substring(0, 1).toUpperCase() + command.substring(1)];
            if (typeof text != 'string')
                text = text[argument];
            return text;
        },
        range: function (method, options) {
            if (!method)
                method = 'get';
            // save the range in the internal global variable
            if (method === 'save') {
                rtf._range = rtf.range();
                return;
            }
            // reset the internal range
            if (method === 'clear') {
                rtf._range = null;
                return;
            }
            var selection = rtf.window('selection');
            if (method === 'get')
                return selection && selection.getRangeAt && selection.rangeCount ? selection.getRangeAt(0) : null;
            // other range manipulation
            var contentDocument = rtf.document(),
                range = rtf._range, cursor;

            if (method === 'restore') {
                if (options && options.force) {
                    if (range && range.startOffset === range.endOffset) {
                        var r = getBoundingClientRect(range),
                            input = findInput(),
                            inputOffset = input.offset();
                        cursor = $span('app-rtf-cursor').appendTo($body).css({ left: inputOffset.left + r.left, top: inputOffset.top + r.top + parseCss(input, 'padding-top'), height: r.height }).data('blink', setInterval(function () {
                            cursor.css('display', cursor.css('display') !== 'none' ? 'none' : '');
                        }, 500));

                    }
                }
                else {
                    cursor = $('.app-rtf-cursor');
                    clearInterval(cursor.data('blink'));
                    cursor.remove();
                }
                // restore selected range
                if (range && selection) {
                    try {
                        selection.removeAllRanges();
                    }
                    catch (ex) {
                        contentDocument.body.createTextRange().select();
                        contentDocument.selection.empty();
                    }
                    try {
                        selection.addRange(range);
                    }
                    catch (ex) {
                        rtf._range = null;
                    }
                }
            }
            else if (method === 'insert') {
                var result = true,
                    tag = options && options.tag;
                if (tag) {
                    if (tag === 'p' && range.endContainer.parentNode.tagName === 'P') {
                        if (range.startOffset === range.endOffset &&
                            range.startContainer == range.endContainer &&
                            range.endContainer.nodeName === '#text' &&
                            range.endContainer.length === range.endOffset &&
                            (range.endContainer.nextSibling == null ||
                                range.endContainer.nextSibling.tagName !== 'BR')) {
                            var nextPara = range.endContainer.parentNode.nextSibling;
                            range.setStartBefore(nextPara, 0);
                            range.setEndBefore(nextPara, 0);
                            range.collapse();
                            var newPara = contentDocument.createElement('p');
                            range.insertNode(newPara);
                            range.setStart(newPara, 0);
                            range.setEnd(newPara, 0);
                            range.collapse();

                            var newChildBr = contentDocument.createElement('br');
                            range.insertNode(newChildBr);
                            range.setStartBefore(newChildBr);
                            range.setEndBefore(newChildBr);
                            range.collapse();
                            selection.removeAllRanges();
                            selection.addRange(range);

                            result = false;
                        }
                    }
                    else if (tag === 'br') {
                        var br = contentDocument.createElement(tag);
                        range.deleteContents();
                        var endOfRange =
                            range.startOffset === range.endOffset &&
                            range.startContainer == range.endContainer &&
                            range.endContainer.nodeName === '#text' &&
                            range.endContainer.length === range.endOffset &&
                            (range.endContainer.nextSibling == null ||
                                range.endContainer.nextSibling.tagName !== 'BR' && range.endContainer.nextSibling.nodeName !== '#text');
                        range.insertNode(br);
                        if (endOfRange) {
                            br = contentDocument.createElement(tag);
                            range.insertNode(br);
                            //touch.notify({ text: 'second BR', force: true });
                        }
                        range.setStartAfter(br);
                        range.setEndAfter(br);
                        range.collapse(false);
                        selection.removeAllRanges();
                        selection.addRange(range);
                        result = false;
                    }
                    else {
                        if (contentDocument.queryCommandState('insertUnorderedList') || contentDocument.queryCommandState('insertOrderedList'))
                            tag = 'li';
                        contentDocument.execCommand('formatBlock', false, tag);
                    }
                    findInput().trigger('rtfchanged');
                    return result;
                }
            }
            else if (method === 'exec' && options) {
                var command = options.command,
                    argument = options.argument;
                if (command === 'rtf') {
                    if (rtf.allow(null, options)) {
                        rtf.range('restore');
                        rtf[argument]();
                    }
                    return;
                }
                if (options.validate && command && !command.match(/^(undo|redo)$/)) {
                    if (!rtf.allow(null, options))
                        return;
                }
                rtf.range('restore');
                if (command === 'formatBlock' && argument) {
                    if (!contentDocument.execCommand(command, 0, argument))
                        contentDocument.execCommand(command, 0, '<' + argument + '>');
                }
                else
                    contentDocument.execCommand(command, 0, argument);
                contentDocument.body.focus();
                rtf.range('status');
                findInput().trigger('rtfchanged');
            }
            else if (method === 'focus') {
                rtf.range('restore');
                if (!findInput().is(':focus'))
                    findInput().trigger('focus');
                rtf.document('focus');
            }
            else if (method === 'status') {
                dataInputOf(findInput(), '.app-control-toolbar i')/*.closest('[data-input]').find('.app-control-toolbar i')*/.each(function () {
                    var btn = $(this),
                        command = btn.data('command');
                    if (command && command !== 'rtf')
                        try {
                            btn.toggleClass('app-selected', contentDocument.queryCommandState(command));
                            if (rtf.status[command])
                                btn.toggleClass('app-disabled', !contentDocument.queryCommandEnabled(command));
                            else
                                btn.toggleClass('app-selected', contentDocument.queryCommandState(command));
                        }
                        catch (ex) {
                            // do nothing
                        }
                });
            }
            else if (method === 'select') {
                var startX = options.x,
                    startY = options.y,
                    endX = options.x2,
                    endY = options.y2;
                if (startX == null) return null;
                try {
                    if (endX == null)
                        endX = startX;
                    if (endY == null)
                        endY = startY;
                    var win = rtf.window(),
                        start, end;
                    range = null;
                    if (typeof contentDocument.caretPositionFromPoint != "undefined") {
                        start = contentDocument.caretPositionFromPoint(startX, startY);
                        end = contentDocument.caretPositionFromPoint(endX, endY);
                        range = contentDocument.createRange();
                        range.setStart(start.offsetNode, start.offset);
                        range.setEnd(end.offsetNode, end.offset);
                    } else if (typeof contentDocument.caretRangeFromPoint != "undefined") {
                        start = contentDocument.caretRangeFromPoint(startX, startY);
                        end = contentDocument.caretRangeFromPoint(endX, endY);
                        range = contentDocument.createRange();
                        range.setStart(start.startContainer, start.startOffset);
                        range.setEnd(end.startContainer, end.startOffset);
                    }
                    if (range !== null && typeof win.getSelection != "undefined") {
                        var sel = win.getSelection();
                        sel.removeAllRanges();
                        sel.addRange(range);
                        //if (range.select)
                        //    range.select();
                    } else if (typeof contentDocument.body.createTextRange != "undefined") {
                        range = contentDocument.body.createTextRange();
                        range.moveToPoint(startX, startY);
                        var endRange = range.duplicate();
                        endRange.moveToPoint(endX, endY);
                        range.setEndPoint("EndToEnd", endRange);
                        range.select();
                    }
                    return range;
                }
                catch (ex) {
                    return null;
                }
            }
        },
        exec: function (context) {
            rtf.range('exec', { command: context.c, argument: context.a });//execCommandOnSelectedRange(context.cmd, context.args);                
        },
        focus: function () {
            rtf.range('focus');
        },
        editor: function (options) {
            var field, fieldName, data, editorType, tag, commands = [], iterator, rtfCommand;
            if (options) {
                field = activeDataView().findField(options.field);
                editorType = options.type;
            }
            else
                field = _input.elementToField(dataInputOf(findInput()/*.closest('[data-input]')*/));
            tag = field.Tag;
            if (tag) {
                iterator = /\brtf\-command\-(.+?)(\s|$)/g;
                while (rtfCommand = iterator.exec(tag))
                    commands.push(rtfCommand[0]);
            }
            fieldName = field.Name;
            rtf.document('blur');
            data = field._dataView.data();
            saveLastFocusedField(editorType ? null : fieldName);
            _app.survey({
                controller: 'rtfeditor_sys',
                context: { field: fieldName },
                text: field.HeaderText,
                text2: resourcesActions.Scopes.Form.Edit.HeaderText,
                questions: [
                    { name: 'text', rows: 5, mode: 'rtf', value: data[fieldName], tags: (commands.length ? commands.join(' ') : null) }
                ],
                layout: '<div data-container="simple" data-wrap="true" class="app-rtf-editor"><div data-container="row"><span data-control="field" data-field="text"></span></div></div>',
                options: {
                    modal: {
                        fullscreen: editorType ? editorType === 'fullscreen' : _screen.width <= toPhysicalWidth('xl')
                    },
                    materialIcon: 'edit'
                },
                submit: 'rtfeditorsubmit.dataview.app',
                submitKey: 'Ctrl+Enter',
                submitText: resourcesModalPopup.SaveButton
            });
        },
        scrolled: function (e) {
            rtf.toolbar('position');
        },
        blur: function (e) {
            var textInput = findInput(dataInputOf(e.target));
            if (!textInput.is('iframe') || textInput.is(e.target) || panelIsBusy)
                return;
            windowAutoFocus(false);
            textInput.trigger('blur');
            windowAutoFocus(true);
        },
        autoSize: function (e) {
            if (!rtf.document()) return;
            var textInput = findInput(),
                dataInput = dataInputOf(textInput),//.closest('[data-input]'),
                inner = dataInput.find('.app-control-inner'),
                placeholder,
                value = textInputToValue(textInput),// contentDocument.body.innerHTML,
                lastValue = inner.html(),
                height;
            if (lastValue !== value) {
                height = inner.height();
                inner.html(value.length ? value : _input.fieldToPlaceholder(_input.elementToField(textInput)) || '&nbsp;');
                lastValue = value;
                if (height !== inner.height()) {
                    textInput.parent().scrollTop(0);
                    syncEmbeddedViews();
                    rtf.range('save'); //saveSelectedRange();
                }
                placeholder = dataInput.find('.app-data-input-placeholder');
                placeholder.css('display', value.length ? 'none' : '');
            }
        },
        handlers: function (textInput, attach) {
            var contentDocument = textInput[0].contentDocument,
                $contentDocument = $(contentDocument);

            if (attach) {
                textInput.on('rtfchanged', rtf.autoSize);
                $document.one('focusin touchend', rtf.blur);
                $document.on('scroll.app scrollstop.app resized.app', rtf.scrolled);

                $contentDocument.on('keydown', 'body', function (e) {
                    userActivity();
                    var key = e.originalEvent.key,
                        preventDefault,
                        shiftKey = e.shiftKey;
                    if (key === 'Enter') {
                        preventDefault = rtf.range('insert', { tag: shiftKey ? 'br' : 'p' });
                        if (!preventDefault)
                            return false;
                    }
                    if (key === 'Tab') {
                        setTimeout(function () {
                            var dataInput = dataInputOf(findInput());
                            _input.blur();
                            _input.move(dataInput, shiftKey ? 'up' : 'down');
                        });
                        return false;
                    }
                    if (key === 'F10') {
                        if (shiftKey)
                            touch.showContextMenu();
                        else
                            //textInput.closest('[data-input]').find('.app-control-toolbar-more').trigger('vclick');
                            dataInputOf(textInput, '.app-control-toolbar-more').trigger('vclick');
                        return false;
                    }
                    if (key && key.match(/^Esc/)) {
                        var escEvent = $.Event('keydown');
                        escEvent.which = 27;
                        textInput.trigger(escEvent);
                        return false;
                    }
                    if (handleKeyboardShortcuts(e, true))
                        rtf.autoSize();
                }).on('mouseup keyup mouseout', 'body', function () {
                    rtf.range('save');
                    rtf.range('status');
                }).on('touchend', 'body', function () {
                    setTimeout(function () {
                        rtf.range('save');
                        rtf.range('status');
                    }, 100);
                }).on('paste', 'body', function (e) {
                    if (e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) {
                        e.preventDefault();
                        var text = e.originalEvent.clipboardData.getData('text/plain');
                        contentDocument.execCommand('insertText', false, text);
                    }
                    else if (e.clipboardData && e.clipboardData.getData) {
                        e.preventDefault();
                        text = e.clipboardData.getData('text/plain');
                        contentDocument.execCommand('insertText', false, text);
                    }
                    else if (_window.clipboardData && _window.clipboardData.getData) {
                        if (!_window._rtfLock) {
                            _window._rtfLock = true;
                            e.preventDefault();
                            contentDocument.execCommand('ms-pasteTextOnly', false);
                        }
                        _window._rtfLock = false;
                    }
                    rtf.autoSize();
                }).on('keyup', 'body', rtf.autoSize);
            }
            else {
                rtf.range('clear'); // selectedRange = null;
                $contentDocument.off();
                textInput.off('rtfchanged');
                $document.off('scroll.app scrollstop.app resized.app', rtf.scrolled);

            }
        },
        toolbar: function (method, dataInput) {
            var inner, field, toolbar, frame;

            if (!dataInput)
                dataInput = dataInputOf(findInput());

            function create() {
                toolbar = dataInput.find('.app-control-toolbar');
                if (!toolbar.length) {
                    inner = dataInput.find('.app-control-inner');
                    field = _input.elementToField(dataInput);
                    if (field.is('rtf-frame'))
                        frame = $div('app-control-frame app-hidden').insertBefore(inner);
                    toolbar = $div('app-control-toolbar app-hidden');
                    if (!frame)
                        toolbar.addClass('app-control-toolbar-noframe');
                    rtf.groups.forEach(function (g) {
                        var lastButton,
                            commandList = g.list,
                            groupText = g.text;
                        if (groupText) {
                            if ($(commandList).filter(function () { return rtf.allow(field, this); }).length)
                                lastButton = $span('app-has-droparrow').text(groupText).attr('title', groupText).data('group', g).appendTo(toolbar);
                        }
                        else
                            commandList.forEach(function (def) {
                                var command = def.command,
                                    argument = def.argument,
                                    showOnToolbar = def.toolbar !== false,
                                    icon = def.icon,
                                    tooltip, shortcut,
                                    button;
                                if (!def.hidden && command && rtf.allow(field, def)) {
                                    tooltip = rtf.toText(command, argument);// resourcesEditor[command.substring(0, 1).toUpperCase() + command.substring(1)];
                                    shortcut = def.key;
                                    if (icon) {
                                        button = materialIcon('material-icon-' + icon, toolbar).attr('title', tooltip + (shortcut ? (' (' + shortcut + ')') : ''));
                                        if (!showOnToolbar)
                                            button.addClass('app-hidden');
                                    }
                                    else
                                        button = $i('app-hidden').appendTo(toolbar);
                                    button.data({ command: command, argument: argument, icon: icon, text: tooltip, shortcut: shortcut });
                                    lastButton = button;
                                }
                            });
                        if (lastButton) {
                            button = $span('app-divider').appendTo(toolbar);
                            if (lastButton.is('.app-hidden'))
                                button.addClass('app-hidden');
                        }
                    });
                    if (!field.is('rtf-more-none')) {
                        $span('app-shim-more').appendTo(toolbar);
                        materialIcon('material-icon-more-' + (android ? 'vert' : 'horiz'), toolbar).addClass('app-control-toolbar-more').attr('title', labelMore + ' (F10)');
                    }
                    var defaultLocation = field.is('rtf-toolbar-location') === 'bottom' ? 'bottom' : isTouchPointer ? 'bottom' : 'top',
                        toolbarInfo = { bar: toolbar, frame: frame, location: defaultLocation, defaultLocation: defaultLocation };
                    toolbarInfo.defaultLocation = toolbarInfo.location;
                    dataInput.data('toolbar', toolbarInfo);
                    updateLocation();
                    position(dataInput);
                    setTimeout(function () {
                        if (frame)
                            frame.removeClass('app-hidden');
                        toolbar.removeClass('app-hidden');
                    });
                }
            }

            function updateLocation() {
                var inner = dataInput.find('.app-control-inner'),
                    toolbarInfo = dataInput.data('toolbar'),
                    toolbar = toolbarInfo.bar,
                    frame = toolbarInfo.frame,
                    offset;

                toolbar.insertBefore(inner);
                offset = toolbar.outerHeight();
                if (toolbarInfo.location === 'top') {
                    offset = -offset;
                    if (frame)
                        frame.css({ top: offset, bottom: '' });
                }
                else {
                    toolbar.insertAfter(inner);
                    if (frame)
                        frame.css({ top: '', bottom: -offset });
                    offset = 0;
                }
                toolbar.css('margin-top', offset);
            }

            function position(dataInput, restoreDefault) {
                if (!dataInput)
                    dataInput = dataInputOf(findInput());
                var scrollable = findScrollable(),
                    scrollableOffset = scrollable.offset(),
                    pageHeader = findActivePage('.app-page-header'),
                    pageHeaderRect = getBoundingClientRect(pageHeader),
                    statusBar = findActivePage('.app-status-bar'),
                    statusBarRect = getBoundingClientRect(statusBar),
                    toolbarInfo = dataInput.data('toolbar'),
                    toolbar, toolbarOffset;
                if (toolbarInfo) {
                    if (restoreDefault) {
                        toolbarInfo.location = toolbarInfo.defaultLocation;
                        updateLocation();
                    }
                    toolbar = toolbarInfo.bar;
                    toolbarOffset = toolbar.offset();
                    if (toolbarOffset.top < scrollableOffset.top || pageHeaderRect.height && toolbarOffset.top < pageHeaderRect.bottom || statusBarRect.height && toolbarOffset.top < statusBarRect.bottom || toolbarOffset.top + toolbar.outerHeight() > scrollableOffset.top + scrollable.height()) {
                        toolbarInfo.location = toolbarInfo.location === 'bottom' ? 'top' : 'bottom';
                        updateLocation();
                    }
                }
            }

            function remove() {
                toolbar = dataInput.data('toolbar');
                if (toolbar) {
                    toolbar.bar.find('i,.app-has-droparrow').removeData();
                    toolbar.bar.remove();
                    frame = toolbar.frame;
                    if (frame)
                        frame.remove();
                    dataInput.removeData('toolbar');
                }
            }

            if (method === 'create')
                create(dataInput);
            else if (method === 'position')
                position(dataInput, true);
            else
                remove(dataInput);
        }
    };

    mobileGrid.registerClass('Web.DataView.MobileGrid', mobileBase);
    mobileForm.registerClass('Web.DataView.MobileForm', mobileBase);
})();